[
  {
    "path": "src/main/java/Lisa.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.Exception;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.NoTimeframeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.TooManySpacesException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.CommandEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * \u003ch1\u003eTask tracker, codenamed LISA.\u003c/h1\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This programme is an application to add and delete tasks to a list for tracking."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * Available functions include finding tasks by description, listing out all tasks, finding tasks by day/month/year,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * setting the task status to \u0027done\u0027, changing the priority of the task and a \u0027bye\u0027 call to terminate the programme."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Lisa {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * These are the variables of the main LISA class, each variable being another class-level with their own methods."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Storage handles all methods that access and modifies the text file, where the task list is stored."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * TaskList is a class which contains an ArrayList to store the list of tasks. It handles all methods that access"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * and modifies that ArrayList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Ui (user interface) contains all methods that print to the terminal in IntelliJ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the LISA-class object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param filePath This is path to the text file from the root of the project, in string format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Lisa(String filePath) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Runs the programme of LISA. Accepts commands from user if it matches with CommandEnum, otherwise prints"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * error message with template for correction."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws Exception This is the exception superclass. Has all the relevant self-created"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                   exceptions under it as subclasses."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void run() throws IOException, Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String input \u003d \"blank\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        while (!input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            input \u003d ui.receive();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            String[] splitCmd \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                CommandEnum cmd \u003d CommandEnum.valueOf(splitCmd[0].toUpperCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                switch (cmd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case WITHIN:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            tasks.add(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            storage.insert(tasks.getStore().get(tasks.getStore().size() - 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.printAddMessage(tasks.getStore().get(tasks.getStore().size() - 1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (NoDescriptionException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showNoDescriptionError();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (NoTimeframeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showNoTimeFrameError();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showIndexError();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showDateFormatError1();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case LIST:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        ui.list(tasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case FIND:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.find(input, tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case DAY:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.listByDay(input, tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showDateFormatError2();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case MONTH:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.listByMonth(input, tasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showDateFormatError3();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case YEAR:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.listByYear(input, tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showDateFormatError4();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case DELETE:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (tasks.getStore().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                ui.printEmptyListMessage();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            tasks.delete(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            storage.delete(input);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.printDeleteMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (NumberFormatException | NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case DONE:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (tasks.getStore().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                ui.printEmptyListMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            tasks.setDone(input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            storage.setDone(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.printDoneMessage();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (NumberFormatException | NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showInvalidNumberError();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case CHANGE_PRIORITY:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (tasks.getStore().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                ui.printEmptyListMessage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            tasks.setPriority(input);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            storage.setPriority(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.printPriorityMessage();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showIncorrectPriorityError();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showMissingPriorityError();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case SEARCH_PRIORITY:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.searchPriority(input, tasks);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (TooManySpacesException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showTooManySpacesError();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showIncorrectPriorityError();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            ui.showMissingPriorityError();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case HELP:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        ui.printCmdList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case BYE:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        ui.printByeMessage();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                ui.showIllegalArgumentError();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is the main function. Calls the constructor for a new LISA-class object and executes it\u0027s run method to"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * begin the programme."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param args This is to allow user-input from the command line (terminal)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws Exception This is the exception superclass. Has all the relevant self-created"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                   exceptions under it as subclasses."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public static void main(String[] args) throws Exception, IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        new Lisa(\"data/task_list.txt\").run();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 217
    }
  },
  {
    "path": "src/main/java/enumerations/CommandEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * These are the enumerations for all the possible commands available for user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    TODO, DEADLINE, EVENT, WITHIN, LIST, DELETE, DONE, BYE, DAY, MONTH, YEAR, HELP, FIND, CHANGE_PRIORITY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    SEARCH_PRIORITY"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 9
    }
  },
  {
    "path": "src/main/java/enumerations/PriorityEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * These are the enumerations of priority-levels."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public enum PriorityEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    HIGH, MEDIUM, LOW, NA"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 8
    }
  },
  {
    "path": "src/main/java/enumerations/SymbolEnum.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public enum SymbolEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    T, D, E, W"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 5
    }
  },
  {
    "path": "src/main/java/exceptions/Exception.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Exception class. It is a superclass."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Exception extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 7
    }
  },
  {
    "path": "src/main/java/exceptions/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * Exception when description is missing from user-input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 7
    }
  },
  {
    "path": "src/main/java/exceptions/NoTimeframeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * Exception when timeframe (date and/or time) is missing from user-input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class NoTimeframeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 7
    }
  },
  {
    "path": "src/main/java/exceptions/TooManySpacesException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * Exception when double spaces input by user is detected."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class TooManySpacesException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 7
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the storage class for handling interactions with \u0027task_list.txt\u0027 file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * Available functions include reading from the file for loading into the ArrayList, deleting a task from the list,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * changing the status of the task to \u0027done\u0027 (from ✗ -\u003e ✓), editing the priority of the task and insertion of a new"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @Version 1.0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the Storage-class object. It checks whether the \u0027data\u0027 folder (and effectively the task_list.txt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * file) exists. If it does not, it creates both the folder and text file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param filePath This is the path to the task_list.txt file from the root directory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        File dataFolder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (!dataFolder.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            dataFolder.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method reads from the text file and loads each line into an ArrayList during initialization. The ArrayList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * is returned as the list of tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Task list as an ArrayList of strings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ArrayList tasks \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Scanner scanner \u003d new Scanner(new File(\"data/task_list.txt\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            tasks.add(scanner.nextLine());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method deletes a task from the text file. It copies the contents of the text file to a temp file, and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * re-writes the text file by copying back the temp file, with the exception of the task to be deleted (it skips the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * line). To do this, it utilizes counters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input from the user in the form of \"delete (index)\"."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void delete(String input) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int counter \u003d 1; // To know when the desired line has been reached."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.copy(Paths.get(\"data/task_list.txt\"), Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/task_list.txt\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Scanner scanner \u003d new Scanner(new File(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            if (counter \u003d\u003d index ) { // Cursor reached the desired line."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                scanner.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(scanner.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.delete(Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method changes the status of a task to \u0027done\u0027 (from ✗ -\u003e ✓). It copies the contents of the text file to a"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * temp file, and re-writes the text file by copying back the temp file, with the exception of the task to be"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * edited (it replaces the content after copying and before writing). To do this, it utilizes counters."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input from the user in the form of \"done (index)\"."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDone(String input) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int counter \u003d 1; // To know when the desired line has been reached."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.copy(Paths.get(\"data/task_list.txt\"), Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/task_list.txt\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Scanner scanner \u003d new Scanner(new File(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            if (counter \u003d\u003d index ) { // Cursor reached the desired line."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(scanner.nextLine().replaceAll(\"✗\", \"✓\") + \"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(scanner.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.delete(Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method changes the priority level of a task. It copies the contents of the text file to a temp file, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * re-writes the text file by copying back the temp file, with the exception of the task to be edited (it replaces"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * the content after copying and before writing). To do this, it utilizes counters."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input from the user in the form of \"Change_priority (index) (priority-level)\"."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriority(String input) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d Integer.parseInt(input.substring(16, 17));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int counter \u003d 1; // To know when the desired line has been reached."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int counter2 \u003d 0; // To know when the end of the line has been reached after writing, so that no \u0027|\u0027 will be"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                          // written."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.copy(Paths.get(\"data/task_list.txt\"), Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/task_list.txt\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Scanner scanner \u003d new Scanner(new File(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            if (counter \u003d\u003d index ) { // Cursor reached the desired line."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                String[] editLine \u003d scanner.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                editLine[editLine.length - 1]  \u003d \" \" + input.substring(18).toUpperCase();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                for (String part : editLine) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    fw.write(part);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    counter2++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (counter2 !\u003d editLine.length) { // Will write \"|\" until last word of line has been reached."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        fw.write(\"|\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(\"\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(scanner.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Files.delete(Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method adds a task to the text file. It checks what category of task it is, and writes accordingly."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the task-object to be inserted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws IOException This is the error for input-output. Has to be thrown or programme will not run."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void insert(Task task) throws IOException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/task_list.txt\", true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                : \"Symbol is invalid during loading from insertion of task to text file.\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        switch (symbol) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(\"T | ✗ | \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getDescription()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getPriority()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case D:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(\"D | ✗ | \" + task.getDescription()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getDayOfMonth())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getMonthValue())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getDateAndTime().getYear()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \", \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getHour())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \":\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getMinute())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getPriority()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case E:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(\"E | ✗ | \" + task.getDescription()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getDayOfMonth())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getMonthValue())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getDateAndTime().getYear()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \", \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getHour())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \":\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getDateAndTime().getMinute())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getPriority()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case W:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                fw.write(\"W | ✗ | \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getDescription()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getStart().getDayOfMonth())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getStart().getMonthValue())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getStart().getYear()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \", \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getStart().getHour())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \":\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getStart().getMinute())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" - \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getEnd().getDayOfMonth())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getEnd().getMonthValue())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"/\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getEnd().getYear()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \", \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getEnd().getHour())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \":\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + String.format(\"%02d\", task.getEnd().getMinute())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \" | \""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + task.getPriority()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 254
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Deadline class. It is a subclass of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is the date and time variable. It is of LocalDateTime format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method creates the Deadline-class. It calls the superclass constructor, as well as sets the symbol to \"D\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * and sets the date and time. It has two cases of usage (thus two formatter methods), normal creation and when"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * loading from the text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of the task as input by user in string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param dateAndTime This is the date and time of the task as input by user in string format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws DateTimeParseException This exception is thrown when the format of the date and time as input by user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Deadline(String description, String dateAndTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.symbol \u003d SymbolEnum.valueOf(\"D\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, formatter());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, formatterLoad());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the symbol of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns symbol of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public SymbolEnum getSymbol() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the date and time of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns LocalDateTime of deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during normal creation of deadline task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during loading of deadline task from the text file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatterLoad() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy, H:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 72
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Event class. It is a subclass of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is the date and time variable. It is of LocalDateTime format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method creates the Event-class. It calls the superclass constructor, as well as sets the symbol to \"E\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * and sets the date and time. It has two cases of usage (thus two formatter methods), normal creation and when"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * loading from the text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of the task as input by user in string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param dateAndTime This is the date and time of the task as input by user in string format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws DateTimeParseException This exception is thrown when the format of the date and time as input by user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Event(String description, String dateAndTime) throws DateTimeParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.symbol \u003d SymbolEnum.valueOf(\"E\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, formatter());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, formatterLoad());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the symbol of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns symbol of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public SymbolEnum getSymbol() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the date and time of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns LocalDateTime of event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during normal creation of event task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during loading of event task from the text file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatterLoad() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy, H:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 72
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Task class. It is a superclass."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * These are the variables of a Task class. Priority of the task is an enumeration (HIGH, LOW, MEDIUM, NA),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * description is a string, status of the task (isDone) is a boolean, and the symbol of the task is a enum."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * (T, D, E, W)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    protected PriorityEnum priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    protected SymbolEnum symbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the Task-class object. This constructor is never called by itself, it is only called through it\u0027s"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * subclass-constructors. Description is set according to user input, status is defaulted to false and priority-"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * level is defaulted to \"NA\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of task as a string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        priority \u003d PriorityEnum.valueOf(\"NA\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method edits the priority-level of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param priority This is the new priority-level in string format. It is changed to PriorityEnum."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriority(String priority) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.priority \u003d PriorityEnum.valueOf(priority.toUpperCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the priority-level of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the priority-level of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public PriorityEnum getPriority() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the status of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the status of task as a string, either [✗] or [✓]."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public String getDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            return (\"[✗]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            return (\"[✓]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method sets the description parameter using a string input by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the description of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the description of task as a string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return(description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method sets the status of the task to \"true\"."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * These are empty methods utilized for subclass-overriding."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Empty returns."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getDateAndTime() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is an abstract method. Actual method in subclasses."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public abstract SymbolEnum getSymbol();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 111
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the ToDo-class. It is a subclass of Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the Todo-class object. It calls the superclass constructor, as well as sets the symbol of the object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * to \"T\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of the task as input by user in string format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.symbol \u003d SymbolEnum.valueOf(\"T\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *This method returns the symbol of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns symbol of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public SymbolEnum getSymbol() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 29
    }
  },
  {
    "path": "src/main/java/task/Within.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Within class. It is a subclass of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Within extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * These are the start and end date/time variables. They are of LocalDateTime format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method creates the Event-class. It calls the superclass constructor, as well as sets the symbol to \"W\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * and sets the date and time. It has two cases of usage (thus two formatter methods), normal creation and when"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * loading from the text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param description This is the description of the task as input by user in string format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param start This is the start date and time of the task as input by user in string format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param end This is the end date and time of the task as input by user in string format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws DateTimeParseException This exception is thrown when the format of the date and time as input by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Within(String description, String start, String end) throws DateTimeParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.symbol \u003d SymbolEnum.valueOf(\"W\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.start \u003d LocalDateTime.parse(start, formatter());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.end \u003d LocalDateTime.parse(end, formatter());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.start \u003d LocalDateTime.parse(start, formatterLoad());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            this.end \u003d LocalDateTime.parse(end, formatterLoad());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the symbol of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns symbol of task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public SymbolEnum getSymbol() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the start date and time of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns LocalDateTime of Within task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the end date and time of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns LocalDateTime of Within task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during normal creation of within task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatter() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This formatter method is used during loading of within task from the text file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private DateTimeFormatter formatterLoad() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"d/M/yyyy, H:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 86
    }
  },
  {
    "path": "src/main/java/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.TooManySpacesException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.NoTimeframeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.NoDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.Exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Within;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the TaskList class for handling interactions with the ArrayList of tasks. Available functions include"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * getting the ArrayList, changing the status of a task to \u0027done\u0027 (from [✗] -\u003e [✓]), editing the priority of the task,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * deletion and insertion of tasks into the ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is the ArrayList of tasks contained by the TaskList class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final ArrayList\u003cTask\u003e store;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the TaskList-class object. It receives another ArrayList of string as the task list loaded from the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * text file. Any tasks in the ArrayList from the text file is then loaded to the new ArrayList in a new format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskArray The ArrayList of strings (task list) loaded from the text file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e taskArray) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        this.store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (String task : taskArray) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            String[] splitSections \u003d task.split(\"\\\\|\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d SymbolEnum.valueOf(splitSections[0].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during loading from text file to ArrayList.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch(symbol) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.add(new ToDo(splitSections[2].trim()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.get(store.size()-1).setPriority(splitSections[3].trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.add(new Deadline(splitSections[2].trim(), splitSections[3].trim()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.get(store.size()-1).setPriority(splitSections[4].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.add(new Event(splitSections[2].trim(), splitSections[3].trim()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.get(store.size()-1).setPriority(splitSections[4].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    String[] startEnd \u003d splitSections[3].split(\"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.add(new Within(splitSections[2].trim(), startEnd[0].trim(), startEnd[1].trim()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    store.get(store.size()-1).setPriority(splitSections[4].trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            if (splitSections[1].trim().equals(\"✓\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                store.get(store.size()-1).setDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method returns the ArrayList of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the ArrayList."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public ArrayList\u003cTask\u003e getStore() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is a helper method, used by the add method to identify user-input error where the description of the task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * is missing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user, to be tested for error."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns true if the description is missing, false if a description is present."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public boolean catcher(String input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] splitDescription \u003d input.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return input.trim().length() \u003d\u003d splitDescription[0].length();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method sets the status of the selected task to \u0027done\u0027."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"done (index)\"."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDone(String input) throws TooManySpacesException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            throw new TooManySpacesException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] splitIndex \u003d input.split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d Integer.parseInt(splitIndex[1]) - 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        store.get(index).setDone();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assert store.get(index).getDone().equals(\"[✓]\") : \"Failed to set task to done status properly.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method changes the priority of the selected task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"priority (index) (priority-level)\"."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * many errors."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriority(String input) throws TooManySpacesException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            throw new TooManySpacesException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] splitIndex \u003d input.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d Integer.parseInt(splitIndex[1]) - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        store.get(index).setPriority(splitIndex[2].trim());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assert store.get(index).getPriority().toString().equals(splitIndex[2].toUpperCase())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                : \"Setting of priority was incorrect.\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method deletes a task from the ArrayList."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"delete (index)\"."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * many errors."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void delete(String input) throws TooManySpacesException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            throw new TooManySpacesException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] splitIndex \u003d input.split(\" \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        store.remove(Integer.parseInt(splitIndex[1]) - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method adds a task to the ArrayList. It detects what the type of the task to be added is based on the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * starting character of the user-input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the user input. The form differs based on what the type of task is. E.g"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *              ToDo: ToDo shopping"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *              Deadline: Deadline homework /by 10/10/2020 10:10"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *              Event: Event concert /at 10/10/2020 10:10"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *              Within: Within semester /from 1/1/2020 10:10 /to 1/4/2020 10:10"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws Exception This exception-superclass is thrown whenever any of it\u0027s subclass is thrown (refer to Exception"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                   class for details)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void add(String input) throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        SymbolEnum symbol \u003d SymbolEnum.valueOf(input.substring(0, 1).toUpperCase());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                : \"Symbol is invalid during loading addition of task to ArrayList.\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        switch (symbol) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(input)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoDescriptionException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new TooManySpacesException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                store.add(new ToDo(input.substring(4).trim()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case D:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(input)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoDescriptionException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new TooManySpacesException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                String[] splitBy \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(splitBy[1])) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoTimeframeException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                store.add(new Deadline(splitBy[0].substring(8).trim(), splitBy[1].trim()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case E:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(input)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoDescriptionException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new TooManySpacesException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                String[] splitAt \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(splitAt[1])) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoTimeframeException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                store.add(new Event(splitAt[0].substring(5).trim(), splitAt[1].trim()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case W:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(input)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoDescriptionException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (input.contains(\"  \")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new TooManySpacesException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                String[] splitFromTo \u003d input.split(\"/from\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                String[] dates \u003d splitFromTo[1].split(\"/to\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (catcher(dates[0]) || catcher(dates[1])) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    throw new NoTimeframeException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                store.add(new Within(splitFromTo[0].substring(6).trim(), dates[0].trim(), dates[1].trim()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 218
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import exceptions.TooManySpacesException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This is the Ui (User interface) class for handling prints to the terminal."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This creates the Ui-class object. It prints a welcome message to the terminal."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String logo \u003d \" _       ___     ____       _____      \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \"| |     |_ _|   | ___|     /  _  \\\\        \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \"| |      | |    | |__     /  /_\\\\  \\\\      \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \"| |      | |    |___ |   /  ____   \\\\      \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \"| |__   _| |_    __| |  /  /     \\\\  \\\\    \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \"|____| |_____|  |____| /__/       \\\\__\\\\   \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(logo +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"\\nHello, Lisa here~\\nHow can I help you today?\\n**Type \\\"help\\\" for a list of commands**\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when description is missing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showNoDescriptionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"I need a description or my code will burn!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when date and time is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showNoTimeFrameError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"I need a timeframe or my code will be blown away!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when double-spacing is detected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showTooManySpacesError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"No double spaces or my code will crash!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when an invalid command is input by user. A list of commands is then printed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showIllegalArgumentError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Invalid input :( Please try again and follow the template closely!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        printCmdList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when invalid task number is inputted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showInvalidNumberError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Invalid function number. Try again.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when marker \"/by\" or \"/at\" is incorrectly input by user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showIndexError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Make sure you typed identifier \\\"/by\\\", \\\"/at\\\", \\\"/from\\\" and/or \\\"/to\\\" correctly!\"); }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when priority-level is incorrectly input by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showIncorrectPriorityError() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Invalid priority setting. Use either NA, LOW, MEDIUM or HIGH.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when priority-level is missing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showMissingPriorityError() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Missing priority setting. Use either NA, LOW, MEDIUM or HIGH.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when the date format input by user is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * showDateFormatError1 is used when adding tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showDateFormatError1() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Date format is wrong. Use dd/mm/yyyy hh:mm.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when the date format input by user is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * showDateFormatError1 is used when searching for tasks in a particular day."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showDateFormatError2() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Date format is wrong. Use dd/mm/yyyy.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when the date format input by user is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * showDateFormatError3 is used when searching for tasks in a particular month."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showDateFormatError3() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Date format is wrong. Use mm/yyyy.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints an error message when the date format input by user is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * showDateFormatError4 is used when searching for tasks in a particular year."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void showDateFormatError4() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Date format is wrong. Use yyyy.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a goodbye message when closing programme."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Goodbye~ Hope to see you again soon! :3\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a message when the deletion of a task is successful."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printDeleteMessage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed that task.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a message when edits are attempted on the list of tasks when the list is empty."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printEmptyListMessage() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Your list is already empty.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a message when a task has been successfully set as \u0027done\u0027."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printDoneMessage() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a message when the edit of a task priority-level is successful."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printPriorityMessage() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Roger. I\u0027ve set the priority of this task as such.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a list of available commands to the user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printCmdList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"-ToDo description\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Deadline description /by dd/mm/yyyy hh:mm\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Event description /at dd/mm/yyyy hh:mm\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Within description /from dd/mm/yyyy hh:mm /to dd/mm/yyyy hh:mm\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-List\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Day dd/mm/yyyy\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Month mm/yyyy\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Year yyyy\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Delete (item number)\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Done (item number)\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Change_Priority (item number) (priority level)\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Search_Priority (Priority-level)\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                \"-Bye\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This private method is a helper function which prints the selected task to the terminal. It is reused multiple"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * times in the other public methods."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the task to be printed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printTodo(Task task) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"[T]\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDone()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" (Priority: \" + task.getPriority()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \")\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This private method is a helper function which prints the selected task to the terminal. It is reused multiple"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * times in the other public methods."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the task to be printed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printDeadline(Task task) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"[D]\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDone()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getDayOfMonth()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getMonth()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getYear()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \", \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getDateAndTime().getHour())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getDateAndTime().getMinute())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \") (Priority: \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getPriority()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \")\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This private method is a helper function which prints the selected task to the terminal. It is reused multiple"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * times in the other public methods."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the task to be printed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printEvent(Task task) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"[E]\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDone()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" (at: \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getDayOfMonth()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getMonth()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDateAndTime().getYear()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \", \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getDateAndTime().getHour())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getDateAndTime().getMinute())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \") (Priority: \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getPriority()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \")\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This private method is a helper function which prints the selected task to the terminal. It is reused multiple"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * times in the other public methods."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the task to be printed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printWithin(Task task) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"[W]\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDone()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" (within: \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getStart().getDayOfMonth()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getStart().getMonth()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getStart().getYear()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \", \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getStart().getHour())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getStart().getMinute())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getEnd().getDayOfMonth()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getEnd().getMonth()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getEnd().getYear()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \", \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getEnd().getHour())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + String.format(\"%02d\", task.getEnd().getMinute())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \") (Priority: \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + task.getPriority()"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                + \")\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints a message when a task has been successfully added to the list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param task This is the added task."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printAddMessage(Task task) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                : \"Symbol is invalid during printing of successful task adding message.\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        switch (symbol) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case T:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                printTodo(task);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case D:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                printDeadline(task);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case E:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                printEvent(task);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            case W:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                printWithin(task);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints out a list of tasks with matching descriptions to the search-word input by the user."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Different headers are printed depending on whether the list is empty, and whether there are any matches."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"find (description)\"."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskList This is the list of tasks to be combed through for matching results."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void find(String input, TaskList taskList) throws TooManySpacesException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) { throw new TooManySpacesException(); }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (taskList.getStore().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] headers \u003d new String[2];"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[0] \u003d \"There are no matching tasks.\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[1] \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] query \u003d input.split(\" \");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : taskList.getStore()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during search for matching tasks (find).\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch (symbol) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDescription().contains(query[1].trim())) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printTodo(task);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDescription().contains(query[1].trim())) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printDeadline(task);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDescription().contains(query[1].trim())) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printEvent(task);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDescription().contains(query[1].trim())) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printWithin(task);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println (headers[0]);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints out the list of tasks to the terminal."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskList This is the list of tasks to be printed."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void list(TaskList taskList) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (taskList.getStore().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : taskList.getStore()) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during listing out of all tasks.\";"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch (symbol) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    System.out.print(index + \". \");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    printTodo(task);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    System.out.print(index + \". \");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    printDeadline(task);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    System.out.print(index + \". \");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    printEvent(task);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    System.out.print(index + \". \");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    printWithin(task);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints the tasks that fall on the same day as the search-input by user. Different headers are printed"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * depending on whether there are any matches."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"Day (date e.g 10/10/2020)\"."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskList This is the list of tasks to be combed through for matches."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void listByDay (String input, TaskList taskList) throws TooManySpacesException {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) { throw new TooManySpacesException(); }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] headers \u003d new String[2];"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[0] \u003d \"There are no tasks for that day.\";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[1] \u003d \"Here are the tasks for that day:\";"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String dateString \u003d input.substring(3).trim();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString, formatter);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : taskList.getStore()) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during listing out of tasks of a specific day.\";"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch (symbol) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDateAndTime().getDayOfYear() \u003d\u003d date.getDayOfYear()"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 task.getDateAndTime().getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printDeadline(task);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDateAndTime().getDayOfYear() \u003d\u003d date.getDayOfYear()"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 task.getDateAndTime().getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printEvent(task);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getDayOfYear() \u003c\u003d date.getDayOfYear()"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 task.getEnd().getDayOfYear() \u003e\u003d date.getDayOfYear()"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 task.getStart().getYear() \u003d\u003d date.getYear()"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 task.getEnd().getYear() \u003d\u003d date.getYear()) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printWithin(task);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println (headers[0]);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints the tasks that fall on the same month as the search-input by user. Different headers are"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * printed depending on whether there are any matches."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"Month (date e.g 9/2020)\"."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskList This is the list of tasks to be combed through for matches."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void listByMonth (String input, TaskList taskList) throws TooManySpacesException {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) { throw new TooManySpacesException(); }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] headers \u003d new String[2];"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[0] \u003d \"There are no tasks for that month.\";"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[1] \u003d \"Here are the tasks for that month:\";"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String monthString \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"M/yyyy\");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.parse(monthString, formatter);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : taskList.getStore()) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during listing out of tasks of a specific month.\";"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch (symbol) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDateAndTime().getMonth() \u003d\u003d yearMonth.getMonth()"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 yearMonth.getYear() \u003d\u003d (task.getDateAndTime().getYear())) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printDeadline(task);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getDateAndTime().getMonth() \u003d\u003d yearMonth.getMonth()"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            \u0026\u0026 yearMonth.getYear() \u003d\u003d (task.getDateAndTime().getYear())) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printEvent(task);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    int situationOfYear \u003d 0;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003d\u003d yearMonth.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003d\u003d yearMonth.getYear()) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        situationOfYear \u003d 1;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003c yearMonth.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003d\u003d yearMonth.getYear()) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        situationOfYear \u003d 2;"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003d\u003d yearMonth.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003e yearMonth.getYear()) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        situationOfYear \u003d 3;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003c yearMonth.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003e yearMonth.getYear()) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        situationOfYear \u003d 4;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    switch (situationOfYear) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        case 1:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (task.getStart().getMonthValue() \u003c\u003d yearMonth.getMonthValue() \u0026\u0026"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                    task.getEnd().getMonthValue() \u003e\u003d yearMonth.getMonthValue() ) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                    System.out.println (headers[1]);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                System.out.print(index + \". \");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                printWithin(task);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                index++;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        case 2:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (task.getEnd().getMonthValue() \u003e\u003d yearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                    System.out.println (headers[1]);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                System.out.print(index + \". \");"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                printWithin(task);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                index++;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        case 3:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (task.getStart().getMonthValue() \u003c\u003d yearMonth.getMonthValue()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                    System.out.println (headers[1]);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                System.out.print(index + \". \");"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                printWithin(task);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                index++;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        case 4:"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                System.out.println (headers[1]);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                System.out.print(index + \". \");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                printWithin(task);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                                index++;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println (headers[0]);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method prints the tasks that fall on the same year as the search-input by user. Different headers are"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * printed depending on whether there are any matches."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by the user in the form of \"Year (date e.g 2020)\"."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param taskList This is the list of tasks to be combed through for matches."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void listByYear (String input, TaskList taskList) throws TooManySpacesException {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) { throw new TooManySpacesException(); }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] headers \u003d new String[2];"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[0] \u003d \"There are no tasks for that year.\";"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[1] \u003d \"Here are the tasks for that year:\";"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String yearString \u003d input.substring(4).trim();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy\");"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Year year \u003d Year.parse(yearString, formatter);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : taskList.getStore()) {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E || symbol \u003d\u003d SymbolEnum.W"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    : \"Symbol is invalid during listing out of tasks of a specific year.\";"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            switch (symbol) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (year.getValue() \u003d\u003d (task.getDateAndTime().getYear())) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printDeadline(task);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (year.getValue() \u003d\u003d (task.getDateAndTime().getYear())) {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printEvent(task);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                case W:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    boolean isYearWithin \u003d false;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003d\u003d year.getValue() \u0026\u0026"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003d\u003d year.getValue()) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        isYearWithin \u003d true;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003c year.getValue() \u0026\u0026"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003d\u003d year.getValue()) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        isYearWithin \u003d true;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003d\u003d year.getValue() \u0026\u0026"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003e year.getValue()) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        isYearWithin \u003d true;"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (task.getStart().getYear() \u003c year.getValue() \u0026\u0026"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            task.getEnd().getYear() \u003e year.getValue()) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        isYearWithin \u003d true;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    if (isYearWithin) {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                            System.out.println (headers[1]);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printWithin(task);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println (headers[0]);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method searches for tasks of the same priority-level as input by user. Different headers are printed"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * depending on whether there are any matches."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param input This is the input by user which contains the priority-level to be searched, in the form of"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *              \"Search_Priority (priority-level)\"."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @param tasks This is the list of tasks to be searched."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @throws TooManySpacesException This exception is thrown when double spacing is detected. Double spacing leads to"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *                                many errors."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void searchPriority(String input, TaskList tasks) throws TooManySpacesException {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (input.contains(\"  \")) { throw new TooManySpacesException(); }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] headers \u003d new String[2];"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[0] \u003d \"There are no tasks of that priority-level.\";"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        headers[1] \u003d \"Here are the tasks of that priority-level:\";"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        String[] splitPriority \u003d input.split(\" \");"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        PriorityEnum priority \u003d PriorityEnum.valueOf(splitPriority[1].toUpperCase());"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        for (Task task : tasks.getStore()) {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            if (priority \u003d\u003d task.getPriority()) {"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    System.out.println (headers[1]);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                SymbolEnum symbol \u003d task.getSymbol();"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                assert symbol \u003d\u003d SymbolEnum.T || symbol \u003d\u003d SymbolEnum.D || symbol \u003d\u003d SymbolEnum.E ||"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        symbol \u003d\u003d SymbolEnum.W : \"Symbol is invalid during searching of tasks of a specific priority.\";"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                switch (symbol) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case T:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printTodo(task);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case D:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printDeadline(task);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case E:"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printEvent(task);"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                    case W:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        System.out.print(index + \". \");"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        printWithin(task);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "            System.out.println (headers[0]);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method receives input from the user and returns it in string format."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the user input as string format."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public String receive() {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 791
    }
  },
  {
    "path": "src/test/java/LisaTest/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the Deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 2) getDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 3) getSymbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 4) getDone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 5) getPriority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 6) LocalDateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Deadline(\"tEsT cAsE\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"tEsT cAsE\", test.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.D, test.getSymbol());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", test.getDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(test.isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getDateAndTime().getDayOfMonth());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getDateAndTime().getMonthValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2020, test.getDateAndTime().getYear());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDoneTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Deadline(\"test case\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", test.getDone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setPriority"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriorityTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Deadline(\"test case\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"hiGh\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.HIGH, test.getPriority());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"MEDIUM\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.MEDIUM, test.getPriority());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"low\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.LOW, test.getPriority());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"Na\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 71
    }
  },
  {
    "path": "src/test/java/LisaTest/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the Event class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 2) getDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 3) getSymbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 4) getDone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 5) getPriority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 6) LocalDateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Event(\"tEsT cAsE\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"tEsT cAsE\", test.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.E, test.getSymbol());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", test.getDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(test.isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getDateAndTime().getDayOfMonth());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getDateAndTime().getMonthValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2020, test.getDateAndTime().getYear());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDoneTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Event(\"test case\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", test.getDone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setPriority"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriorityTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Event(\"test case\", \"10/10/2020 10:10\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"hiGh\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.HIGH, test.getPriority());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"MEDIUM\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.MEDIUM, test.getPriority());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"low\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.LOW, test.getPriority());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"Na\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 71
    }
  },
  {
    "path": "src/test/java/LisaTest/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the TaskList class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This is a private method to create an ArrayList of tasks as strings in text file format, for editing and loading"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * into ArrayList as system format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * @return Returns the ArrayList of strings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private ArrayList\u003cString\u003e constructArray() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ArrayList taskArray \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        taskArray.add(\"T | ✗ | TODO TEST | NA\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        taskArray.add(\"D | ✓ | DEADLINE TEST | 10/04/2020, 07:08 | LOW\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        taskArray.add(\"E | ✗ | EVENT TEST | 09/05/2019, 05:06 | MEDIUM\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        taskArray.add(\"W | ✓ | WITHIN TEST | 08/06/2018, 03:04 - 02/03/2021, 01:02 | HIGH\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        return taskArray;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This tests the constructor of TaskList. Ensures that the change of format from text file to system is proper."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ArrayList taskArray \u003d constructArray();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        TaskList tasks \u003d new TaskList(taskArray);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        // First task testing"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.T , tasks.getStore().get(0).getSymbol());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", tasks.getStore().get(0).getDone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"TODO TEST\", tasks.getStore().get(0).getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, tasks.getStore().get(0).getPriority());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        // Second task testing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.D , tasks.getStore().get(1).getSymbol());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", tasks.getStore().get(1).getDone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"DEADLINE TEST\", tasks.getStore().get(1).getDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.LOW, tasks.getStore().get(1).getPriority());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, tasks.getStore().get(1).getDateAndTime().getDayOfMonth());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(4, tasks.getStore().get(1).getDateAndTime().getMonthValue());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2020, tasks.getStore().get(1).getDateAndTime().getYear());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(7, tasks.getStore().get(1).getDateAndTime().getHour());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(8, tasks.getStore().get(1).getDateAndTime().getMinute());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        // Third task testing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.E , tasks.getStore().get(2).getSymbol());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", tasks.getStore().get(2).getDone());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"EVENT TEST\", tasks.getStore().get(2).getDescription());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.MEDIUM, tasks.getStore().get(2).getPriority());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(9, tasks.getStore().get(2).getDateAndTime().getDayOfMonth());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(5, tasks.getStore().get(2).getDateAndTime().getMonthValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2019, tasks.getStore().get(2).getDateAndTime().getYear());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(5, tasks.getStore().get(2).getDateAndTime().getHour());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(6, tasks.getStore().get(2).getDateAndTime().getMinute());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        // Fourth task testing"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.W , tasks.getStore().get(3).getSymbol());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", tasks.getStore().get(3).getDone());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"WITHIN TEST\", tasks.getStore().get(3).getDescription());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.HIGH, tasks.getStore().get(3).getPriority());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(8, tasks.getStore().get(3).getStart().getDayOfMonth());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(6, tasks.getStore().get(3).getStart().getMonthValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2018, tasks.getStore().get(3).getStart().getYear());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(3, tasks.getStore().get(3).getStart().getHour());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(4, tasks.getStore().get(3).getStart().getMinute());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2, tasks.getStore().get(3).getEnd().getDayOfMonth());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(3, tasks.getStore().get(3).getEnd().getMonthValue());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2021, tasks.getStore().get(3).getEnd().getYear());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(1, tasks.getStore().get(3).getEnd().getHour());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2, tasks.getStore().get(3).getEnd().getMinute());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void catcherTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ArrayList taskArray \u003d constructArray();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        TaskList tasks \u003d new TaskList(taskArray);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertTrue(tasks.catcher(\"TODO\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertTrue(tasks.catcher(\"TODO \"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(tasks.catcher(\"TODO d\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(tasks.catcher(\"TODO d d\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 103
    }
  },
  {
    "path": "src/test/java/LisaTest/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the ToDo class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 2) getDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 3) getSymbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 4) getDone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 5) getPriority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new ToDo(\"test case\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"test case\", test.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.T, test.getSymbol());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", test.getDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(test.isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setDone"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDoneTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new ToDo(\"test case\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", test.getDone());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setPriority"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriorityTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new ToDo(\"test case\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"hiGh\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.HIGH, test.getPriority());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"MEDIUM\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.MEDIUM, test.getPriority());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"low\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.LOW, test.getPriority());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"Na\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 67
    }
  },
  {
    "path": "src/test/java/LisaTest/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the Ui class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method tests printTodo in Ui class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printTodoTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new ToDo(\"TEST CASE\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ui.printTodo(test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[T][✗] TEST CASE (Priority: NA)\\r\\n\", outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method tests printDeadline in Ui class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printTDeadlineTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Deadline(\"TEST CASE\", \"01/02/2020 03:04\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ui.printDeadline(test);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[D][✗] TEST CASE (by: 1 FEBRUARY 2020, 03:04) (Priority: NA)\\r\\n\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method tests printEvent in Ui class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printTEventTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Event(\"TEST CASE\", \"01/02/2020 03:04\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ui.printEvent(test);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[E][✗] TEST CASE (at: 1 FEBRUARY 2020, 03:04) (Priority: NA)\\r\\n\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * This method tests printWithin in Ui class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void printWithinTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Within(\"TEST CASE\", \"01/02/2020 03:04\", \"05/06/2020 07:08\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        ui.printWithin(test);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[W][✗] TEST CASE (within: 1 FEBRUARY 2020, 03:04 to 5 JUNE 2020, 07:08) (Priority: NA)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                        + \"\\r\\n\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 73
    }
  },
  {
    "path": "src/test/java/LisaTest/WithinTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "package LisaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.PriorityEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import enumerations.SymbolEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import task.Within;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * This class tests the Within class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @author Aloysius Wong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " * @since 08-11-2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "public class WithinTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 2) getDescription"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 3) getSymbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 4) getDone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 5) getPriority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 6) Start LocalDateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 7) End LocalDateTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Within(\"tEsT cAsE\", \"10/10/2020 10:10\", \"23/8/2025 03:20\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"tEsT cAsE\", test.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(SymbolEnum.W, test.getSymbol());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✗]\", test.getDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertFalse(test.isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getStart().getDayOfMonth());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(10, test.getStart().getMonthValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2020, test.getStart().getYear());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(23, test.getEnd().getDayOfMonth());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(8, test.getEnd().getMonthValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(2025, test.getEnd().getYear());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setDone"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setDoneTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Within(\"tEsT cAsE\", \"10/10/2020 10:10\", \"23/8/2025 03:20\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(\"[✓]\", test.getDone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * Tests:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     * 1) setPriority"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    public void setPriorityTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        Task test \u003d new Within(\"tEsT cAsE\", \"10/10/2020 10:10\", \"23/8/2025 03:20\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"hiGh\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.HIGH, test.getPriority());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"MEDIUM\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.MEDIUM, test.getPriority());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"low\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.LOW, test.getPriority());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        test.setPriority(\"Na\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "        assertEquals(PriorityEnum.NA, test.getPriority());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aloysiuswwc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aloysiuswwc": 75
    }
  }
]
