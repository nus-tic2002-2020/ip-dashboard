[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukecommand.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeexception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukefile.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukelist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean exit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eDuke\u003c/code\u003e class, initialize task list, user ui, user list file path and value of exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param filePath the file path to save the task list file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            exit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Method to start the Duke program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        ui.welcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        while (!exit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                String[] input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                Command command \u003d new Command(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                command.check(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                exit \u003d command.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "mtahgg": 49
    }
  },
  {
    "path": "src/main/java/dukecommand/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukefile.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukelist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean exit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private ArrayList\u003cString\u003e validCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eCommand\u003c/code\u003e class, store the received command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param command the String received as execution command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Command(String[] command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        exit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"list\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"help\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"todo\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"deadline\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"event\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"delete\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"done\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"undone\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"update\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"find\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validCommand.add(\"copy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Check user issues command to \u003ccode\u003eexit\u003c/code\u003e."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return boolean value of exit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Check if the number in the command is a valid \u003ccode\u003eindex\u003c/code\u003e of task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param s     the String represents the task index number in the command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param range Number of the total tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return true if the input String is a valid integer number or within the tasks range, otherwise false."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean isIndex(String s, int range) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            i \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (i \u003c 1 || i \u003e range) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (i \u003e range \u0026\u0026 i \u003c 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new AssertionError(\"Index check failed\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Check if the command is \u003ccode\u003evalid\u003c/code\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * If it is invalid, an Exception would be generated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void check(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (!validCommand.contains(command[0])) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid command,\\n   Key in \u0027help\u0027 for valid commands.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (!command[0].equals(\"bye\") \u0026\u0026 !command[0].equals(\"list\") \u0026\u0026 !command[0].equals(\"help\") \u0026\u0026 command.length \u003c 2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Incomplete command.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"task\") \u0026\u0026 !command[2].contains(\"/by\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Todo task does not accept /by schedule.\\n   Please create Deadline task.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"task\") \u0026\u0026 !command[2].contains(\"/at\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Todo task does not accept /at schedule.\\n   Please create Event task.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"deadline\") \u0026\u0026 !command[1].contains(\"/by\") \u0026\u0026 !command[1].contains(\"/takes\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Missing /by or /takes schedule.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"event\") \u0026\u0026 !command[1].contains(\"/at\") \u0026\u0026 !command[1].contains(\"/takes\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Missing /at or /takes schedule.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"delete\") \u0026\u0026 !isIndex(command[1], tasks.size())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid index number of the task.\\n   Key in \u0027list\u0027 to check the task\u0027s index.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"done\") \u0026\u0026 !isIndex(command[1], tasks.size())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid index number of the task.\\n   Key in \u0027list\u0027 to check the task\u0027s index.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"undone\") \u0026\u0026 !isIndex(command[1], tasks.size())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid index number of the task.\\n   Key in \u0027list\u0027 to check the task\u0027s index.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"find\") \u0026\u0026 command.length \u003c 2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Missing the key word to find the task.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else if (command[0].equals(\"copy\") \u0026\u0026 !isIndex(command[1], tasks.size())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid index number of the task.\\n   Key in \u0027list\u0027 to check the task\u0027s index.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }else if (command[0].equals(\"update\") \u0026\u0026 !isIndex(command[1].split(\"\\\\s\", 2)[0], tasks.size())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            throw new DukeException(\"Invalid index number of the task.\\n   Key in \u0027list\u0027 to check the task\u0027s index.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Execute the \u003ccode\u003ecommand\u003c/code\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasks the task list stores the tasks"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param ui    the ui used to display user ui"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        switch (command[0]) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.bye();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                exit \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.showList(tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.help();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.doneTask(Integer.parseInt(command[1]) - 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.doneTask(tasks.getTask(Integer.parseInt(command[1]) - 1));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.updateTasks(tasks);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"undone\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.unDoneTask(Integer.parseInt(command[1]) - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.doneTask(tasks.getTask(Integer.parseInt(command[1]) - 1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.updateTasks(tasks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.addTask(new Todo(command[1]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.addTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.writeTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.addTask(new Deadline(command[1]));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.addTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.writeTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.addTask(new Event(command[1]));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.addTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.writeTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.deleteTask(tasks.getTask(Integer.parseInt(command[1]) - 1), tasks.size() - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.deleteTask(Integer.parseInt(command[1]) - 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.updateTasks(tasks);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.findTask(tasks.findTask(command[1]));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.updateTask(tasks.updateTask(command[1]));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.updateTasks(tasks);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"copy\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.copyTask(Integer.parseInt(command[1]) - 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                ui.copyTask(tasks.getTask(Integer.parseInt(command[1]) - 1), tasks.size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                storage.writeTask(tasks.getTask(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assert false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 176
    }
  },
  {
    "path": "src/main/java/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class DukeException extends java.lang.Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 7
    }
  },
  {
    "path": "src/main/java/dukefile/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukefile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukelist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private File list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eStorage\u003c/code\u003e class, initialize Storage with the file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param filepath the String received as file path"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        path \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        list \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (!list.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            File dir \u003d new File(list.getParent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            if (!dir.isDirectory()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                System.out.println(\"\\n   Directory does not exist, creating directory\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                        + \"     \" + dir.getAbsolutePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                dir.mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                list.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            System.out.println(\"\\n   File does not exist in the directory, creating file\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                    + \"     \" + list.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Add a \u003ccode\u003etask\u003c/code\u003e in the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task the task to be added to the file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void writeTask(Task task, int size) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(path), true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            fw.write(String.valueOf(size));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            fw.write(String.valueOf(task));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            fw.write(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Update the file from task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasks the updated task list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void updateTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            ArrayList\u003cString\u003e text \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) text.add(tasks.getTask(i).toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            FileWriter fw \u003d new FileWriter(list);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            BufferedWriter wr1 \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            for (int i \u003d 0; i \u003c text.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                wr1.write(String.valueOf(i + 1) + text.get(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                wr1.write(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            wr1.flush();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            wr1.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 103
    }
  },
  {
    "path": "src/main/java/dukelist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eTaskList\u003c/code\u003e class, initialize a new ArrayList task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return the \u003ccode\u003esize\u003c/code\u003e of the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return the \u003ccode\u003etask\u003c/code\u003e based on the index in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param index the index of the task to be returned"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the task based on the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Add a \u003ccode\u003enew task\u003c/code\u003e to the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task the task which is going to be added into the task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Delete a \u003ccode\u003etask\u003c/code\u003e to the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskIndex the index of the task in the task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the \u003ccode\u003etask\u003c/code\u003e status to done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskIndex the index of the task in the task list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void doneTask(int taskIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks.get(taskIndex).markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the \u003ccode\u003etask\u003c/code\u003e status to not done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskIndex the index of the task in the task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void unDoneTask(int taskIndex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks.get(taskIndex).markNotDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Find the tasks contains the \u003ccode\u003ekeyword\u003c/code\u003e in the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param key the String of the find keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the String ArrayList task list of the tasks with the keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public ArrayList\u003cString\u003e findTask(String key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        //TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            if (task.find(key)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                result.add(String.valueOf(counter + 1) + \".\" + task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Update tasks based on the \u003ccode\u003eupdate\u003c/code\u003e information to the task list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param update the String of the information to be updated"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the task list of the tasks with the keyword"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Task updateTask(String update) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String[] input \u003d update.split(\"\\\\s\", 3);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        switch (input[1]) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"/des\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.get(Integer.parseInt(input[0]) - 1).setDescription(input[2]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"/by\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"/at\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"/takes\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.get(Integer.parseInt(input[0]) - 1).setSchedule(input[2]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"/reset\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                tasks.get(Integer.parseInt(input[0]) - 1).reset(input[2]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return tasks.get(Integer.parseInt(input[0]) - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Copy the tasks and add to the task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param index the sequence number of the Task being copied"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void copyTask(int index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String copy \u003d tasks.get(index).copy();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        switch (tasks.get(index).getClass().getSimpleName()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"Todo\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                this.addTask(new Todo(copy));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"Deadline\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                this.addTask(new Deadline(copy));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            case \"Event\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                this.addTask(new Event(copy));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 138
    }
  },
  {
    "path": "src/main/java/duketask/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Deadline extends Todo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean isFormatted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private LocalDateTime byDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private String formattedDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eDeadline\u003c/code\u003e class, initialize Deadline task description and schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskData the String received as description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Deadline(String taskData) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        super(taskData);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assert !schedule.isEmpty() : \"Schedule is not provided\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (taskData.contains(\"/by\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formatDateTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Format Deadline \u003ccode\u003eschedule\u003c/code\u003e to the \"dd MMM yyyy, hh:mma\" format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * If cannot be formatted, the schedule would stay the same."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private void formatDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            byDateTime \u003d LocalDateTime.parse(schedule, inputFormat);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formattedDateTime \u003d byDateTime.format(outputFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isFormatted \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }catch (Exception e){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isFormatted \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return Deadline task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return schedule String of the Deadline task, or the formatted datetime as a String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String getSchedule() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(isFormatted){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return formattedDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param schedule A String of the new schedule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void setSchedule(String schedule) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(!isDuration) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formatDateTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change both description and schedule of the Deadline task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param input a String of the new task information"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void reset(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        buffer \u003d input.split(\"\\\\/\", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (input.contains(\"/takes\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isDuration \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        description \u003d buffer[0].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        schedule \u003d buffer[1].split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        isDuration \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        formatDateTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Copy the Event task \u003ccode\u003einformation\u003c/code\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the String of the Event task information"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String copy() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(isDuration \u003d true){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return description + \" /takes \" + schedule;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return description + \" /by \" + schedule;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Convert and return the Deadline task as a String."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the Deadline task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (isDuration) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return String.format(\"[D][%s] %s (takes: %s)\", getStatusIcon(), getDescription(), getSchedule());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), getDescription(), getSchedule());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 109
    }
  },
  {
    "path": "src/main/java/duketask/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Event extends Todo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean isFormatted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private LocalDateTime atDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private String formattedDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eEvent\u003c/code\u003e class, initialize Event task description and schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskData the String received as description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Event(String taskData) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        super(taskData);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assert !schedule.isEmpty() : \"Schedule is not provided\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (taskData.contains(\"/at\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formatDateTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Format Event\u003ccode\u003eschedule\u003c/code\u003e to the \"dd MMM yyyy, hh:mma\" format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * If cannot be formatted, the schedule would stay the same."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private void formatDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            atDateTime \u003d LocalDateTime.parse(schedule, inputFormat);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formattedDateTime \u003d atDateTime.format(outputFormat);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isFormatted \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }catch (Exception e){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isFormatted \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return Event task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return schedule String of the Event task, or the formatted datetime as a String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String getSchedule() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(isFormatted){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return formattedDateTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param schedule A String of the new schedule"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void setSchedule(String schedule) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(!isDuration) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            formatDateTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change both description and schedule of the Event task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param input a String of the new task information"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void reset(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        buffer \u003d input.split(\"\\\\/\", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (input.contains(\"/takes\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isDuration \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        description \u003d buffer[0].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        schedule \u003d buffer[1].split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        isDuration \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        formatDateTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Copy the Event task \u003ccode\u003einformation\u003c/code\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the String of the Event task information"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String copy() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if(isDuration \u003d true){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return description + \" /takes \" + schedule;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return description + \" /at \" + schedule;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Convert and return the Event task as a String."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the Event task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (isDuration) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return String.format(\"[E][%s] %s (takes: %s)\", getStatusIcon(), getDescription(), getSchedule());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), getDescription(), getSchedule());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 109
    }
  },
  {
    "path": "src/main/java/duketask/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String[] buffer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eTask\u003c/code\u003e class, initialize task description and stats of done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskData the String received as description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Task(String taskData) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        buffer \u003d taskData.split(\"\\\\/\", 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        description \u003d this.buffer[0].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change task status to \u003ccode\u003edone\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change task status to \u003ccode\u003eNot Done\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void markNotDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return task \u003ccode\u003edone\u003c/code\u003e status as tick or cross."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return tick or cross based on the value of isDone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return task \u003ccode\u003edescription\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the description"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003edescription\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param description the new description of the task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Find \u003ccode\u003ekeyword\u003c/code\u003e in the description."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return true if found, otherwise false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public boolean find(String key) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (description.contains(key)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param schedule A String of the new schedule"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void setSchedule(String schedule) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param input A String of the new schedule"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void reset(String input) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Copy the task \u003ccode\u003einformation\u003c/code\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String copy() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Convert and return the task as a String."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 108
    }
  },
  {
    "path": "src/main/java/duketask/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected boolean isDuration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eTodo\u003c/code\u003e class, initialize task description and schedule."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param taskData the String received as description of the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Todo(String taskData) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        super(taskData);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (taskData.contains(\"/at\") || taskData.contains(\"/by\") || taskData.contains(\"/takes\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            schedule \u003d buffer[1].split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            if (taskData.contains(\"/takes\")) isDuration \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Return task \u003ccode\u003eschedule\u003c/code\u003e in the description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the schedule in the description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String getSchedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change the task \u003ccode\u003eschedule\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param schedule A String of the new schedule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void setSchedule(String schedule) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Change both description and schedule of the Todo task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param input a String of the new task information"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void reset(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        buffer \u003d input.split(\"\\\\/\", 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        description \u003d buffer[0].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (!buffer[1].isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            schedule \u003d buffer[1].split(\"\\\\s\", 2)[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            isDuration \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Copy the task \u003ccode\u003einformation\u003c/code\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the String of the Todo task information"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String copy() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (isDuration) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return description + \" /takes \" + schedule;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Convert and return the Todo task as a String."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return A String of the task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        if (isDuration) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return String.format(\"[T][%s] %s (takes: %s)\", getStatusIcon(), getDescription(), getSchedule());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 78
    }
  },
  {
    "path": "src/main/java/dukeui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukeui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukelist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected String[] userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    protected ArrayList\u003cString\u003e validInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * Constructor of \u003ccode\u003eUi\u003c/code\u003e class, initialize user input String Array and valid input String Array."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        userInput \u003d new String[2];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"bye\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"list\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"todo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"delete\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"done\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"update\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"find\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        validInput.add(\"copy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display a \u003ccode\u003ehorizontal line\u003c/code\u003e in user UI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private static void line() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        for (int i \u003d 0; i \u003c 50; i++) System.out.print(\"─\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display a \u003ccode\u003ewelcome message\u003c/code\u003e in user UI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(logo + \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"(Key in \u0027help\u0027 for available commands)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To read a \u003ccode\u003ecommand\u003c/code\u003e input by user to user UI,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * separate the command and content and return them."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @return the String Array of the command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public String[] readCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            userInput \u003d input.nextLine().split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            userInput[0].toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display the \u003ccode\u003eerror\u003c/code\u003e while checking."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param error detail of the error"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   \" + error);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display the current \u003ccode\u003etask list\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasks the Task Arraylist which stores the tasks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void showList(TaskList tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            System.out.println(\"     \" + String.valueOf(i + 1) + \".\" + tasks.getTask(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display the \u003ccode\u003efind result\u003c/code\u003e of the key word to user UI."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param result the String ArrayList task list with the find result"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void findTask(ArrayList\u003cString\u003e result) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        for (int i \u003d 0; i \u003c result.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            System.out.println(\"     \" + result.get(i));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display a \u003ccode\u003ebye message\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * To display \u003ccode\u003evalid commands\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void help() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   The valid commands are:\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027list\u0027, to list out the current tasks\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027todo description\u0027, or \u0027todo description /takes duration\u0027.\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027todo finish reports /takes 1 day\u0027\\n\" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027deadline description /by date and time\u0027, or \u0027deadline description /takes duration\u0027.\\n\" +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027deadline submit report /by 11/11/2020 1500\u0027 \\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027event description /at date time\u0027, or \u0027event description /takes duration\u0027.\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027event prepare report /at 11/11/2020 1500\u0027 \\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027delete index of the task\u0027, to delete a task.\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027delete 2\u0027\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027done index of the task\u0027, to change status to done.\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027done 2\u0027\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027undone index of the task\u0027, to change status to not done.\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027undone 2\u0027\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027copy index of the task\u0027, to copy a task.\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027copy 2\u0027\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027find keyword\u0027, to find a task based on the keyword.\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027find Jason\u0027\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027update index of th task /des /by /at /takes or /reset\u0027, to update a task.\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027update 2 /des finalise report\u0027\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027update 3 /at 12/12/2020 1100\u0027\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     example: \u0027update 4 /reset mark report /by 12/12/2020 1100\u0027\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                \"     \u0027bye\u0027, to exit the program.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * When user \u003ccode\u003eadd\u003c/code\u003e a task, display a \u003ccode\u003emessage\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task      the task added to the list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasksSize the size of the task list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void addTask(Task task, int tasksSize) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"     \" + task"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"\\n   Now you have \" + tasksSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * When user \u003ccode\u003edelete\u003c/code\u003e a task, display a \u003ccode\u003emessage\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task      the task deleted from the list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasksSize the size of the task list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void deleteTask(Task task, int tasksSize) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"     \" + task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"\\n   Now you have \" + tasksSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * When user \u003ccode\u003echange status\u003c/code\u003e a task to done, display a \u003ccode\u003emessage\u003c/code\u003e to user UI."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task the task changed status"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void doneTask(Task task) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   This task\u0027s status has been updated:\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"     \" + task);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * When user \u003ccode\u003eupdates\u003c/code\u003e a task information, display a \u003ccode\u003emessage\u003c/code\u003e of the task has been updated."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task the task has been updated"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void updateTask(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   This task\u0027s information has been updated:\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"     \" + task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * When user \u003ccode\u003ecopies\u003c/code\u003e a task information, display a \u003ccode\u003emessage\u003c/code\u003e of the task has been copied and added."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param task      the task which is copied and added"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     * @param tasksSize the size of the task list after copy"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    public void copyTask(Task task, int tasksSize) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        System.out.println(\"   This task has been copied:\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"     \" + task"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "                + \"\\n   Now you have \" + tasksSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 216
    }
  },
  {
    "path": "src/test/dukecommand/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukefile.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukelist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import dukeui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    private boolean exit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    CommandTest() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String[] command \u003d {\"todo\", \"testTodo\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Command test \u003d new Command(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(false,test.isExit());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String[] command \u003d {\"todo\", \"testTodo\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Command test \u003d new Command(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] testTodo\",tasks.getTask(0).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void checkCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        String[] command \u003d {\"tobe\", \"testTodo\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Command test \u003d new Command(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            test.check(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "            assertEquals(\"   Invalid command, issue \u0027help\u0027 for valid commands.\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 48
    }
  },
  {
    "path": "src/test/dukelist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package dukelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import duketask.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(1,test.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void getTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] testTodo\",test.getTask(0).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void addTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] testTodo\",test.getTask(0).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.deleteTask(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(0,test.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.getTask(0).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"\\u2713\",test.getTask(0).getStatusIcon());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void unDoneTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.getTask(0).markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.getTask(0).markNotDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"\\u2718\",test.getTask(0).getStatusIcon());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void findTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Event(\"testEvent /at 10/10/1990 1500\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"2.[E][✘] testEvent (at: 10 Oct 1990, 03:00PM)\",test.findTask(\"en\").get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void updateTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.updateTask(\"1 /reset newTodo /takes 5h\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] newTodo (takes: 5h)\",test.getTask(0).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void copyTask() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        TaskList test \u003d new TaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.addTask(new Todo(\"testTodo\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.copyTask(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] testTodo\",test.getTask(1).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 82
    }
  },
  {
    "path": "src/test/duketask/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void setSchedule() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Deadline test \u003d new Deadline(\"testDeadline /by 10/10/1990 1500\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"10/10/1990 1500\",test.getSchedule());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void reset() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Deadline test \u003d new Deadline(\"testDeadline /by 10/10/1990 1500\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.reset(\"newDeadline /by 11/11/2011 1100\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[D][\\u2718] newDeadline (by: 11 Nov 2011, 11:00AM)\",test.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void copy() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Deadline test \u003d new Deadline(\"testDeadline /by 10/10/1990 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"testDeadline /by 10/10/1990 1500\",test.copy());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Deadline test \u003d new Deadline(\"testDeadline /by 10/10/1990 1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[D][\\u2718] testDeadline (by: 10 Oct 1990, 03:00PM)\",test.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 33
    }
  },
  {
    "path": "src/test/duketask/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void setSchedule() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Event test \u003d new Event(\"testEvent /at 10/10/1990 1500\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"10/10/1990 1500\",test.getSchedule());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void reset() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Event test \u003d new Event(\"testEvent /at 10/10/1990 1500\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        test.reset(\"newEvent /at 11/11/2011 1100\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[E][\\u2718] newEvent (at: 11 Nov 2011, 11:00AM)\",test.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void copy() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Event test \u003d new Event(\"testEvent /at 10/10/1990 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"testEvent /at 10/10/1990 1500\",test.copy());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Event test \u003d new Event(\"testEvent /at 10/10/1990 1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[E][\\u2718] testEvent (at: 10 Oct 1990, 03:00PM)\",test.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 33
    }
  },
  {
    "path": "src/test/duketask/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"\\u2713\",testTask.getStatusIcon());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void markNotDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTask.markNotDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"\\u2718\",testTask.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"\\u2713\",testTask.getStatusIcon());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"testTask\",testTask.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTask.setDescription(\"newTest\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"newTest\",testTask.getDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void find() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(true,testTask.find(\"te\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Task testTask \u003d new Task(\"testTask\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[\\u2718] testTask\",testTask.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 56
    }
  },
  {
    "path": "src/test/duketask/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "package duketask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void copy() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo test \u003d new Todo(\"test /takes 5 days\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"test /takes 5 days\",test.copy());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void getSchedule() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo testTodo \u003d new Todo(\"test /takes 5 days\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"5 days\",testTodo.getSchedule());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void setSchedule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo testTodo \u003d new Todo(\"test /takes 5 days\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTodo.setSchedule(\"10h\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"10h\",testTodo.getSchedule());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void reset() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo testTodo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        testTodo.reset(\"reset /takes 5m\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] reset (takes: 5m)\",testTodo.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void testCopy() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo testTodo \u003d new Todo(\"test /takes 5 days\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"test /takes 5 days\",testTodo.copy());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mtahgg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        Todo testTodo \u003d new Todo(\"test /takes 5 days\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "        assertEquals(\"[T][\\u2718] test (takes: 5 days)\",testTodo.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mtahgg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mtahgg": 46
    }
  }
]
