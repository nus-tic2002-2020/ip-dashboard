[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "# Ah Duke project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "This is a project folk from Duke project Template. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "You need Java 11 installed to run _Ah Duke_, the latest JAR can be located at:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "https://github.com/lamyongxian/duke/releases/latest"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "To run as command line application:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "\u003e java -jar YongXian.jar -c"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    Hello from"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "      ___    *   *    ____        *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    |  _  | | | | |  |  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    | |_| | | |_| |  | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    |  _  | |  _  |  | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    | | | | | | | |  |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Oei! I\u0027m Ah Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        What can I do for you leh?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "To run as GUI application, simply double-click the JAR file or execute:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "\u003e java -jar YongXian.jar"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "![Screenshot](screenshot.png)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "   1. In the project directory, and pick `build.gradle`. Let gradle sync complete."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "   1. If asked, choose Open as Project (not Open as File)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "   1. After importing is complete, you will see the Gradle Toolbar in the IDEA interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "1. To run project in Intellij, "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    1. For GUI mode, locate the `src/main/java/duke/io/Launcher.java` file, right-click it, and choose `Run Launcher (GUI)`. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    Alternatively, locate and run `Launcher (GUI)` in the top Navigation Bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    1. For Command Line mode, locate and run `Launcher (Command Line)` in the top Navigation Bar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 42,
      "-": 13
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    mainClassName \u003d \"duke.io.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                \u0027Main-Class\u0027: \u0027duke.io.Launcher\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        )"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 24,
      "-": 45
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "include \u0027config\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 2
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to add new {@link Task}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public AddCommand(Task task, String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.ADD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute AddCommand with {@link Task}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if error writing to disk"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert storage !\u003d null : \"Command storage cannot be null\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert task !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        taskManager.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //System.out.printf(\"      %s\\n\", t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"  \" + task.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(task.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Convert to savable list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Savable s \u003d (Savable) task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Write all to disk"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            storage.appendln(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(ex.getMessage(), DukeException.DukeError.WRITE_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 91
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Abstract Command class to derive custom user commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected String[] args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected List\u003cString\u003e outputs \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Command(String[] args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Abstract Getter for Command Type enum"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType enum"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see CommandType"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public abstract CommandType getType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Abstract Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Abstract Execute Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException to handle any Duke related exceptions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public abstract boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for string outputs from executed command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return List of String outputs for printing to {@link Ui}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cString\u003e getOutputs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return outputs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Parse raw command string into {@link Command}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param input raw command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if missing argument in command text or unknown command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String[] args \u003d input.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (args.length \u003e 0 \u0026\u0026 !args[0].isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String commandText \u003d args[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            switch (commandText) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //printTasks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //doneTasks(args);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new DoneCommand(args);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //deleteTasks(args);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new DeleteCommand(args);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                text \u003d readInputParameter(args, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (text.isBlank()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty.\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                            DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //addTask(new Todo(text));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new AddCommand(new Todo(text), args);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                text \u003d readInputParameter(args, \"/by\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (text.isBlank()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty.\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                            DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                String by \u003d readSlashParameter(args, \"/by\", true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (by.isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    throw new DukeException(\"The argument for /by cannot be empty.\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                            DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //addTask(new Deadline(text, by));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new AddCommand(new Deadline(text, by), args);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                text \u003d readInputParameter(args, \"/at\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (text.isBlank()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty.\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                            DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                String at \u003d readSlashParameter(args, \"/at\", true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (at.isBlank()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    throw new DukeException(\"The argument for /by cannot be empty.\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                            DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                String end \u003d readSlashParameter(args, \"/end\", false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //addTask(new Event(text, at));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                Event event \u003d new Event(text);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                event.setDuration(at, end);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new AddCommand(event, args);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new FindCommand(args);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"schedule\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new ScheduleCommand(args);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                //bye();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                throw new DukeException(\"Sorli, but I dunno what that means :-(\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                        DukeException.DukeError.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private static String readInputParameter(String[] args, String until) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String value \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int index \u003d args.length;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (until !\u003d null \u0026\u0026 !until.isBlank()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            int new_index \u003d indexOf(args, until);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            index \u003d new_index \u003e\u003d 0 ? new_index : index; // If new_index is negative, revert to use args length"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for(int i \u003d 1; i \u003c args.length \u0026\u0026 i \u003c index; i++) { // add strings between command to"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (args[i].strip().startsWith(\"/\")) { // Exit once hit next slash character"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            value +\u003d  args[i] + \" \";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private static String readSlashParameter(String[] args, String param, boolean isRequired) throws DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String value \u003d \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int index \u003d indexOf(args, param);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (isRequired) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                throw new DukeException(String.format(\"Cannot find required %s in args. (index \u003d %d)!\", param, index),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                        DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            return null; // Early exit if missing but not required"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for(int i \u003d index+1; i \u003c args.length; i++) { // add strings between slash to end of args"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (args[i].strip().startsWith(\"/\")) { // Exit once hit next slash character"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            value +\u003d  args[i] + \" \";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private static int indexOf(Object[] arr, Object o) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (arr !\u003d null)  {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            for(int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if(arr[i].equals(o)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    index \u003d i;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 204
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command type enum."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Each enum value may have multiple matching command text."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    ADD(new String[] {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            \"todo\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            \"deadline\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            \"event\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    LIST(new String[] {\"list\"}),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    DONE(new String[] {\"done\"}),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    DELETE(new String[] {\"delete\"}),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    EXIT(new String[] {\"bye\"}),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    FIND(new String[] {\"find\"});"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private String[] commands;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor to associate multiple string values to each CommandType"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param commands string values in a string array matching each CommandType"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    CommandType(String[] commands) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.commands \u003d commands;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for CommandType matching given command string value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param command string value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType enum"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static CommandType valueofCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (CommandType t: values()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            for (String c: t.commands) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (c.equals(command)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to delete {@link Task} from {@link TaskManager}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DeleteCommand(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.DELETE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute DeleteCommand with using args task number in {@link TaskManager}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if error writing to disk"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert storage !\u003d null : \"Command storage cannot be null\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e removedTasks \u003d taskManager.delete(super.args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Convert to savable list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cSavable\u003e savables \u003d new ArrayList\u003cSavable\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            savables.add((Savable) t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Write all to disk"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            storage.writeAll(savables);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(ex.getMessage(), DukeException.DukeError.WRITE_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"Song la! Lim peh help you remove this task(s):\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(\"Song la! Lim peh help you remove this task(s):\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: removedTasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.echo(String.format(\"   %s\", t));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputs.add(String.format(\"   %s\", t));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 92
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to mark {@link Task} as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new DoneCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DoneCommand(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.DONE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute DoneCommand with args using task number in {@link TaskManager}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if error writing to disk"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert storage !\u003d null : \"Command storage cannot be null\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e doneTasks \u003d taskManager.done(super.args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cSavable\u003e savables \u003d new ArrayList\u003cSavable\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            savables.add((Savable) t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"Power la! I\u0027ve marked this task(s) as done:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(\"Power la! I\u0027ve marked this task(s) as done:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: doneTasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.echo(\"   \" + t.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputs.add(t.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            storage.writeAll(savables);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(ex.getMessage(), DukeException.DukeError.WRITE_ERROR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 84
    }
  },
  {
    "path": "src/main/java/duke/command/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.DialogBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Duke application main logic."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Supports javafx GUI using {@link Application} class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaAhDuke.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/tasks.ssv\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private static final String DATA_SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected Storage storageTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected TaskManager taskManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor using FILE_PATH constant."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(FILE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor using custom file path for tasks data."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param filePath for tasks data saved on disk"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        storageTasks \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            List\u003cString\u003e entries \u003d storageTasks.load();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            taskManager.setTasksFromRaw(entries, DATA_SEPARATOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.loadError();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Run Duke routing for command line."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        boolean exit \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        boolean printEndLine \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        while(!exit) { // If no error, continue"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (fullCommand \u003d\u003d null || fullCommand.isBlank()) { // Do not parse command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    printEndLine \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                ui.echoLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                Command command \u003d Command.parse(fullCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                command.execute(taskManager, ui, storageTasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                exit \u003d command.isExit();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                e.printError();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (printEndLine) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    ui.echoLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    printEndLine \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Main method entry point for duke application command line"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args from Java options"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Duke duke \u003d new Duke(FILE_PATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * GUI start. Initialise all GUI components and handle user inputs."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see Application"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        primaryStage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        primaryStage.show(); // Render the stage."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.setTitle(\"Ah Duke\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Show welcome message"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label dukeWelcome \u003d getDialogLabel(ui.welcome() + \"\\n\" + ui.greet());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                DialogBox.getDukeDialog(dukeWelcome, new ImageView(duke))"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Iteration 3"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Process user input from GUI"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param input from user as raw command string"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return command output string"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cString\u003e outputList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            Command command \u003d Command.parse(input);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            command.execute(taskManager, ui, storageTasks);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputList \u003d command.getOutputs();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            return e.printError();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (String s: outputList) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            builder.append(s + \"\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 274,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Duke exception handling"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * DukeException error enum"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public enum DukeError {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        NONE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        MISSING_ARGUMENT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ANOMALY_ARGUMENT,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        MEMORY_FULL,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        TASK_NOT_FOUND,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        WRONG_DATA_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        WRITE_ERROR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private DukeError code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for new Duke exceptions. {@link Throwable} is default to null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param message of error"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param code of error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DukeException(String message, DukeError code) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(message, null, code);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for new Duke exceptions. {@link Throwable} is default to null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param message of error as String"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param cause of error as {@link Throwable}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param code of error as {@link DukeError} enum"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DukeException(String message, Throwable cause, DukeError code) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Print and get error from superclass {@link Exception}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String printError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        System.out.printf(\"     ☹ OOPS!!! %s\\n\", super.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        //System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return String.format(\"☹ OOPS!!! %s\", super.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter of error code as {@link DukeError} enum"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return DukeError enum"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DukeError getErrorCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to exit {@link Duke}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class ExitCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.EXIT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute ExitCommand to exit application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(ui.bye());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 51
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to find {@link Task} using keyword and display to user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public FindCommand(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.FIND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute FindCommand for matching {@link Task} using args keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if find command missing keyword argument"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert storage !\u003d null : \"Command storage cannot be null\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (super.args \u003d\u003d null || super.args.length \u003c 2) { // at least 1 command argument, else error"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Must provide keyword for find command leh!\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String keyword \u003d String.valueOf(super.args[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskManager.findTasks(keyword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"OK, this is what I found:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(\"OK, this is what I found:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.echo(String.format(\"%d.%s\", ++i, t.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputs.add(String.format(\"%d.%s\", ++i, t.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 78
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to list {@link Task} in {@link TaskManager}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.LIST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute ListCommand on {@link TaskManager}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command taskManager cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cString\u003e tasks \u003d taskManager.getPrintableTasks();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (String t: tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.echo(\" \" + t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputs.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javax.swing.text.DateFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command to display {@link Task} according to {@link LocalDate} provided"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for instantiating new ScheduleCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args of raw user command for further processing in downstream classes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public ScheduleCommand(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Command Type enum"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return CommandType"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @see  CommandType"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return CommandType.FIND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for exit behavior to be used by calling application"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return exit status, always false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Execute ScheduleCommand to display {@link Task} inside {@link TaskManager} with string date from args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Date string is converted into {@link LocalDate} internally."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param taskManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if date format is wrong"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public boolean execute(TaskManager taskManager, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert ui !\u003d null : \"Command ui cannot be null\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert outputs !\u003d null : \"Command outputs cannot be null\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert storage !\u003d null : \"Command storage cannot be null\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert taskManager !\u003d null : \"Command task cannot be null\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (super.args \u003d\u003d null || super.args.length \u003c 2) { // at least 1 command argument, else error"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Eh, where your date ah?\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.MISSING_ARGUMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String keyword \u003d String.valueOf(super.args[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        LocalDate localDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            localDate \u003d LocalDate.parse(keyword, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Your date format wrong la!\", DukeException.DukeError.ANOMALY_ARGUMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Find tasks by LocalDate, only dated tasks included"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        List\u003cDatedTask\u003e tasks \u003d taskManager.findTasks(localDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Sort dated tasks by date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Collections.sort(tasks, new Comparator\u003cDatedTask\u003e() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            public int compare(DatedTask o1, DatedTask o2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                LocalDateTime d1 \u003d o1.getComparableDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                LocalDateTime d2 \u003d o2.getComparableDateTime();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                return d1.compareTo(d2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String output \u003d String.format(\"Your schedule for %s:\", localDate.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ui.echo(output);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        outputs.add(output);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (DatedTask t: tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            ui.echo(String.format(\"%d.%s\", ++i, t.toString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            outputs.add(String.format(\"%d.%s\", ++i, t.toString()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 106
    }
  },
  {
    "path": "src/main/java/duke/io/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * GUI dialog box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for creating new DialogBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param l text label for dialog message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param iv user image for dialog"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Creating new DialogBox message for user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param l text label for dialog message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param iv user image for dialog"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Creating new DialogBox message for duke bot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param l text label for dialog message"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param iv bot image for dialog"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 67
    }
  },
  {
    "path": "src/main/java/duke/io/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command Line mode usage: -c"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Main entry point for Duke application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args from Java options"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (args.length \u003e 0 \u0026\u0026 args[0].equalsIgnoreCase(\"-c\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            // Launch Command Line mode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            Duke.main(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            // Launch GUI mode"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 25
    }
  },
  {
    "path": "src/main/java/duke/io/Savable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Object savable to disk by {@link Storage} must implement these interface."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public interface Savable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement setter for separator."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default is \"|\" character."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param separator character(s) for splitting disk data into fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void setSeparator(String separator);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement getter for separator."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return separator character(s) for splitting disk data into object fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    String getSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement method to covert raw disk data to user friendly string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return printable string for data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement method to convert object attributes to raw separated fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * for saving to disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return raw data format for disk storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    String toSavableString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement parser to covert raw disk data to object attribute fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param savableString as raw data format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException throw any Duke related error"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void fromSavableString(String savableString) throws DukeException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 42
    }
  },
  {
    "path": "src/main/java/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Storage class for writing and reading disk text data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getting for file path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return file path as string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with file path"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param filePath of text data in disk"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Load all lines from file, create file if do not yet exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return all lines in file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws IOException if error reading or writing to file path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cString\u003e load() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return readAll(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Read all lines from file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param createIfNotExist automatically create file, do not create if false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return all lines in file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws IOException if error reading or writing to file path"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cString\u003e readAll(boolean createIfNotExist) throws IOException{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cString\u003e arrFile \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        File parent \u003d f.getParentFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (createIfNotExist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if(!parent.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                parent.mkdirs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            arrFile.add(entry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return arrFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Write list of {@link Savable} objects to file path, existing file will be overwritten."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param savableList list of savable objects"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws IOException if error reading or writing to file path"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void writeAll(List\u003cSavable\u003e savableList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Savable s: savableList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (i \u003e 0) { // subsequent lines"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                appendln(s);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            } else { // create first entry"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                writeln(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void writeln(Savable s) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.write(s, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void write(Savable s, boolean newLine) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String str \u003d s.toSavableString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.write(str, true, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void appendln(Savable s) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.append(s, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void append(Savable s, boolean newLine) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String str \u003d s.toSavableString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.write(str, true, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void write(String text, boolean newLine, boolean append) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, append);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (newLine) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void create() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.write(\"\", false, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 120
    }
  },
  {
    "path": "src/main/java/duke/io/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Command line UI class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Read raw user command from input stream"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return raw user command as string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (in.hasNextLine()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            return input.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display and return welcome message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return welcome string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String logo \u003d \"  ___    *   *    ____        *\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                + \"|  _  | | | | |  |  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                + \"| |_| | | |_| |  | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                + \"|  _  | |  _  |  | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                + \"| | | | | | | |  |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"Hello from\\n\" + logo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display and return greeting message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return greeting string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echo(\"Oei! I\u0027m Ah Duke\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echo(\"What can I do for you leh?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"Oei! I\u0027m Ah Duke\\nWhat can I do for you leh?\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display and return goodbye message"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return goodbye message"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echo(\"    Bye bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"Bye bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display and return load error message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return load error message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String loadError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echo(\"    Cannot load leh!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"Cannot load leh!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display and return task list full error message"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return task list full error message"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String errorTaskFull() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echo(\"    Peiseh, my task list is full!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        echoLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"Peiseh, my task list is full!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to print and return horizontal line"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void echoLine() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to display list of messages in command line"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param messages as list of messages to display"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void echoAll(List\u003cString\u003e messages) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (String m: messages) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            echo(m);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Helper method to print message in command line"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param message to display"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void echo(String message) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        System.out.printf(\"    %s\\n\", message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 112
    }
  },
  {
    "path": "src/main/java/duke/task/DatedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Task must implement these interface to make {@link LocalDateTime} comparable by {@link Comparable}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public interface DatedTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Implement getter to let {@link Comparable} know which {@link LocalDateTime} attribute"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * to use for date and time comparison."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return local date time attribute to compare"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    LocalDateTime getComparableDateTime();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Deadline Task format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Implements {@link DatedTask} to be used with {@link duke.command.ScheduleCommand}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Deadline extends Task implements DatedTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor with no task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with task description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.by \u003d LocalDateTime.now().plus(1, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.type \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with task description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param by in string format (e.g. yyyy-MM-dd HH:mm or yyyy-MM-dd hh:mm a)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.setBy(by);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.type \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for /by date time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return by date time as LocalDateTime"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for /by date time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param by date time as LocalDateTime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for /by date time in string format. Automatically parsed to LocalDateTime."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param by in string format (e.g. yyyy-MM-dd HH:mm or yyyy-MM-dd hh:mm a)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setBy(String by) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (by.trim().toUpperCase().endsWith(\"PM\") || by.trim().toUpperCase().endsWith(\"AM\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.by \u003d LocalDateTime.parse(by, formatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.by \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get display friendly string for {@link Savable} deadline."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return display friendly string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert to savable string for {@link Savable} deadline."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return savable string for disk storage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toSavableString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return String.format(\"%s|%s\", super.toSavableString(), by.toEpochSecond(ZoneOffset.UTC));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert from raw task data format into Deadline object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param savableString as raw data format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if raw format is wrong"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void fromSavableString(String savableString) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super.fromSavableString(savableString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String[] arrString \u003d savableString.split(\"\\\\\" + separator);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (arrString.length \u003c 4) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Rabak Sial, wrong data format for Deadline!\", DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            long epoch \u003d Long.parseLong(arrString[3].trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.by \u003d LocalDateTime.ofEpochSecond(epoch, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (NumberFormatException | DateTimeException ex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Rabak Sial, wrong data format for Deadline! \" + ex.getMessage(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter to work with {@link Comparable} using /by date time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return by as LocalDateTime"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public LocalDateTime getComparableDateTime() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 138
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Event Task format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Implements {@link DatedTask} to be used with {@link duke.command.ScheduleCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Event extends Task implements DatedTask {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor with no task description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with task description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.at  \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.end \u003d LocalDateTime.ofEpochSecond(0, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.type \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for /at date time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return at date time as LocalDateTime"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for /end date time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return end date time as LocalDateTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for /at date time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param at date time as LocalDateTime"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setAt(LocalDateTime at) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for /end date time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param end date time as LocalDateTime"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Set /at and /end date time in string formats."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Automatically parsed string (e.g. yyyy-MM-dd HH:mm or yyyy-MM-dd hh:mm a) to LocalDateTime."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param at in string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param end in string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if /end happens before /at"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setDuration(String at, String end) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Process start date time"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        DateTimeFormatter formatterAt;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (at.trim().endsWith(\"PM\") || at.trim().endsWith(\"AM\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatterAt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatterAt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.at \u003d LocalDateTime.parse(at, formatterAt);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.at \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Process end date time"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (end \u003d\u003d null || end.isBlank()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.end \u003d LocalDateTime.ofEpochSecond(0, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        DateTimeFormatter formatterEnd;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (end.trim().endsWith(\"PM\") || end.trim().endsWith(\"AM\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatterEnd \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            formatterEnd \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.end \u003d LocalDateTime.parse(end, formatterEnd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.end \u003d LocalDateTime.ofEpochSecond(0, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Check if start time is after end time"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (this.at.isAfter(this.end)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Event cannot end before it starts leh!\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.ANOMALY_ARGUMENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get display friendly string for {@link Savable} event."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return display friendly string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        builder.append(\"[E]\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        builder.append(super.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        builder.append(\" (at: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        builder.append(at.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Handle null and 0 date-time"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (this.end !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            long epochEnd \u003d this.end.toEpochSecond(ZoneOffset.UTC);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (epochEnd \u003e 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                builder.append(\", end: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                builder.append(end.format(DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mm a\")));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        builder.append(\")\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert to savable string for {@link Savable} event."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return savable string for disk storage"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toSavableString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return String.format(\"%s|%s|%s\", super.toSavableString(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                at.toEpochSecond(ZoneOffset.UTC), end.toEpochSecond(ZoneOffset.UTC));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert from raw task data format into Event object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param savableString as raw data format"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if raw format is wrong"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void fromSavableString(String savableString) throws DukeException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super.fromSavableString(savableString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String[] arrString \u003d savableString.split(\"\\\\\" + separator);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (arrString.length \u003c 5) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Rabak Sial, wrong data format for Event!\", DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            long epochAt \u003d Long.parseLong(arrString[3].trim());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.at \u003d LocalDateTime.ofEpochSecond(epochAt, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            long epochEnd \u003d Long.parseLong(arrString[4].trim());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.end \u003d LocalDateTime.ofEpochSecond(epochEnd, 0, ZoneOffset.UTC);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (NumberFormatException | DateTimeException ex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(\"Rabak Sial, wrong data format for Event! \" + ex.getMessage(),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter to work with {@link Comparable} using /at date time."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return at as LocalDateTime"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public LocalDateTime getComparableDateTime() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 202
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Task class used by Duke application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Implements {@link Savable} to be used with {@link duke.io.Storage}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Task implements Savable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected TaskType type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    protected String separator \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor with no task description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with task description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.type \u003d TaskType.DEFAULT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for TaskType enum"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return TaskType enum"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for task description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return task description"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for Status icon in UTF8"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return status icon string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Mark task as done"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Set separator for {@link Savable} task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param separator character(s) for splitting disk data into fields"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setSeparator(String separator) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.separator \u003d separator;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get separator for {@link Savable} task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return separator"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getSeparator() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return this.separator;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get display friendly string for {@link Savable} task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return display friendly string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert to savable string for {@link Savable} task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return savable string for disk storage"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toSavableString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return String.format(\"%s|%d|%s\", this.type.getCode(), isDone ? 1 : 0, this.description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Convert from raw task data format into Task object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param savableString as raw data format"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if raw format is wrong"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void fromSavableString(String savableString) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        String[] arrString \u003d savableString.split(\"\\\\\" + separator);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (arrString.length \u003c 3) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(String.format(\"Rabak Sial, wrong data format! Length is %d.\", arrString.length),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            int done \u003d Integer.parseInt(arrString[1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.isDone \u003d (done \u003e 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(String.format(\"Rabak Sial, wrong data format! %s\", ex.getMessage()),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.WRONG_DATA_FORMAT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.description \u003d arrString[2].strip();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 126
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * TaskManager for managing all tasks for Duke"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor to initialise task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for task list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param tasks as list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Setter for task list from list of raw char separated task data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param rawList of char separated task data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param separator character"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if raw data format is wrong"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void setTasksFromRaw(List\u003cString\u003e rawList, String separator) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert rawList !\u003d null: \"List of raw tasks cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assert separator !\u003d null: \"Separator for splitting raw tasks cannot be null\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (String raw: rawList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String[] arrSplit \u003d raw.split(separator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (arrSplit.length \u003c 3) { // Task must have minimum 3 fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String code \u003d arrSplit[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            TaskType type \u003d TaskType.valueOfCode(code);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            String description \u003d arrSplit[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            Task newTask \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask \u003d new Deadline();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask.fromSavableString(raw);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask \u003d new Event();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask.fromSavableString(raw);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask \u003d new Todo();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask.fromSavableString(raw);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case DEFAULT:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask \u003d new Task();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                newTask.fromSavableString(raw);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            this.add(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Delete method for tasks by task number, supports mass delete operation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args from delete command containing task numbers"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return deleted tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @throws DukeException if task(s) not found"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cTask\u003e delete(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cTask\u003e tasksToRemove \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cInteger\u003e errorIndices \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Create a collection of index to delete"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) { // Skip first: \"delete\" command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                int intTask \u003d Integer.parseInt(args[i]) - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (tasks.size() \u003e intTask) { // Has task at list index"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    Task t \u003d tasks.get(intTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    tasksToRemove.add(t);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    errorIndices.add(intTask); // add index to error collection"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                // Do nothing, skip number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        // Delete all tasks in collection"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        tasks.removeAll(tasksToRemove);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        if (errorIndices.size() \u003e 0) { // raise exception for wrong index"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            throw new DukeException(String.format(\"Err... cannot find these task(s) leh - %s\", errorIndices.toString()),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    DukeException.DukeError.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return tasksToRemove;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Done method for tasks by task number, supports mass done operation"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param args from done command containing task numbers"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return tasks marked as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cTask\u003e done(String[] args) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cTask\u003e listDoneTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) { // Skip first: command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                int intTask \u003d Integer.parseInt(args[i])-1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                if (tasks.size() \u003e intTask) { // Has task at list index"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    Task t \u003d tasks.get(intTask);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                    listDoneTasks.add(t);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                // Do nothing, skip number"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return listDoneTasks;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Adds a task to task list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param task to be added"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Find tasks by matching keyword string. Case insensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param keyword string"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return list of tasks found"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: this.tasks) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (t.getDescription().toUpperCase().contains(keyword.toUpperCase())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                foundTasks.add(t);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Find tasks by {@link LocalDate}. Tasks must implement {@link LocalDate} interface."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return list of Task as {@link LocalDate}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cDatedTask\u003e findTasks(LocalDate date) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cDatedTask\u003e foundTasks \u003d new ArrayList\u003cDatedTask\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (Task t: this.tasks) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            LocalDate taskDate;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            switch (t.getType()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                Deadline deadline \u003d (Deadline) t;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                taskDate \u003d deadline.getBy().toLocalDate();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                Event event \u003d (Event) t;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                taskDate \u003d event.getAt().toLocalDate();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (date.isEqual(taskDate)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                foundTasks.add((DatedTask) t);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get list of tasks as string for display"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return list of tasks as friendly string"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public List\u003cString\u003e getPrintableTasks() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        ArrayList\u003cString\u003e listString \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        int intCount \u003d tasks.size();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for(int i \u003d 0; i \u003c intCount; i++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            listString.add(String.format(\"%d.%s\", i + 1, t));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return listString;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 226
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Task type enum."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * Each enum has a matching command text and task code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    DEFAULT(\"task\", \"\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    EVENT(\"event\", \"E\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    DEADLINE(\"deadline\", \"D\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    TODO(\"todo\", \"T\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get TaskType enum by code"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param code usually as single character char e.g. E"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return TaskType enum, null if code not found"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public static TaskType valueOfCode(String code) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        for (TaskType t: values()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            if (t.code.equals(code.toUpperCase())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for each enum\u0027s command text"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return command text"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Getter for each enum\u0027s task code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor for each enum"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param command text of enum"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param code for task type"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    TaskType(String command, String code) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.io.Savable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " * To do Task format"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Default Constructor with no task description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Todo() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Constructor with to-do description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        this.type \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * Get display friendly string for to-do."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     * @return display friendly string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 34
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test task ~`!@#$%^\u0026*()1234567890\", \"2020-01-01 23:33\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[D][\\u2718] Test task ~`!@#$%^\u0026*()1234567890 (by: 1 Jan 2020 11:33 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[D][\\u2713] Test task ~`!@#$%^\u0026*()1234567890 (by: 1 Jan 2020 11:33 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void testFromSavableString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test task ~`!@#$%^\u0026*()1234567890\", \"2020-01-01 23:33\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Deadline deadline2 \u003d new Deadline();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            deadline2.fromSavableString(deadline.toSavableString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[D][\\u2718] Test task ~`!@#$%^\u0026*()1234567890 (by: 1 Jan 2020 11:33 PM)\", deadline2.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 31
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Event event \u003d new Event(\"Test task ~`!@#$%^\u0026*()1234567890\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            event.setDuration(\"2020-01-01 23:33\", \"2020-01-02 23:33\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[E][\\u2718] Test task ~`!@#$%^\u0026*()1234567890 (at: 1 Jan 2020 11:33 PM, end: 2 Jan 2020 11:33 PM)\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[E][\\u2713] Test task ~`!@#$%^\u0026*()1234567890 (at: 1 Jan 2020 11:33 PM, end: 2 Jan 2020 11:33 PM)\", event.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void testFromSavableString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Event event \u003d new Event(\"Test task ~`!@#$%^\u0026*()1234567890\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Event event2 \u003d new Event();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            event.setDuration(\"2020-01-01 23:33\", \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "            event2.fromSavableString(event.toSavableString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(\"[E][\\u2718] Test task ~`!@#$%^\u0026*()1234567890 (at: 1 Jan 2020 11:33 PM)\", event2.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 37
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    void testToString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        Todo todo \u003d new Todo(\"Test task ~`!@#$%^\u0026*()1234567890\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(todo.toString(), \"[T][\\u2718] Test task ~`!@#$%^\u0026*()1234567890\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "        assertEquals(todo.toString(), \"[T][\\u2713] Test task ~`!@#$%^\u0026*()1234567890\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "deadline return book /by 2020-06-06 18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "event project meeting /at 2020-08-06 02:00 PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "done 1 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "deadline return book /by 2020-12-08 23:59"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "event project meeting /at 2020-12-08 14:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "deadline do homework /by 2020-11-15 23:59"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "find book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "delete 1 2 3 4 5 6 7"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "event party /at 2020-12-01 06:00 PM"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "event tic2002 final exam /at 2020-12-01 13:00 /end 2020-12-01 15:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "schedule 2020-12-01"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "delete 1 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if exist ACTUAL.TXT del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\command\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lamyongxian"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin duke.command.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "lamyongxian": 2,
      "-": 19
    }
  }
]
