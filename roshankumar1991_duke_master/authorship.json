[
  {
    "path": "src/main/java/duke/command/DateTimeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class provides a list of different possible configurations of Date and Time formats that the user might input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e It allows for flexibility in the user-input and tries to catch as many patterns as possible without throwing an error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class DateTimeList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static List\u003cDateTimeFormatter\u003e knownPatterns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method adds the various kinds of Date and Time formats into the knownPatterns list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    private static void formatMatch() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/M/d H:m\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/M/d HHmm\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M/d/y H:m\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M/d/y HHmm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/M/y H:m\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/M/y HHmm\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-M-d H:m\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-M-d HHmm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M-d-y H:m\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M-d-y HHmm\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-M-y H:m\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-M-y HHmm\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y M d H:m\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y M d HHmm\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M d y H:m\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M d y HHmm\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d M y H:m\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d M y HHmm\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/MMM/d H:m\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/MMM/d HHmm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM/d/y H:m\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM/d/y HHmm\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/MMM/y H:m\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/MMM/y HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-MMM-d H:m\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-MMM-d HHmm\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM-d-y H:m\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM-d-y HHmm\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-MMM-y H:m\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-MMM-y HHmm\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y MMM d H:m\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y MMM d HHmm\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM d y H:m\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM d y HHmm\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d MMM y H:m\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d MMM y HHmm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        //------------------------------------------------------------//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/M/d\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/M/d\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M/d/y\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M/d/y\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/M/y\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/M/y\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-M-d\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-M-d\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M-d-y\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M-d-y\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-M-y\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-M-y\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y M d\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y M d\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M d y\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"M d y\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d M y\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d M y\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/MMM/d\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y/MMM/d\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM/d/y\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM/d/y\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/MMM/y\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d/MMM/y\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-MMM-d\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y-MMM-d\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM-d-y\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM-d-y\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-MMM-y\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d-MMM-y\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y MMM d\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"y MMM d\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM d y\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"MMM d y\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d MMM y\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        knownPatterns.add(DateTimeFormatter.ofPattern(\"d MMM y\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        formatMatch();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 110
    }
  },
  {
    "path": "src/main/java/duke/command/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003ch2\u003e Duke, your personalized task manager \u003c/h2\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003eThis task manager shall assist to add / remove various kinds of tasks that might include their estimated completion dates."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003eIt also allows you to view your current tasks at hand, check if they have been completed and check which tasks occur on any given date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * Its error-detection and user-input flexibility makes this task manager more functional and user-friendly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003eHope you enjoy using this task manager !"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * @author Roshan Kumar"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * @since 15/09/2020"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This is the main method which does 3 key things to get the program started."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     *\u003cbr\u003e  1. It initializes many different formats of possible Date Time configurations which allows flexibility in user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     *\u003cbr\u003e  3. It loads the UI class that starts the interaction with the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Error thrown when user input is not complete or in an unreadable format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @see DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        DateTimeList.main(); //Initialize DateTimeFormats"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Ui.main(); //Start interaction with User"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "roshankumar1991": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FilePath.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class allows the user to modify both the directory and filename for a flexible data source."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static String Directory \u003d \"./data/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static String Filename \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static String FileLocation \u003d Directory + Filename;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method takes in a user input and understands if it is a yes or no."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Return yes or no command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throw error if command is not recognized."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static boolean command() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean response;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (line.trim().toLowerCase().contains(\"yes\"))     { response \u003d true;}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (line.trim().toLowerCase().contains(\"no\")) { response \u003d false;}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            throw new DukeException(\"Error, please enter either \u0027Yes\u0027 or \u0027No\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method checks if there is any file within the directory and creates it if it isn\u0027t. If files already exist, it asks the user-input to choose which file to initialize."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws error if user-input doesn\u0027t contain any file names that match within that directory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws IOException Error if file cannot be found or created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void InputFile() throws DukeException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String[] input;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        File f \u003d new File(Directory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        input \u003d f.list();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean found \u003d false; // Whether user-input matches files existing inside Directory"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Directory exists but no files inside currently. Shall create a file called \u0027duke.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Path path \u003d Paths.get(Directory + Filename);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Please view the list of the files in the current directory\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            for (String l : input) { System.out.println(l);}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"\\nPlease type the name of the file including the file extension. E.g. duke.txt\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            for (String l : input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (l.equals(line)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    Filename \u003d line;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    System.out.println(\"Thank you for your response\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (!(found)) {throw new DukeException(\"Error, please entire a filename that exists within this directory\");}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method creates a directory if it previously doesn\u0027t exist yet."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Status of whether directory already exists or has been newly created."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws IOException Error if directory cannot be found or created."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static boolean InputDirectory() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean existing \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Please type the name of the directory. E.g. \u0027./data/\u0027\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        File f \u003d new File(line);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (!(f.isDirectory())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"No existing directory. Creating directory and file named \u0027duke.txt\u0027 inside it.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Files.createDirectories(Paths.get(line));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Path path \u003d Paths.get(line + Filename);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Files.createFile(path);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            existing \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Directory \u003d line;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return existing;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This main method initiates discussion with the user on the choice of directory and filename. It then selects that filepath and passes it into the main program for execution."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Error if the user enters incompatible data."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws IOException Error if file / directory cannot be found or created."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void main() throws DukeException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean response;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        //Create existing directory and file if it doesn\u0027t exist"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Files.createDirectories(Paths.get(Directory));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        new FileOutputStream(FileLocation, true).close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Let me load the existing data for you (if any)\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Please confirm if this current directory is correct.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(Directory + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"If it is, please confirm by typing \u0027Yes\u0027\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"If you want to select a different directory, please confirm by typing \u0027No\u0027\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        response \u003d command();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (response) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Please confirm if this current file is correct.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(Filename + \"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"If it is, please confirm by typing \u0027Yes\u0027\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"If you want to select a different file, please confirm by typing \u0027No\u0027\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            response \u003d command();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (response) { System.out.println(\"Thank you for your response\");}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else { InputFile();}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (InputDirectory()) { InputFile();}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        FileLocation \u003d Directory + Filename;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Storage.main();    //Load existing file data into initial TaskList"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 148
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class registers the user-inputs and makes sense of the command that the program is supposed to execute."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e It contains the following approved actions:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003col\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eList: Allows to list all the tasks inside TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eBye: Exits the Task Manager\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eFind: Find existing tasks from the TaskList through matching of the description\u003c/li\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eUndo: Undo the last action including erase from History\u003c/li\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eHistory: Prints out the history of actions taken\u003c/li\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDone: Marks a task as completed\u003c/li\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDelete: Deletes a task from the TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eTodo / Event / Deadline: Adds one of the following tasks into the TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eOccurrence: Lists which tasks fall on a specified date\u003c/li\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003c/ol\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * Once it understand what the user-input is referring to, it passes the appropriate command to the TaskList for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static String by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static LocalDate localDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static List\u003cDateTimeFormatter\u003e knownPatterns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method takes in a user-input as a String, makes sense of the command and returns a command to the TaskList for execution or"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * returns a relevant Date and Time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param input Provides the user-input field to be parsed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Error if user-input is in a incompatible format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static LocalDateTime parse(String input) throws DukeException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean change \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (input.trim().equalsIgnoreCase(\"bye\"))         { TaskList.Bye();}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.trim().equalsIgnoreCase(\"list\"))   { TaskList.List();}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"find\"))               { TaskList.Find(input.trim().substring(5));}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"done\"))               { TaskList.Done(input); change \u003d true;}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"delete\"))             { TaskList.Delete(input); change \u003d true;}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"todo\"))               { TaskList.Todo(input); change \u003d true;}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"undo\"))               { TaskList.Undo();}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (input.toLowerCase().contains(\"history\"))            { Undo.printQueue();}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if ((input.toLowerCase().contains(\"deadline\")) || (input.toLowerCase().contains(\"event\")) ||"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                (input.toLowerCase().contains(\"occurrence\")) || (input.contains(\"[D]\")) || (input.contains(\"[E]\"))) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            int n \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (input.contains(\"(\")) {n \u003d input.indexOf(\u0027(\u0027); }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else if (input.contains(\"/\")) {n \u003d input.indexOf(\u0027/\u0027); }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            by \u003d input.substring(n + 4).trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            knownPatterns \u003d DateTimeList.knownPatterns;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            for (DateTimeFormatter pattern : knownPatterns) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    localDate \u003d LocalDate.parse(by,pattern);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    if (localDate \u003d\u003d null) { localDateTime \u003d LocalDateTime.parse(by, pattern);}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                } catch (DateTimeParseException ignored) {}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                throw new DukeException(\"Either incorrect format of input or no known date format found: \" + by);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (input.toLowerCase().contains(\"deadline\"))           { TaskList.Deadline(input, localDateTime); change \u003d true;}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else if (input.toLowerCase().contains(\"event\"))         { TaskList.Event(input,localDateTime); change \u003d true;}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else if ((input.toLowerCase().contains(\"occurrence\")))  { TaskList.Occurrence(input, localDate); }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else return localDateTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else throw new DukeException(\"Error: Please enter a valid task description\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (input.toLowerCase().contains(\"undo\")) { Storage.writeToFile(false);} //Only Write to file but don\u0027t make change to History"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else if (change) { Storage.writeToFile(true);} //Write to file and add change to History"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 88
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class provides the ability to load existing task data into the \u0027TaskList\u0027 and save the latest modified \u0027TaskList\u0027 into a file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e It also provides some basic function to detect if the existing data is in an incompatible format and allows to throw an exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static int count \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static String FileLocation \u003d FilePath.FileLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method allows to read any existing file contents within the specified filepath and store its contents into \u0027TaskList\u0027."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param filePath The filepath for the file that the method is trying to read the data from."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws an error exception if the data is in an incompatible format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws IOException Signals that an I/O exception of some sort has occurred."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    private static void printFileContents(String filePath) throws DukeException , IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            String current \u003d s.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (current.contains(\"[T]\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                String description \u003d current.substring(7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                list.add(new Todo(description));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (current.contains(\"\\u2713\")) list.get(count).setStatus(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else if (current.contains(\"[D]\") || current.contains(\"[E]\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                int m \u003d current.indexOf(\"(\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                int n \u003d current.indexOf(\")\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                String description \u003d current.substring(7,m-1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                LocalDateTime localDateTime \u003d Parser.parse(current.substring(0,n));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                assert localDateTime !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (current.contains(\"[D]\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    list.add(new Deadline(description, localDateTime));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    list.add(new Event(description, localDateTime));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (current.contains(\"\\u2713\")) list.get(count).setStatus(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else { throw new DukeException(\"Error: Task in existing data is incompatible\\n\"); }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method allows to store the latest modified \u0027TaskList\u0027 contents into the specified filepath. If the file or directory isn\u0027t available, it creates it automatically."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws IOException Signals that an I/O exception of some sort has occurred."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void writeToFile(boolean status) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        list \u003d TaskList.UpdatedList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (status) Undo.addQueue(); //Add to history if change made to TaskList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        FileWriter fw \u003d new FileWriter(FileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            fw.write(l + System.lineSeparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This main method is to initialize the Storage class to begin the process of reading existing data and loading it into the \u0027TaskList\u0027."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void main() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            printFileContents(FileLocation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            new TaskList(list, count); //Initialize data with existing file"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Undo.addQueue(); //Initialize data for undo purpose"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 88
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class is to represent the user-interface of the program. It displays an introductory message and provides a list of possible commands that the user can input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e Once the input is registered, it refers the input to the Parser Class to parse and understand the command that the user wants."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void command() throws IOException, DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Parser.parse(line);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method starts the interaction with the user and asks to provide for a user-input so that it can scan the input and provide it to another class for execution purposes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Error that is thrown if user inputs an incompatible command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void main() throws DukeException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        FilePath.main(); //Confirm current directory / file or choose a different directory / file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (TaskList.UpdatedList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"No existing data is found\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            Parser.parse(\"list\"); //Load initial list onto screen"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"\\nWhat would you like to do ?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"List of valid entries include the following:\\n\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Bye\\n\"     +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"List\\n\"    +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Find\\n\"    +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Undo\\n\"    +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"History\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Done         \u0027X\u0027\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Delete       \u0027X\u0027\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Todo         \u0027Y\u0027\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Event        \u0027Y\u0027 /at \u0027Z\u0027\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Deadline     \u0027Y\u0027 /by \u0027Z\u0027\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Occurrence       /on \u0027Z\u0027\"   +  \"    //Specify which events / deadlines occur on a particular date\\n\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                \"Where \u0027X\u0027 refers to the task number, \u0027Y\u0027 refers to the task description and \u0027Z\u0027 refers to the date.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                command();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 58
    }
  },
  {
    "path": "src/main/java/duke/command/Undo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class allows for a user to undo the last action executed and restore it to a previous state. It allows for multiple undo and also erases it from the history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Undo {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static int action \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static ArrayList\u003cArrayList\u003cTask\u003e\u003e Queue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method adds an entire TaskList into one ArrayList slot to capture both the history changes and allow for undo to previous states."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void addQueue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Queue.add(new ArrayList\u003c\u003e(TaskList.UpdatedList()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        action++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method allows to print the entire history of TaskLists through the user commands that have been made. Also, if there is an undo made, the history gets deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void printQueue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (ArrayList\u003cTask\u003e tasks : Queue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                System.out.println(\"List at initialization:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (Queue.get(0).size() \u003d\u003d 0) { System.out.println(\"NULL\");}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    for (Task task : tasks) { System.out.println(task); }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                System.out.println(\"List after action \" + count + \":\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (Queue.get(count).size() \u003d\u003d 0 ) { System.out.println(\"NULL\");}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    for (Task task : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                        System.out.println(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method returns the previous TaskList that existed before the latest user action was executed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Previous TaskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Error displayed if trying to undo at base case"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static ArrayList\u003cTask\u003e undo() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (Queue.size() \u003d\u003d 1) { throw new DukeException(\"Error, undo not applicable as no user-input yet or at baseline initialized information\\n\");}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        Queue.remove(action - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        action--;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return Queue.get(action - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 66
    }
  },
  {
    "path": "src/main/java/duke/command/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * Provides a package that groups the relevant classes used for key execution of the Task Manager program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e This include the following:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003col\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDuke Class:    Platform for the main execution method.\u003c/li\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eStorage Class: Provides the ability to read and write data.\u003c/li\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eParser Class:  Provides the ability to read a user-input and make sense of it. \u003c/li\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eUi Class:      Provides the ability to interact with the user and capture the user-input.\u003c/li\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003c/ol\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.command;"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 12
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This program is a child of the Task program. It helps add an additional classification to the Task program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected String formattedDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd y HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method initialized an deadline task that takes in 2 parameters and creates the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param localDateTime Scheduled Date / Time of task completion"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public Deadline(String description, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.formattedDateTime \u003d localDateTime.format(formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method provides a String format return for the event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns a String in the unique format specified in the method."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedDateTime + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 37
    }
  },
  {
    "path": "src/main/java/duke/task/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class is to provide for a customized Error message that is usually thrown when an incompatible user-input is provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 11
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This program is a child of the Task program. It helps add an additional classification to the Task program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003eThis form of program includes a task that includes both a description and its associated completion date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected String formattedDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd y HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method initialized an event task that takes in 2 parameters and creates the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param localDateTime Scheduled Date / Time of task completion"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public Event(String description, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.formattedDateTime \u003d localDateTime.format(formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method provides a String format return for the event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns a String in the unique format specified in the method."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedDateTime + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This Task program defines the basic structure for a Task class. It contains the following key components:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *  1. Description"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *  2. isDone Status (Whether task is completed / not completed)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * It also contains the basic constructor, a getter and a setter method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is used to initialize the Task Class using a String description as a variable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param description Registers the description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is used to retrieve the status of a task (Completed / Not completed)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns either a tick or X symbol representing the task completion status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is used to set the status of a task (Completed / Not completed)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param isDone Set the status of a task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public void setStatus(boolean isDone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is used to return the String output of the Task is a specified manner."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns the String that includes the getStatus and description of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 50
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import duke.command.Undo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This class is used for evaluating the actions of the multiple user commands such as add / delete tasks etc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e It contains the following approved actions:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003col\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eList: Allows to list all the tasks inside TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eBye: Exits the Task Manager\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDone: Marks a task as completed\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDelete: Deletes a task from the TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eTodo / Event / Deadline: Adds one of the following tasks into the TaskList\u003c/li\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eOccurrence: Lists which tasks fall on a specified date\u003c/li\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003c/ol\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static int count;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    protected static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method initializes the TaskList ArrayList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param list Provides the list of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param count Provides how many tasks have been added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list, int count) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        TaskList.count \u003d count;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        TaskList.list \u003d list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is to retrieve the updated TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns the latest updated TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static ArrayList\u003cTask\u003e UpdatedList() { return list;}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method provides a list of all the tasks currently inside the TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws an error if the list is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void List() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (count \u003d\u003d 0) throw new DukeException(\"There are no items currently in the list\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int seq \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(seq + \". \" + l);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            seq++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method helps to exit from the Task Manager."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Bye() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This task helps to mark a task as completed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Provide details into which task is to be marked as completed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws various exceptions if the user-input is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Done(String line) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int m \u003d line.toLowerCase().indexOf(\"done\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String num \u003d line.substring(m + 4).trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (num.length() \u003c 1) throw new DukeException(\"Error: Please enter which task is done\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int n \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (n \u003e count) throw new DukeException(\"Error: Please enter a valid task number\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (list.get(n - 1).getStatusIcon().equals(\"\\u2713\"))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            throw new DukeException(\"Error: Task has already been completed\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            list.get(n - 1).setStatus(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(list.get(n - 1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This task helps to delete a task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Provide details into which task is to be deleted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws various exceptions if the user-input is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Delete(String line) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int m \u003d line.toLowerCase().indexOf(\"delete\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String num \u003d line.substring(m + 6).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (num.length() \u003c 1) throw new DukeException(\"Error: Please enter which task to be deleted\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int n \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (n \u003e count) throw new DukeException(\"Error: Please enter a valid task number\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(list.get(n - 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            list.remove(n - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            count--;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"Now you have \" + count + \" tasks in the list.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is to add a Todo task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Provides the description of the task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws various exceptions if the user-input is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Todo(String line) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (line.trim().length() \u003c 5) throw new DukeException(\"Error: Description of task cannot be empty.\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int m \u003d line.toLowerCase().indexOf(\"todo\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String description \u003d line.substring(m + 4).trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (l.description.equals(description))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                throw new DukeException(\"Error: Task has already been added previously\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        list.add(new Todo(description));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        UpdateStatus();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is to add a Deadline task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Provides the description of the task."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param localDateTime Provides the scheduled Date / Time of the completion of the task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws various exceptions if the user-input is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Deadline(String line, LocalDateTime localDateTime) throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (line.trim().length() \u003c 9) throw new DukeException(\"Error: Description of task cannot be empty.\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (!line.contains(\"/\")) throw new DukeException(\"Error: Please specify time.\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int m \u003d line.toLowerCase().indexOf(\"deadline\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int n \u003d line.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String description \u003d line.substring(m + 8, n).trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (l.description.equals(description))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                throw new DukeException(\"Error: Task has already been added previously\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        list.add(new Deadline(description, localDateTime));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        UpdateStatus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is to add an Event task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Provides the description of the task."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param localDateTime Provides the scheduled Date / Time of the completion of the task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws various exceptions if the user-input is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Event(String line, LocalDateTime localDateTime) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (line.trim().length() \u003c 6) throw new DukeException(\"Error: Description of task cannot be empty.\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (!line.contains(\"/\")) throw new DukeException(\"Error: Please specify time.\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int m \u003d line.toLowerCase().indexOf(\"event\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int n \u003d line.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        String description \u003d line.substring(m + 5, n).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (l.description.equals(description))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                throw new DukeException(\"Error: Task has already been added previously\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        list.add(new Event(description, localDateTime));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        UpdateStatus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method is to provide a list of all the tasks that have scheduled deadlines on a particular date."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param localDate Provides the input for the tasks that are supposed to be completed on that particular date."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Occurrence(String line, LocalDate localDate) throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (!line.contains(\"/\")) { throw new DukeException(\"Error: Please specify time.\\n\"); }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        boolean match \u003d false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Here are the tasks that fall within this date\\n\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (l.toString().contains(\"[D]\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                LocalDate target \u003d (((Deadline) l).localDateTime).toLocalDate();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (target.equals(localDate)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    System.out.println(l);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    match \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if (l.toString().contains(\"[E]\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                assert l instanceof Event;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                LocalDate target \u003d (((Event) l).localDateTime).toLocalDate();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                if (target.equals(localDate)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    System.out.println(l);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                    match \u003d true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (!match) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.print(\"Sorry no tasks fall on this day\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method helps to list which task has been added to the TaskList and provide the count for the total number of tasks inside."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void UpdateStatus() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(list.get(count));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        count++;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Now you have \" + count + \" tasks in the list.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method helps undo the most recent command and print the Tasks in the TaskList before the last command was given."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * \u003cbr\u003e It also erases the previous change which was added to the History function."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @throws DukeException Throws an error if the user tries to undo before entering any input or when reached at the initial loaded list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Undo() throws DukeException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        list \u003d Undo.undo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        count--;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        System.out.println(\"Undo completed.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(\"The list is now empty\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int seq \u003d 1;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            System.out.println(seq + \". \" + l);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            seq++;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method helps to take a find keyword and displays any tasks in the TaskList that contain that task description."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param line Contains the user-input for the tasks description that he wants to find."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public static void Find(String line) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        int seq \u003d 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            if(l.description.toLowerCase().contains(line.toLowerCase())) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                System.out.println(seq + \".\" + l);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "                seq++;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 247
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This program is a child of the Task program. It helps add an additional classification to the Task program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * This form of program includes a task that includes only a description but has no time set for its completion."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method provides a description for the Todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @param description Provides a description for the Todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * This method provides a String format return for the Todo task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     * @return Returns a String in the unique format specified in the method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 28
    }
  },
  {
    "path": "src/main/java/duke/task/package-info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * Provides a package that groups the relevant classes used for handling of Tasks in the TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003cbr\u003e This include the following:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003col\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eTask Class:                        Provides the template for a Task definition.\u003c/li\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eTodo / Event / Deadline Class:     Provides the ability to add the different kinds of tasks into the TaskList.\u003c/li\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eTaskList Class:                    Provides the ability execute a specific command given by the Parser Class.\u003c/li\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " *     \u003cli\u003eDukeException Class:               Provides the ability throw a customized error if the user-input contains an incompatible input.\u003c/li\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " * \u003c/ol\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "roshankumar1991"
        },
        "content": "package duke.task;"
      }
    ],
    "authorContributionMap": {
      "roshankumar1991": 12
    }
  }
]
