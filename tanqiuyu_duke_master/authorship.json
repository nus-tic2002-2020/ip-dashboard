[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.DukeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DukeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.PrefixException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * {@code Duke} is a note-keeper, task manager, budget assistant, and more...!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Duke implements DukeUI, DukeParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //DUKE VARIABLES------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static DukeStorage dukeStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static DukeList dukeNotes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static boolean isGUIMode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static boolean isLoadedFromFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static boolean isConfirmedExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static boolean isErrorReturn \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //RUN DUKE------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code Duke} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param path The path to the saved files in the hard drive."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Duke(String path) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dukeStorage \u003d new DukeStorage(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes \u003d new DukeList(dukeStorage.readFromFile());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isLoadedFromFile \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes \u003d new DukeList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isLoadedFromFile \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Duke} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Duke(){}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method run {@code Duke} when using the {@code Duke Console}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there is an error in reading and understanding inputs."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void run() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isGUIMode \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        //Get Date \u0026 Time on startup"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        //Run startup sequence"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOnStartup(now, isLoadedFromFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while(!isConfirmedExit) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String input \u003d DukeUI.receiveCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeCommand dukeCommand \u003d DukeParser.readCommand(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dukeCommand.execute(dukeNotes, dukeStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                isConfirmedExit \u003d dukeCommand.getConfirmExit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (NullPointerException | IndexOutOfBoundsException | IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I don\u0027t understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    The note(s) you mentioned cannot be found.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There could be errors or omissions in the data entry, format or delimiters.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.suggestFormat();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I don\u0027t understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    The attribute(s) you mentioned cannot be understood.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There could be errors or omissions in the data entry, format or delimiters.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.suggestFormat();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                e.printExplanation(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (DateException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                e.printExplanation();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (PrefixException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                e.printExplanation(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print the start up sequence when"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * running {@code Duke} when using the {@code Duke GUI Launcher}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The text to be presented on the {@code Duke GUI Launcher}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String startUp() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isGUIMode \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ByteArrayOutputStream outputGUI \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        final PrintStream psConsole \u003d System.out;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(new PrintStream(outputGUI));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        //Get Date \u0026 Time on startup"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        //Run startup sequence"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOnStartup(now, isLoadedFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(psConsole);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return outputGUI.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to run {@code Duke} when using the {@code Duke GUI Launcher}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The text to be presented on the {@code Duke GUI Launcher}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getResponse(String input) throws IOException, CommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isErrorReturn \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ByteArrayOutputStream outputGUI \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        final PrintStream psConsole \u003d System.out;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(new PrintStream(outputGUI));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeCommand dukeCommand \u003d DukeParser.readCommand(input);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeCommand.execute(dukeNotes, dukeStorage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isConfirmedExit \u003d dukeCommand.getConfirmExit();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    I don\u0027t understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The note(s) you mentioned cannot be found.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    There could be errors or omissions in the data entry, format or delimiters.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.suggestFormat();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (NumberFormatException | ParseException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    I don\u0027t understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The attribute(s) you mentioned cannot be understood.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    There could be errors or omissions in the data entry, format or delimiters.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.suggestFormat();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printExplanation(input);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (DateException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printExplanation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (PrefixException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            isErrorReturn \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printExplanation(input);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(psConsole);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return outputGUI.toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the confirmation status on whether an exit command is received."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if an exit command is received and confirmed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static boolean getIsConfirmedExit() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return isConfirmedExit;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the status on whether a message returned by {@code Duke} is an error message."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if message returned by {@code Duke} is an error message."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static boolean getIsErrorReturn() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return isErrorReturn;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to reset all static variables of in {@code Duke}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * in the event of a program reset or reading from a new file without restarting."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void resetStaticVariables() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Event.resetStaticVariables();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Task.resetStaticVariables();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Budget.resetStaticVariables();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //DUKE MAIN-----------------------------------------"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String path \u003d \"data/notes.txt\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        new Duke(path).run();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 238,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeDialogueBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeDialogueBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private DukeDialogueBox(String text, Image img) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogueBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.text.setText(text);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.displayPicture.setImage(img);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static DukeDialogueBox getDukeDialogue(String text, Image img) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        var dukeReply \u003d new DukeDialogueBox(text, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.getIsErrorReturn()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeReply.setLabelBorderColour(\"#c14953\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeReply.setLabelBorderColour(\"#e4b363\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return dukeReply;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static DukeDialogueBox getUserDialogue(String text, Image img) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        var userInput \u003d new DukeDialogueBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        userInput.setLabelBorderColour(\"#058ed9\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        userInput.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setLabelBorderColour(String colour)  {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String style \u003d this.text.getStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.text.setStyle(style + \" -fx-border-color: \" + colour + \";\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 66
    }
  },
  {
    "path": "src/main/java/duke/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke} using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    final String PATH \u003d \"data/notes.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final Duke DUKE \u003d new Duke(PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader.\u003cMainWindow\u003egetController().setDuke(DUKE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setTitle(\"Project Duke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code Main}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private VBox dialogueContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static final Image userImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DPUser.PNG\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static final Image dukeImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DPDuke.PNG\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() throws ParseException, CommandException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.scrollPane.vvalueProperty().bind(this.dialogueContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        handleDukeReply(Duke.startUp());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void handleUserInput() throws IOException, CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!this.userInput.getText().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String userText \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.dialogueContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeDialogueBox.getUserDialogue(userText, userImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            handleDukeReply(duke.getResponse(userText));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void handleDukeReply(String dukeText) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.dialogueContainer.getChildren().addAll("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeDialogueBox.getDukeDialogue(dukeText, dukeImage)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.getIsConfirmedExit()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage stage \u003d (Stage) this.userInput.getScene().getWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 75
    }
  },
  {
    "path": "src/main/java/duke/commands/AutoSaveToggleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that toggles on and off, the auto-save function in {@code Duke}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class AutoSaveToggleCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code AutoSaveToggleCommand} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public AutoSaveToggleCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code AutoSaveToggleCommand} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public AutoSaveToggleCommand() { super(); }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code AutoSaveToggleCommand} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        SaveCommand.toggleAutoSave();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(SaveCommand.getAutoSave()){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"        \\u2615 Auto-Save has been toggled on.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"        \\u26D4 Auto-Save has been toggled off.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 52
    }
  },
  {
    "path": "src/main/java/duke/commands/CmdType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists all the generic commands available in {@code Duke}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum CmdType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    AUTOSAVE(\"#autosave\", \"#ats\", null, 0),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    COMMANDS(\"#commands\", \"#cmd\", null, 0),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    DELETE(\"#delete\", \"#del\", null, 0),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EDITEND(\"#editend\", \"#ede\", NoteType.EVENT, 0),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EDITSTART(\"#editstart\", \"#eds\", NoteType.EVENT, 0),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EDITTARGET(\"#edittarget\", \"#edt\", NoteType.DEADLINE, 0),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EDITDESC(\"#editdesc\", \"#edd\", null, 0),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EXITDUKE(\"#exitduke\", \"#xit\", null, 0),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EXTDLINE(\"#extend\", \"#xtd\", null, 0),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTBILLS(\"#listbills\", \"#lbp\", NoteType.BILL, 1),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTBIRTHDAYS(\"#listbirthdays\", \"#lbd\", NoteType.BIRTHDAY, 1),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTBUDGETS(\"#listbudgets\", \"#lbg\", NoteType.NOTE, 1),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTDEADLINES(\"#listdeadlines\", \"#ldl\", NoteType.DEADLINE, 1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTEVENTS(\"#listevents\", \"#lev\", NoteType.EVENT, 1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTSHOPLISTS(\"#listshoplists\", \"#lsl\", NoteType.SHOPLIST, 0),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTTASKS(\"#listtasks\", \"#ltk\", NoteType.TASK, 1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTWEDDINGS(\"#listweddings\", \"#lwd\", NoteType.WEDDING, 1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTNOTES(\"#listnotes\", \"#lnt\", NoteType.NOTE, 1),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTNXT24(\"#listnxt24\", \"#n24\", NoteType.NOTE, 1),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTNXT48(\"#listnxt48\", \"#n48\", NoteType.NOTE, 2),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LISTNXT72(\"#listnxt72\", \"#n72\", NoteType.NOTE, 3),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    MARKDONE(\"#markdone\", \"#mkd\", null, 0),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SAVEDUKE(\"#saveduke\", \"#sav\", null, 0),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    TRANSFER(\"#transfer\", \"#txf\", null, 0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    UNDO(\"#undo\", \"#und\", null, 0),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    WIPEDUKE(\"#wipeduke\", \"#wpe\", null, 0),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    NEWNOTE(\"na\", \"na\",null,0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String COMMAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String SHORT_COMMAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final NoteType RELEVANT_NOTE_TYPE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final int TIMELINE_DAYS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code CmdType} enum items."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param command The standard text required to activate the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param shortCommand The short text required to activate the command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param relevantNoteType The {@code NoteType} associated with the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param timelineDays The timeline associated with the {@code ListCommand} objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    CmdType(String command, String shortCommand, NoteType relevantNoteType, int timelineDays) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.SHORT_COMMAND \u003d shortCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.RELEVANT_NOTE_TYPE \u003d relevantNoteType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TIMELINE_DAYS \u003d timelineDays;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the associated {@code CmdType}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the generic command or short command text provided."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The command text entered by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return CmdType The generic command to execute."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching command could be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static CmdType getKey(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(CmdType type: CmdType.values()){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(cmdType.equals(type.COMMAND) || cmdType.equals(type.SHORT_COMMAND) || cmdType.equals(type.toString())){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + cmdType + \" type of command in Duke, yet.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding standard command text"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the generic command or short command text provided."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The generic command or short command text entered by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding standard command text."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching standard command text could be found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getCOMMAND(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(CmdType type: CmdType.values()){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(cmdType.equals(type.COMMAND) || cmdType.equals(type.SHORT_COMMAND) || cmdType.equals(type.toString())){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.COMMAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + cmdType + \" type of command in Duke, yet.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding short command text"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the generic command or short command text provided."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getSHORT_COMMAND(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(CmdType type: CmdType.values()){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(cmdType.equals(type.COMMAND) || cmdType.equals(type.SHORT_COMMAND) || cmdType.equals(type.toString())){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.SHORT_COMMAND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + cmdType + \" type of command in Duke, yet.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the relevant {@code NoteType}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the generic command or short command text provided."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return NoteType The corresponding relevant NoteType."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching NoteType could be found."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static NoteType getRELEVANT_NOTE_TYPE(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(CmdType type: CmdType.values()){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(cmdType.equals(type.COMMAND) || cmdType.equals(type.SHORT_COMMAND) || cmdType.equals(type.toString())){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.RELEVANT_NOTE_TYPE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + cmdType + \" type of command in Duke, yet.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the relevant timeline element applicable to {@code ListCommand} objects"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the generic command or short command text provided."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The corresponding relevant timeline element applicable, returns {@code 0} if not applicable."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching timeline element could be found."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static int getTIMELINE_DAYS(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(CmdType type: CmdType.values()){"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(cmdType.equals(type.COMMAND) || cmdType.equals(type.SHORT_COMMAND) || cmdType.equals(type.toString())){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.TIMELINE_DAYS;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + cmdType + \" type of command in Duke, yet.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 149
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Exception} object that addresses exceptions in command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code CommandException} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param message The message explaining the reason behind the exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public CommandException(String message){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code CommandException} object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public CommandException(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the message detailing the reason behind the exception."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The message detailing the reason behind the exception."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method prints an explanation specifying the command in question and reason behind the exception."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The command that caused the exception."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printExplanation(String input)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    I don\u0027t understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    \" + this.message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.suggestCommands();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 58
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that performs the deletion of existing {@code Note} objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DeleteCommand extends DukeCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ArrayList\u003cInteger\u003e toDelete;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean confirmDelete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code DeleteCommand} object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param toDelete The serial number(s) of {@code Note} objects to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DeleteCommand(String cmdType, ArrayList\u003cInteger\u003e toDelete) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.toDelete \u003d toDelete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.confirmDelete \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code DeleteCommand} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code DeleteCommand} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ByteArrayOutputStream popupOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        final PrintStream orgOut \u003d System.out;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(new PrintStream(popupOut));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.toDelete.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    There are no notes on your list, but I could still get a deep clean.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Are you sure you want to delete the following notes?\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (int note : this.toDelete) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c dukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d note) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        dukeNotes.getNotes().get(i).printList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Data would be lost forever.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!Duke.isGUIMode){ DukeUI.askForConfirmation(); }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String notes \u003d popupOut.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.setOut(orgOut);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.isGUIMode) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DeleteConfirm deleteConfirm \u003d new DeleteConfirm(notes);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage popup \u003d new Stage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            deleteConfirm.start(popup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmDelete \u003d deleteConfirm.getConfirmation();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(notes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Scanner delete \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmDelete \u003d delete.nextLine().toUpperCase().equals(\"Y\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.confirmDelete) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (int note : this.toDelete) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c dukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d note) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        dukeNotes.getNotes().get(i).deleteExistingNote();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        dukeNotes.getNotes().remove(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Deletion(s) completed...\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    ...there are no notes on your list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    ...renumbering the remaining note(s)...\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c dukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.print(\"    #\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.printf(\"%3d\", dukeNotes.getNotes().get(i).getSerialNum());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.print(\"     \u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dukeNotes.getNotes().get(i).setSerialNum(i + 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.print(\"    #\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.printf(\"%3d\", dukeNotes.getNotes().get(i).getSerialNum());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    The remaining notes have been renumbered!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printCompleted();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Deletion aborted.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 137
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteConfirm.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke} to ask for confirmation to delete {@code Note} objects in {@code Duke} using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DeleteConfirm extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    final String notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DeleteConfirm(String notes){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/DeleteConfirmWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader.\u003cDeleteConfirmWindow\u003egetController().setNotes(notes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setTitle(\"Delete Confirmation\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return fxmlLoader.\u003cDeleteConfirmWindow\u003egetController().getConfirmation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteConfirmWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeListBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code DeleteConfirm}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DeleteConfirmWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private VBox noteContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button confirmButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button abortButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isConfirmed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.scrollPane.vvalueProperty().bind(this.noteContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitConfirm() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.confirmButton.getScene().getWindow();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitAbort() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.abortButton.getScene().getWindow();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setNotes(String notes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeListBox.getDukeList(notes)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isConfirmed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An abstract class that forms the basis of command objects in {@code Duke}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public abstract class DukeCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected CmdType cmdType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    boolean confirmExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code DukeCommand} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.cmdType \u003d  CmdType.getKey(cmdType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code DukeCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeCommand() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code DukeCommand} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the command demands that {@code Duke} terminates operation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.confirmExit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ABSTRACT METHODS----------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code DukeCommand} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors in the formats of command attributes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IOException If the command attributes specified does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public abstract void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws ParseException, CommandException, IOException, DateException, InterruptedException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 65
    }
  },
  {
    "path": "src/main/java/duke/commands/EditDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that performs the edition of {@code Date} objects in existing notes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class EditDateCommand extends DukeCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected int targetNote;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected String dateToChange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date newDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date oldDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs an {@code EditDateCommand} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetNote The {@code Note} whose {@code Date} object is to be edited."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dateToChange The type of {@code Date} belonging to the {@code Note} to be edited."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param newDate The new {@code Date} object that is to replace the old {@code Date} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public EditDateCommand(String cmdType, int targetNote, String dateToChange, Date newDate) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetNote \u003d targetNote;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.dateToChange \u003d dateToChange;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.newDate \u003d newDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code EditDateCommand} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public EditDateCommand() { super(); }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method changes the Target Date of the {@code Note} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param i The index of the {@code Note} object in the {@code DukeList} object to change."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the change has been successful."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean changeTargetDate(DukeList dukeNotes, int i) throws DateException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!(dukeNotes.getNotes().get(i) instanceof Deadline)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(this.newDate, \"NoTarget\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (dukeNotes.getNotes().get(i).getIsDone()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The task had already been completed.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The date shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.oldDate \u003d ((Deadline) dukeNotes.getNotes().get(i)).getTargetDate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            NewNoteCommand.checkValidTargetDate(newDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ((Deadline) dukeNotes.getNotes().get(i)).setTargetDate(this.newDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Target Date of Note #\" + this.targetNote + \" changed from...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.oldDate), 66);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.newDate), 66);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method changes the Start Date of the {@code Note} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param i The index of the {@code Note} object in the {@code DukeList} object to change."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the change has been successful."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean changeStartDate(DukeList dukeNotes, int i) throws DateException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!(dukeNotes.getNotes().get(i) instanceof Event)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(this.newDate, \"NoStart\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (dukeNotes.getNotes().get(i).getIsDone()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The event had already concluded.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The date shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.oldDate \u003d ((Event) dukeNotes.getNotes().get(i)).getStartDate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date oldEnd \u003d ((Event) dukeNotes.getNotes().get(i)).getEndDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            long durationInMS \u003d ((Event) dukeNotes.getNotes().get(i)).getDurationMinutes() * 60000;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date newEnd \u003d new Date(this.newDate.getTime() + durationInMS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ArrayList\u003cNote\u003e notesLess_i \u003d new ArrayList\u003c\u003e(dukeNotes.getNotes());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            notesLess_i.remove(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            NewNoteCommand.checkForClashes(notesLess_i, this.newDate, newEnd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.newDate.after(this.oldDate)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                ((Event) dukeNotes.getNotes().get(i)).setEndDate(newEnd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                ((Event) dukeNotes.getNotes().get(i)).setStartDate(this.newDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                ((Event) dukeNotes.getNotes().get(i)).setStartDate(this.newDate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                ((Event) dukeNotes.getNotes().get(i)).setEndDate(newEnd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Start and End Date of Note #\" + this.targetNote +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" changed from...\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.oldDate) + \" ...and... \" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(oldEnd), 66);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.newDate) + \" ...and... \" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(newEnd), 66);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method changes the End Date of the {@code Note} object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param i The index of the {@code Note} object in the {@code DukeList} object to change."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the change has been successful."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean changeEndDate(DukeList dukeNotes, int i) throws DateException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!(dukeNotes.getNotes().get(i) instanceof Event)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(this.newDate, \"NoEnd\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (dukeNotes.getNotes().get(i).getIsDone()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The event had already concluded.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    The date shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.oldDate \u003d ((Event) dukeNotes.getNotes().get(i)).getEndDate();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date oldStart \u003d ((Event) dukeNotes.getNotes().get(i)).getStartDate();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ArrayList\u003cNote\u003e notesLess_i \u003d new ArrayList\u003c\u003e(dukeNotes.getNotes());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            notesLess_i.remove(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            NewNoteCommand.checkForClashes(notesLess_i, oldStart, newDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ((Event) dukeNotes.getNotes().get(i)).setEndDate(this.newDate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    End Date of Note #\" + this.targetNote + \" changed from...\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.oldDate), 66);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.newDate), 66);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code EditDateCommand} object."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException, DateException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cdukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d this.targetNote) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                switch (this.dateToChange) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"target\" -\u003e {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (changeTargetDate(dukeNotes, i)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"start\" -\u003e {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (changeStartDate(dukeNotes, i)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"end\" -\u003e {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (changeEndDate(dukeNotes, i)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    default -\u003e throw new CommandException(\"The type of date you are trying to edit does not exist.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 209
    }
  },
  {
    "path": "src/main/java/duke/commands/EditDescriptionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that performs the edition of descriptions in existing notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class EditDescriptionCommand extends DukeCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected int targetNote;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected String newDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected String oldDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs an {@code EditDescriptionCommand} object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetNote The {@code Note} whose {@code Date} object is to be edited."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param newDescription The new description that is to replace the old description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public EditDescriptionCommand(String cmdType, int targetNote, String newDescription) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetNote \u003d targetNote;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code EditDescriptionCommand} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public EditDescriptionCommand() { super(); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code EditDescriptionCommand} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cdukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d this.targetNote) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(dukeNotes.getNotes().get(i).getIsDone()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(dukeNotes.getNotes().get(i) instanceof Task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        System.out.println(\"    The task had already been completed.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else if(dukeNotes.getNotes().get(i) instanceof Event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        System.out.println(\"    The event had already concluded.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    The description shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.oldDescription \u003d dukeNotes.getNotes().get(i).getDescription();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dukeNotes.getNotes().get(i).setDescription(this.newDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    Description of Note #\" + this.targetNote + \" changed from...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.commandWrap(this.oldDescription, 66);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.commandWrap(this.newDescription, 66);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 81
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that confirms and terminates the operation of {@code Duke}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ExitCommand extends DukeCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs an {@code ExitCommand} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ExitCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code ExitCommand} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code ExitCommand} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.isGUIMode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ExitConfirm exitConfirm \u003d new ExitConfirm();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage popup \u003d new Stage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            exitConfirm.start(popup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmExit \u003d exitConfirm.getConfirmation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Scanner quitDuke \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Are you sure you want to exit Duke?\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    All unsaved data would be lost.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.askForConfirmation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmExit \u003d quitDuke.nextLine().toUpperCase().equals(\"Y\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.confirmExit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Good Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Yay! Thanks for staying!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 78
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitConfirm.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke} to ask for confirmation to exit {@code Duke} using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ExitConfirm extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ExitConfirm(){}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/ExitConfirmWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setTitle(\"Exit Confirmation\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return fxmlLoader.\u003cExitConfirmWindow\u003egetController().getConfirmation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitConfirmWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code ExitConfirm}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ExitConfirmWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button confirmButton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button abortButton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isConfirmed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"EmptyMethod\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitConfirm() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.confirmButton.getScene().getWindow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitAbort() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.abortButton.getScene().getWindow();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isConfirmed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/ExtendDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that performs the edition of the {@code targetDate}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * attribute of a {@code Deadline} object by a measure of milliseconds."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ExtendDeadlineCommand extends DukeCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected int targetNote;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected long millisecondsToExtend;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date newDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date oldDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code ExtendDeadlineCommand} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetNote The {@code Note} whose {@code Date} object is to be extended."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param millisecondsToExtend The number of milliseconds to extend the {@code Date} object by."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ExtendDeadlineCommand(String cmdType, int targetNote, long millisecondsToExtend) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetNote \u003d targetNote;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.millisecondsToExtend \u003d millisecondsToExtend;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code ExtendDeadlineCommand} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ExtendDeadlineCommand() { super(); }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code ExtendDeadlineCommand} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException, DateException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cdukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d this.targetNote) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(!(dukeNotes.getNotes().get(i) instanceof Deadline)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    The note selected is not a task with a deadline.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    The deadline shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else if(dukeNotes.getNotes().get(i).getIsDone()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    The task had already been completed.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    The deadline shouldn\u0027t be edited anymore.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    Deadline of Note #\" + this.targetNote + \":\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dukeNotes.getNotes().get(i).printList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.oldDate \u003d ((Deadline) dukeNotes.getNotes().get(i)).getTargetDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.newDate \u003d new Date(this.oldDate.getTime() + millisecondsToExtend);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    ((Deadline) dukeNotes.getNotes().get(i)).setTargetDate(this.newDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    extended from...\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.oldDate), 66);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.commandWrap(DukeUI.NOTE_TIME.format(this.newDate), 66);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 88
    }
  },
  {
    "path": "src/main/java/duke/commands/InfoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that prints all the commands available in {@code Duke}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class InfoCommand extends DukeCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private String infoType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code InfoCommand} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public InfoCommand(String cmdType, String infoType) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.infoType \u003d infoType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code InfoCommand} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public InfoCommand() { super(); }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code InfoCommand} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.showCommandList(infoType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Birthday;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Wedding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Bill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Shoplist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that filters, orders and prints {@code Notes} in memory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ListCommand extends DukeCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private NoteType noteType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private String noteFilter \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private String textFilter \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Date dateFilter \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Date addedFilter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private int timelineDays \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code ListCommand} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ListCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteType \u003d CmdType.getRELEVANT_NOTE_TYPE(cmdType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code ListCommand} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dateFilter The date specified for {@code Note} objects to be displayed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param timelineDays The window based on number of days for {@code Note} objects to be displayed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ListCommand(String cmdType, Date dateFilter, int timelineDays)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteType \u003d CmdType.getRELEVANT_NOTE_TYPE(cmdType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.dateFilter \u003d dateFilter;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.timelineDays \u003d timelineDays;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code ListCommand} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteFilter The selection to filter {@code Note} objects based on their completion statuses."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param textFilter The description text specified for {@code Note} objects to be displayed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dateFilter The date specified for {@code Note} objects to be displayed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param timelineDays The window based on number of days for {@code Note} objects to be displayed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ListCommand(String cmdType, String noteFilter, String textFilter,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                       Date dateFilter, Date addedFilter, int timelineDays)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteType \u003d CmdType.getRELEVANT_NOTE_TYPE(cmdType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteFilter \u003d noteFilter;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.textFilter \u003d textFilter;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.dateFilter \u003d dateFilter;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addedFilter \u003d addedFilter;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.timelineDays \u003d timelineDays;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code ListCommand} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method sorts {@code Note} object based on their attached {@code Budget} object amounts."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgets The {@code ArrayList} of {@code Note} objects with {@code Budget}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *                objects attached that is to be sorted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void selectionSortBudgets(ArrayList\u003cNote\u003e budgets) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        double budgetI;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        double budgetJ;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgets.size()\u003e1){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            budgetI \u003d budgets.get(budgets.size()-1).getBudgetObject().getBudgetRevised();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (int i\u003dbudgets.size()-1; i\u003e0; i--) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                budgetJ \u003d budgets.get(i-1).getBudgetObject().getBudgetRevised();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if (budgetI \u003c budgetJ) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Note temp \u003d budgets.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    budgets.set(i, budgets.get(i-1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    budgets.set(i-1, temp);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method sorts {@code Note} object based on their {@code Date} objects."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param notes The {@code ArrayList} of {@code Note} objects with that is to be sorted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void selectionSortDates(ArrayList\u003cNote\u003e notes)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws DateException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date dateI \u003d new Date();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date dateJ \u003d new Date();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(notes.size()\u003e1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(notes.get(notes.size()-1) instanceof Deadline) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateI \u003d ((Deadline) notes.get(notes.size()-1)).getTargetDate();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if (notes.get(notes.size()-1) instanceof Event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateI \u003d ((Event) notes.get(notes.size()-1)).getStartDate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                throw new DateException(dateI, \"NoDate\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (int i\u003dnotes.size()-1; i\u003e0; i--) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(notes.get(i-1) instanceof Deadline) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dateJ \u003d ((Deadline) notes.get(i-1)).getTargetDate();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else if (notes.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dateJ \u003d ((Event) notes.get(i-1)).getStartDate();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    throw new DateException(dateJ, \"NoDate\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if (dateI.before(dateJ)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Note temp \u003d notes.get(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    notes.set(i, notes.get(i-1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    notes.set(i-1, temp);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method assesses and filters {@code Note} objects based on their start or target {@code Date} objects."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param note The {@code Note} object that is to be assessed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Note} object fulfils the criteria and is to be included."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean filterByStartTargetDate(Note note) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.dateFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            long duration \u003d this.timelineDays * 86400000;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d this.dateFilter;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d new Date(this.dateFilter.getTime() + duration);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (note instanceof Deadline) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return ((Deadline) note).getTargetDate().after(start) \u0026\u0026"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        ((Deadline) note).getTargetDate().before(end);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if (note instanceof Event) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return ((Event) note).getStartDate().after(start) \u0026\u0026"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        ((Event) note).getStartDate().before(end);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method assesses and filters {@code Note} objects based on their added {@code Date} objects."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param note The {@code Note} object that is to be assessed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Note} object fulfils the criteria and is to be included."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean filterByAddedDate(Note note) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.addedFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            long duration \u003d this.timelineDays * 86400000;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d this.addedFilter;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d new Date(this.addedFilter.getTime() + duration);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return note.getAddDate().after(start) \u0026\u0026 note.getAddDate().before(end);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method assesses and filters {@code Note} objects based on their completion statuses."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param note The {@code Note} object that is to be assessed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Note} object fulfils the criteria and is to be included."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean filterByStatus(Note note) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.noteFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return switch (this.noteFilter) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"O\" -\u003e !note.getIsDone();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"C\" -\u003e note.getIsDone();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                default -\u003e false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            };"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method assesses and filters {@code Note} objects based on their text descriptions."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param note The {@code Note} object that is to be assessed."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Note} object fulfils the criteria and is to be included."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean filterByText(Note note) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.textFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String desc \u003d note.getDescription().toUpperCase();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String text \u003d this.textFilter.toUpperCase();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return desc.contains(text);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method presents the results from the filtration and prints the selected {@code Note} objects if any."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param notes The {@code ArrayList} of {@code Note} objects with that is to be printed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void printResults(ArrayList\u003cNote\u003e notes)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String noteName \u003d NoteType.getLOWERCASE_NAME_PLURAL(this.noteType.toString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String noteVerb \u003d NoteType.getVERB(this.noteType.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(notes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String noteReport \u003d \"\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.noteFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                noteReport \u003d \"You haven\u0027t asked me to keep any \" + noteName;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if(this.noteFilter.equals(\"O\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                noteReport \u003d \"You have no outstanding \" + noteName;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if(this.noteFilter.equals(\"C\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                noteReport \u003d \"You have no completed \" + noteName;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String textReport \u003d \"\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.textFilter !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                textReport \u003d \" with the words \\\"\" + this.textFilter + \"\\\" in its description\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String dateReport \u003d \"\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.dateFilter !\u003d null) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateReport \u003d switch (CmdType.getKey(this.cmdType.toString()).toString()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"LISTNXT24\" -\u003e \" in the next 24 hours\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"LISTNXT48\" -\u003e \" in the next 48 hours\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"LISTNXT72\" -\u003e \" in the next 72 hours\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    default -\u003e \" \" + noteVerb + \" \" + DukeUI.NOTE_DATE.format(this.dateFilter);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                };"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String addedReport \u003d \"\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.addedFilter !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                addedReport \u003d \" that was added on \" + DukeUI.NOTE_DATE.format(this.addedFilter);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.standardWrap(noteReport + textReport + dateReport + addedReport + \".\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Here are the \" + noteName + \" you told me to note:-\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (Note note: notes) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                note.printList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code ListCommand} object."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, DateException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(Note note : dukeNotes.getNotes()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(!filterByStatus(note)) { continue; }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(!filterByText(note)) { continue; }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(!filterByStartTargetDate(note)) { continue; }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(!filterByAddedDate(note)) { continue; }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (CmdType.getKey(this.cmdType.toString()).toString().equals(\"LISTBUDGETS\")) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if (note.getBudgetObject() !\u003d null) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    notes.add(note);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    selectionSortBudgets(notes);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                switch (NoteType.getCONSTRUCTOR(this.noteType.toString())) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Bill\" -\u003e {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Bill) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortDates(notes);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Birthday\" -\u003e {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Birthday) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortDates(notes);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Deadline\" -\u003e {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Deadline) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortDates(notes);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Event\" -\u003e {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Event) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortDates(notes);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Shoplist\" -\u003e {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Shoplist) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortBudgets(notes);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Task\" -\u003e {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Task) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Wedding\" -\u003e {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (note instanceof Wedding) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            notes.add(note);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            selectionSortDates(notes);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"Note\" -\u003e notes.add(note);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.printResults(notes);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printCompleted();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 367
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that marks existing {@code Note} objects as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class MarkDoneCommand extends DukeCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ArrayList\u003cInteger\u003e toMarkDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code MarkDoneCommand} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param toMarkDone The serial number(s) of {@code Note} objects to be marked as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public MarkDoneCommand(String cmdType, ArrayList\u003cInteger\u003e toMarkDone) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.toMarkDone \u003d toMarkDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code MarkDoneCommand} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public MarkDoneCommand() { super(); }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code MarkDoneCommand} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the format of {@code Date} objects."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date doneDate \u003d new Date();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (int note : this.toMarkDone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.getNotes().get(note-1).markAsDone(doneDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printCompleted();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 64
    }
  },
  {
    "path": "src/main/java/duke/commands/NewNoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Birthday;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Wedding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Bill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Shoplist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that evaluates user input to create new {@code Note} objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class NewNoteCommand extends DukeCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private NoteType noteType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code NewNoteCommand} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The type of {@code Note} being created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param inputs The list of user input elements to be used to create new {@code Note} objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public NewNoteCommand(String noteType, ArrayList\u003cString\u003e inputs) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(\"NEWNOTE\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.noteType \u003d NoteType.getKey(noteType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code NewNoteCommand} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public NewNoteCommand() { super(); }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method checks for clashes between new and existing {@code Event} objects, as well as the current date-time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param notes The {@code ArrayList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param start The {@code Date} object indicating the start date of the new {@code Event} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param end The {@code Date} object indicating the end date of the new {@code Event} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void checkForClashes(ArrayList\u003cNote\u003e notes, Date start, Date end)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws DateException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(start.before(now)){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(start, \"StartB4Now\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(end.before(start)){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(end, \"EndB4Start\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(Note note: notes){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(note instanceof Event){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date noteStart \u003d ((Event) note).getStartDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date noteEnd \u003d ((Event) note).getEndDate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if((start.after(noteStart) || start.equals(noteStart)) \u0026\u0026"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        (start.before(noteEnd) || start.equals(noteEnd))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    throw new DateException(start, \"EventsClash\", (Event) note);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else if((end.after(noteStart) || end.equals(noteStart)) \u0026\u0026"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        (end.before(noteEnd) || end.equals(noteEnd))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    throw new DateException(end, \"EventsClash\", (Event) note);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else if((start.before(noteStart) || start.equals(noteStart)) \u0026\u0026"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        (end.after(noteEnd) || end.equals(noteEnd))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    throw new DateException(end, \"EventsClash\", (Event) note);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method checks for the validity of dollar amounts used in the {@code Budget} class of objects."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param amount The dollar amount to be checked for validity."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If the dollar amount is less than or equals to zero."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void checkValidAmount(double amount) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(amount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new CommandException(\"The dollar amount specified must be more than zero.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method checks for the validity of {@code Date} objects used in the {@code Task} class of objects."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description to be checked for validity."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If the description is blank or empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void checkValidDescription(String description) throws CommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(description.isBlank() || description.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new CommandException(\"The description provided cannot be blank or empty.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method checks for the validity of {@code Date} objects used in the {@code Task} class of objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object to be checked for validity."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If the {@code Date} object is before the present date-time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void checkValidTargetDate(Date date) throws DateException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(date.before(now)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(date, \"TargetDate\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code NewNoteCommand} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors reading previously saved files."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, ParseException, DateException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date addDate \u003d new Date();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        int nextSerialNum \u003d dukeNotes.getNotes().size() + 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        switch (noteType.toString()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"BILL\" -\u003e {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date targetDate \u003d DateParser.understandDateInput(inputs.get(2));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                double itemBudget \u003d Double.parseDouble(inputs.get(3));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidTargetDate(targetDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidAmount(itemBudget);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Bill(nextSerialNum, description, targetDate, itemBudget, addDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"BIRTHDAY\" -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String giftDescription \u003d \"Birthday gift for \" + description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date startDate \u003d DateParser.understandDateInput(inputs.get(2));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date endDate \u003d DateParser.understandDateInput(inputs.get(3));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                double itemBudget \u003d Double.parseDouble(inputs.get(4));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkForClashes(dukeNotes.getNotes(), startDate, endDate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidAmount(itemBudget);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Shoplist(nextSerialNum, giftDescription, itemBudget, addDate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note2 \u003d new Birthday(nextSerialNum+1, description, startDate, endDate, addDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"DEADLINE\" -\u003e {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date targetDate \u003d DateParser.understandDateInput(inputs.get(2));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidTargetDate(targetDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Deadline(nextSerialNum, description, targetDate, addDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"EVENT\" -\u003e {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date startDate \u003d DateParser.understandDateInput(inputs.get(2));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date endDate \u003d DateParser.understandDateInput(inputs.get(3));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkForClashes(dukeNotes.getNotes(), startDate, endDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Event(nextSerialNum, description, startDate, endDate, addDate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"SHOPLIST\" -\u003e {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                double itemBudget \u003d Double.parseDouble(inputs.get(2));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidAmount(itemBudget);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Shoplist(nextSerialNum, description, itemBudget, addDate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"TASK\" -\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Task(nextSerialNum, description, addDate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"WEDDING\" -\u003e {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String description \u003d inputs.get(1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date startDate \u003d DateParser.understandDateInput(inputs.get(2));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date endDate \u003d DateParser.understandDateInput(inputs.get(3));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                double itemBudget \u003d Double.parseDouble(inputs.get(4));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidDescription(description);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkForClashes(dukeNotes.getNotes(), startDate, endDate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                checkValidAmount(itemBudget);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Note note1 \u003d new Wedding(nextSerialNum, description, startDate, endDate, itemBudget, addDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                notes.add(note1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.addConfirm(notes.get(i).getObjectClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.getNotes().add(notes.get(i));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.getNotes().get(nextSerialNum + i - 1).printList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 237
    }
  },
  {
    "path": "src/main/java/duke/commands/NoteType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists all the {@code Note} objects available in {@code Duke}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum NoteType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    BILL(\"Bill\", \"@bill\", \"@bl\", \"[BL]\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"bill payment\", \"bill payments\", \"due on\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    BIRTHDAY(\"Birthday\", \"@birthday\", \"@bd\",\"[BD]\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"birthday\", \"birthdays\", \"falling on\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    DEADLINE(\"Deadline\", \"@deadline\", \"@dl\",\"[DL]\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"deadline task\", \"deadlines\", \"due by\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    EVENT(\"Event\", \"@event\", \"@ev\",\"[EV]\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"event\", \"events\", \"taking place on\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SHOPLIST(\"Shoplist\", \"@shoplist\", \"@sl\",\"[SL]\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"shopping list item\", \"shopping list items\", \"\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    TASK(\"Task\", \"@task\", \"@tk\",\"[TK]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"task\", \"tasks\", \"\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    WEDDING(\"Wedding\", \"@wedding\", \"@wd\",\"[WD]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"wedding\", \"weddings\", \"happening on\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    NOTE(\"Note\", \"N.A.\", \"N.A.\", \"N.A.\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"note\", \"notes\", \"on\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String CONSTRUCTOR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String COMMAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String SHORT_COMMAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String TASK_ICON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String LOWERCASE_NAME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String LOWERCASE_NAME_PLURAL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String VERB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code NoteType} enum items."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param constructor The constructor used to create the {@code Note} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param command The standard text required to activate the command to create the {@code Note} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param shortCommand The short text required to activate the command to create the {@code Note} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param taskIcon The icon to be displayed for the {@code Note} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param lowercaseName The singular noun in lowercase to be displayed for the {@code Note} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param lowercaseNamePlural The plural noun in lowercase to be displayed for the {@code Note} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param verb The verb to be used for the {@code Note} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    NoteType(String constructor, String command, String shortCommand, String taskIcon,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "             String lowercaseName, String lowercaseNamePlural, String verb) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.CONSTRUCTOR \u003d constructor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.SHORT_COMMAND \u003d shortCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TASK_ICON \u003d taskIcon;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.LOWERCASE_NAME \u003d lowercaseName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.LOWERCASE_NAME_PLURAL \u003d lowercaseNamePlural;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.VERB \u003d verb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the associated {@code NoteType} for the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The constructor or command text entered by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return NoteType The associated NoteType."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching command could be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static NoteType getKey(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the associated constructor for the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The constructor or command text entered by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The constructor associated with the command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching command could be found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getCONSTRUCTOR(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.CONSTRUCTOR;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding standard command text for the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or short command text entered by the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding standard command text."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching standard command text could be found."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getCOMMAND(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.COMMAND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding short command text for the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getSHORT_COMMAND(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.SHORT_COMMAND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding task icon for the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getTASK_ICON(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.TASK_ICON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding singular noun in lowercase for the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getLOWERCASE_NAME(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.LOWERCASE_NAME;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding plural noun in lowercase for the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getLOWERCASE_NAME_PLURAL(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.LOWERCASE_NAME_PLURAL;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the corresponding verb to be used for the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * constructor or command text provided."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param noteType The generic command or standard command text entered by the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding short command text."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If no matching short command text could be found."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getVERB(String noteType) throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(NoteType type: NoteType.values()){"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(noteType.equals(type.CONSTRUCTOR) || noteType.equals(type.COMMAND) ||"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    noteType.equals(type.SHORT_COMMAND) || noteType.equals(type.toString())){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return type.VERB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        throw new CommandException(\"There is no \" + noteType + \" type of notes in Duke, yet.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 210
    }
  },
  {
    "path": "src/main/java/duke/commands/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that saves existing {@code Note} to file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class SaveCommand extends DukeCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static boolean autoSave \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code SaveCommand} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public SaveCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code SaveCommand} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public SaveCommand() { super(); }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method toggles the auto-save feature in {@code Duke} between on and off."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void toggleAutoSave() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        autoSave \u003d !autoSave;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the on-off status of the auto-save feature in {@code Duke}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the on-off status of the auto-save feature in {@code Duke} is on."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static boolean getAutoSave() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return autoSave;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code SaveCommand} object via auto-save in the background."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the auto-save has been performed successfully. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean autoSave(DukeList dukeNotes, DukeStorage dukeStorage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (autoSave) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dukeStorage.archiveToFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dukeStorage.writeToFile(dukeNotes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code SaveCommand} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IOException If the saved file specified does not exist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dukeStorage.archiveToFile();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dukeStorage.writeToFile(dukeNotes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Save operation completed!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 91
    }
  },
  {
    "path": "src/main/java/duke/commands/TransferCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that transfers budget amounts between {@code Budget} objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class TransferCommand extends DukeCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private int from;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private int to;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code TransferCommand} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param from The serial number of the {@code Note} object from which an amount from its"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *             attached {@code Budget} object is to be transferred."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param to The serial number of the {@code Note} object from which an amount is to be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *           transferred to its attached {@code Budget} object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param amount The amount to be transferred between the {@code Budget} objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public TransferCommand(String cmdType, int from, int to, double amount) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assert amount \u003e 0 : \"Transfer amount cannot be less than or equals to zero.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code TransferCommand} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public TransferCommand() { super(); }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code TransferCommand} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IndexOutOfBoundsException If the note specified does not exist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.from \u003e dukeNotes.getNotes().size() || this.to \u003e dukeNotes.getNotes().size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cdukeNotes.getNotes().size(); i++){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d this.from) { this.from \u003d i; }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().get(i).getSerialNum() \u003d\u003d this.to) { this.to \u003d i; }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Budget fromBudget \u003d dukeNotes.getNotes().get(this.from).getBudgetObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Budget toBudget \u003d dukeNotes.getNotes().get(this.to).getBudgetObject();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(fromBudget \u003d\u003d null || toBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new CommandException(\"No Budget object(s) were found in one or both of the note(s) you specified.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        boolean isSuccessful \u003d fromBudget.transferBudgetOut(this.amount, toBudget);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isSuccessful){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Budget transferred from...\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.getNotes().get(this.from).printList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    to...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.getNotes().get(this.to).printList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printCompleted();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.autoSaveConfirmation(new SaveCommand().autoSave(dukeNotes, dukeStorage));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.suggestListNotes();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 89
    }
  },
  {
    "path": "src/main/java/duke/commands/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that reloads a previously"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * saved version of {@code Note} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class UndoCommand extends DukeCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean confirmUndo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code UndoLastCommand} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public UndoCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.confirmUndo \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code UndoLastCommand} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public UndoCommand() { super(); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code UndoLastCommand} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception IOException If previously saved files cannot be found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors reading previously saved files."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws IOException, ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.isGUIMode) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            UndoConfirm undoConfirm \u003d new UndoConfirm();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage popup \u003d new Stage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            undoConfirm.start(popup);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmUndo \u003d undoConfirm.getConfirmation();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Scanner undoDuke \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printCompleted();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Are you sure you want to undo the last save?\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    All unsaved data would be lost.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.askForConfirmation();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmUndo \u003d undoDuke.nextLine().toUpperCase().equals(\"Y\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.confirmUndo) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            switch (dukeStorage.revertToLastSave(dukeNotes)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case -1 -\u003e System.out.println(\"    I have undone the maximum number of times.\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case 0 -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    I have undone the last save operation.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    You have no more opportunities to undo.\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case 1 -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    I have undone the last save operation.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    You have 1 last opportunity to undo.\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case 2 -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    I have undone the last save operation.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    You have 2 more opportunities to undo.\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Undo last save aborted!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printCompleted();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 99
    }
  },
  {
    "path": "src/main/java/duke/commands/UndoConfirm.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke} to ask for confirmation to undo {@code Duke} using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class UndoConfirm extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public UndoConfirm(){}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/UndoConfirmWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setTitle(\"Undo Confirmation\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return fxmlLoader.\u003cUndoConfirmWindow\u003egetController().getConfirmation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/UndoConfirmWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code UndoConfirm}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class UndoConfirmWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button confirmButton;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button abortButton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isConfirmed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"EmptyMethod\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void undoConfirm() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.confirmButton.getScene().getWindow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void undoAbort() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.abortButton.getScene().getWindow();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isConfirmed;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/WipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code DukeCommand} object that wipes the memory and saved files on {@code Duke}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class WipeCommand extends DukeCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean confirmWipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code WipeCommand} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param cmdType The type of {@code DukeCommand} being constructed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public WipeCommand(String cmdType) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(cmdType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.confirmWipe \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code WipeCommand} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public WipeCommand( ) { super(); }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to reset the file path for the {@code DukeStorage} object in {@code Duke}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * in the event of a program reset."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void resetFilePath(DukeStorage dukeStorage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        File newFile \u003d new File(dukeStorage.getPath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dukeStorage.setFile(newFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method executes the function of the {@code WipeCommand} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object that holds the notes managed by {@code Duke}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeStorage The {@code DukeStorage} object that holds access to the saved files of {@code Duke}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void execute(DukeList dukeNotes, DukeStorage dukeStorage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(Duke.isGUIMode) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            WipeConfirm wipeConfirm \u003d new WipeConfirm();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage popup \u003d new Stage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            wipeConfirm.start(popup);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmWipe \u003d wipeConfirm.getConfirmation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Scanner wipeDuke \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printCompleted();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printOutstanding();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Are you sure you want to wipe Duke\u0027s memory?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    All data, including saved files, would be lost.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.askForConfirmation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.confirmWipe \u003d wipeDuke.nextLine().toUpperCase().equals(\"Y\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.confirmWipe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            ArrayList\u003cInteger\u003e dukeMemory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cdukeNotes.getNotes().size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                int serialNum \u003d dukeNotes.getNotes().get(i).getSerialNum();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dukeMemory.add(serialNum);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DeleteCommand wipeMemory \u003d new DeleteCommand(\"DELETE\", dukeMemory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            wipeMemory.execute(dukeNotes, dukeStorage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(dukeNotes.getNotes().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Duke.resetStaticVariables();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dukeStorage.deleteFiles();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                resetFilePath(dukeStorage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    :\\n    :\\n    :\\n    :\\n    :\\n    :\\n    :\\n    :\\n    :\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Good Bye! I won\u0027t remember who you are.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Yay! Thank you for keeping me!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            DukeUI.printDivider();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Yay! Thank you for keeping me!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 112
    }
  },
  {
    "path": "src/main/java/duke/commands/WipeConfirm.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke} to ask for confirmation to wipe {@code Duke} using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class WipeConfirm extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public WipeConfirm(){}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/WipeConfirmWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setTitle(\"Wipe Confirmation\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return fxmlLoader.\u003cExitConfirmWindow\u003egetController().getConfirmation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/WipeConfirmWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code WipeConfirm}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class WipeConfirmWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button confirmButton;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button abortButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isConfirmed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"EmptyMethod\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() { }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitConfirm() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.confirmButton.getScene().getWindow();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void exitAbort() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isConfirmed \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Stage stage \u003d (Stage) this.abortButton.getScene().getWindow();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getConfirmation(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isConfirmed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 44
    }
  },
  {
    "path": "src/main/java/duke/notes/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.NoteType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An abstract class that forms the basis of the various types of notes in {@code Duke}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * that extends the {@code Note} class. The class also provides common methods that would"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * be used across these notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public abstract class Note {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected int serialNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date addDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date doneDate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise the attributes common to the various type of notes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * that extends the {@code Note} class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the note."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Note(int serialNum, String description, Date addDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assert !description.isEmpty() \u0026\u0026 !description.isBlank() : \"Note description cannot be empty or blank.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addDate \u003d addDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise the various type of notes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * that extends the {@code Note} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Note() {}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Note} object as completed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Note} had concluded."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Note #\" + this.serialNum + \" was already done!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.doneDate \u003d doneDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Noted! I\u0027ve marked Note #\" + this.serialNum + \" as done.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to assign or reassign serial numbers to {@code Note} objects."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setSerialNum(int serialNum) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to set or edit the description of {@code Note} objects."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Note} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve serial numbers of the {@code Note} object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public int getSerialNum() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.serialNum);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the description of the {@code Note} object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The description of the {@code Note} object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Date} object reflecting"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * the date the {@code Note} object was added."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Date The {@code Date} object reflecting the date the {@code Note} object was added."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Date getAddDate() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.addDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the completion status of the {@code Note} object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Note} object was completed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.isDone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print details of the {@code Note} object."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printList() throws CommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"    \" + String.format(\"%3d\", this.serialNum));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\". \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(this.getTaskIcon());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(this.getStatusIcon() + \" \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.listWrap(this.description, 25, this.addDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        printDetails();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print additional details of the {@code Note} object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails(){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the status icon reflecting the completion status of the {@code Note} object."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The status icon reflecting the completion status of the {@code Note} object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return (\"[\\u2714]\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return (\"[\\u2718]\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the task icon reflecting the type of sub-class of {@code Note} objects."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The task icon reflecting the type of sub-class of {@code Note} objects."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getTaskIcon() throws CommandException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return NoteType.getTASK_ICON(this.getObjectClass());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ABSTRACT METHODS----------------------------------"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete existing {@code Note} object and make associated adjustments."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public abstract void deleteExistingNote();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Note} object as a string in a format that is"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Note} object."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Note} object as a string in a format"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Note} object."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public abstract String getSaveText();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Note} object as a {@code String}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Note} object."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public abstract String getObjectClass();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Budget} object attached to the {@code Note} object, if any."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Note} object, if any."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public abstract Budget getBudgetObject();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 209
    }
  },
  {
    "path": "src/main/java/duke/notes/budget/AskPrice.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * A GUI for {@code Duke}  to ask for price using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class AskPrice extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    final String itemName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public AskPrice(String itemName){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/view/PriceWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fxmlLoader.\u003cPriceWindow\u003egetController().setItemName(itemName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.setTitle(\"Confirm Item Price\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.getIcons().add(new Image(\"/icons/Duke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.showAndWait();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String returnPrice(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return fxmlLoader.\u003cPriceWindow\u003egetController().getInputPrice();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 46
    }
  },
  {
    "path": "src/main/java/duke/notes/budget/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An object that records and measures the budget performance of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Budget} object, a budget amount must minimally be set."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * The {@code Budget} object can thereafter record revisions, utilisation and"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * the residual balance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Class-level members are available to aggregate the total budget set,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * used and remaining across all Budget objects created."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final double BUDGET_SET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private double budgetRevised;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private double budgetUsed \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private double budgetBalance \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isRevised \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private boolean isOverBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static double totalBudgetSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static double totalBudgetUsed \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static double totalBudgetBalance \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private static boolean isTotalOverBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Budget} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetSet The initial budget amount set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget(double budgetSet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assert budgetSet \u003e 0 : \"Budget set cannot be less than or equals to zero.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.BUDGET_SET \u003d budgetSet;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetRevised \u003d this.BUDGET_SET;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetSet \u003d totalBudgetSet + budgetSet;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Budget} object based on information"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * from a saved file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetSet The initial budget amount set."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetRevised The revised budget amount."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetUsed The amount of budget utilised."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetBalance The amount of budget not utilised."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isRevised Indicator of whether the budget set has been revised."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isOverBudget Indicator of whether the budget set or revised has been exceeded."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget(double budgetSet, double budgetRevised,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                  double budgetUsed, double budgetBalance,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                  boolean isRevised, boolean isOverBudget) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.BUDGET_SET \u003d budgetSet;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetRevised \u003d budgetRevised;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetUsed \u003d budgetUsed;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetBalance \u003d budgetBalance;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isRevised \u003d isRevised;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isOverBudget \u003d isOverBudget;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetSet \u003d totalBudgetSet + budgetSet;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetUsed \u003d totalBudgetUsed + budgetUsed;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d totalBudgetBalance + budgetBalance;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isTotalOverBudget \u003d totalBudgetBalance \u003c 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to record the amount of budget used upon completion of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param budgetUsed The amount of budget utilised."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setBudgetUsed(double budgetUsed) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetUsed \u003d budgetUsed;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetBalance \u003d this.budgetRevised - budgetUsed;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isOverBudget \u003d this.budgetBalance \u003c 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetUsed \u003d totalBudgetUsed + budgetUsed;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d totalBudgetBalance + this.budgetBalance;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isTotalOverBudget \u003d totalBudgetBalance \u003c 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to effect an inward transfer of a budget amount,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * thereby revising and increasing the budget available."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method can only be called by a successful {@code transferBudgetOut} method,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * ensuring that an existing budget amount is available to effect the transfer."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param balanceIn The budget amount to be transferred in."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void transferBudgetIn(double balanceIn) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d totalBudgetBalance - this.budgetBalance;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetRevised \u003d this.budgetRevised + balanceIn;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgetUsed !\u003d 0){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.budgetBalance \u003d this.budgetRevised - budgetUsed;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            totalBudgetBalance \u003d totalBudgetBalance + this.budgetBalance;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isOverBudget \u003d this.budgetBalance \u003c 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isRevised \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to effect an outward transfer of a budget amount to another {@code Budget} object,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * thereby revising and decreasing the budget available."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * The transfer might fail if there is an insufficient budget amount or budget balance in the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * {@code Budget} object to effect the transfer."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param balanceOut The budget amount to be transferred out."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param target The {@code Budget} object to which the budget amount is to be transferred to."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the transfer is successful."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean transferBudgetOut(double balanceOut, Budget target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.budgetUsed \u003d\u003d 0 \u0026\u0026 this.budgetRevised \u003c balanceOut) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There is insufficient budget set in the originating budget\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        \"    to effect the transfer.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if (this.budgetUsed \u003e 0 \u0026\u0026 this.budgetBalance \u003c balanceOut) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There is insufficient budget balance in the originating budget\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        \"    to effect the transfer.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d totalBudgetBalance - this.budgetBalance;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.budgetRevised \u003d this.budgetRevised - balanceOut;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgetUsed !\u003d 0){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.budgetBalance \u003d this.budgetRevised - budgetUsed;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            totalBudgetBalance \u003d totalBudgetBalance + this.budgetBalance;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isRevised \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        target.transferBudgetIn(balanceOut);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    The budget transfer is successful.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to remove the {@code Budget} object upon removal of its affiliated note."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * The method also updates class-level members to reflect the removal of the {@code Budget} object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingBudget() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetSet \u003d totalBudgetSet - this.BUDGET_SET;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetUsed \u003d totalBudgetUsed - this.budgetUsed;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d totalBudgetBalance - this.budgetBalance;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isTotalOverBudget \u003d totalBudgetBalance \u003c 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to reset the static variables of the {@code Budget}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * class in the event of a program reset."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void resetStaticVariables() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetSet \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetUsed \u003d 0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        totalBudgetBalance \u003d 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        isTotalOverBudget \u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the initial budget set."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The initial budget amount set."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public double getBUDGET_SET(){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.BUDGET_SET;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the revised budget amount."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The revised budget amount."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public double getBudgetRevised(){"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.budgetRevised;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the amount of budget utilised."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The amount of budget utilised."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public double getBudgetUsed(){"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.budgetUsed;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is to retrieve the revision status of the {@code Budget} object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * (i.e. whether the initial budget amount has been revised)."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if budget set has been revised."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getIsRevised(){"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isRevised;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is to retrieve the utilisation status of the {@code Budget} object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * (i.e. whether the amount budget used has exceeded the budget amount set or revised)."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the budget set or revised has been exceeded."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean getIsOverBudget(){"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.isOverBudget;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns as a String a report on the budget utilisation status and budget balance."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String A report on the budget utilisation status and budget balance."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String printWithinBudget() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.isOverBudget){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return \"\\u26A0    $\" + String.format(\"%,14.2f\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Math.abs(this.budgetBalance)) + \" over budget.\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if(this.budgetBalance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return \"\\u26A1    $\" + String.format(\"%,14.2f\", 0.00) + \" right on budget!\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return \"\\u263A    $\" + String.format(\"%,14.2f\","
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Math.abs(this.budgetBalance)) + \" under budget.\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Budget} object as a string in a format"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * that is readable and re-constructable as a {@code Budget} object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Budget} object as a string in a format"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Budget} object."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"UnnecessaryLocalVariable\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d this.BUDGET_SET + \"/\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.budgetRevised + \"/\" +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.budgetUsed + \"/\" +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.budgetBalance + \"/\" +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isRevised + \"/\" +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isOverBudget;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method prints a report of the overall budget utilisation status and budget balance"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * across all {@code Budget} objects."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void printBudgetReport(){"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String budgetReport \u003d \"$\" + String.format(\"%,14.2f\", Math.abs(totalBudgetBalance));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isTotalOverBudget){"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.printf(\"%1$s%2$22s%n\", \"          a budget overrun of\", budgetReport);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if(totalBudgetBalance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.printf(\"%1$s%2$22s%n\", \"          a balanced budget balance of\", budgetReport);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.printf(\"%1$s%2$22s%n\", \"          a healthy budget balance of\", budgetReport);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the overall budget set"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * across all {@code Budget} objects."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The overall budget set across all {@code Budget} objects."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static double getTotalBudgetSet() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return totalBudgetSet;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the overall budget utilised"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * across all {@code Budget} objects."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The overall budget utilised across all {@code Budget} objects."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static double getTotalBudgetUsed() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return totalBudgetUsed;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the overall budget balance"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * across all {@code Budget} objects."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return double The overall budget balance across all {@code Budget} objects."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static double getTotalBudgetBalance() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return totalBudgetBalance;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the budget utilisation status"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * across all {@code Budget} objects."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the budget utilisation status is over-budget."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static boolean getIsTotalOverBudget() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return isTotalOverBudget;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 299
    }
  },
  {
    "path": "src/main/java/duke/notes/budget/PriceWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Controller for {@code AskPrice}. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class PriceWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Button confirmButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Label itemName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private String inputPrice;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"EmptyMethod\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void initialize() { }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void getPriceInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!this.userInput.getText().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Stage stage \u003d (Stage) this.userInput.getScene().getWindow();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            setInputPrice(this.userInput.getText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setItemName(String itemName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemName.setText(itemName + \"?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setInputPrice(String inputPrice){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.inputPrice \u003d inputPrice;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getInputPrice(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.inputPrice;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 51
    }
  },
  {
    "path": "src/main/java/duke/notes/event/Birthday.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Event} object that labels the event as a {@code Birthday} object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Birthday} object, the same requirements as the {@code Event} object is required."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Birthday extends Event {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Birthday} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Birthday}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Birthday(int serialNum, String description, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, startDate, endDate, addDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Birthday} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Birthday() { super(); }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Birthday} object from saved files."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Birthday}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Birthday} had concluded."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Birthday} had concluded."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Birthday} in minutes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Birthday(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone, Date startDate, Date endDate, long durationMinutes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, doneDate, isDone, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct an outstanding {@code Birthday} object from saved files."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Birthday}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Birthday} had concluded."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Birthday}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Birthday} in minutes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Birthday(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone, Date startDate, Date endDate, long durationMinutes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, isDone, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Birthday} object as a string in a format that is"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Birthday} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Birthday} object as a string in a format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Birthday} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Birthday/\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.startDate) + \"/\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.endDate) + \"/\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.getDurationMinutes();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Birthday} object as a {@code String}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Birthday} object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Birthday\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 113
    }
  },
  {
    "path": "src/main/java/duke/notes/event/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Note} object that records an event with a start date and time,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * end date and time as well as duration in minutes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create an {@code Event} object, a start date and time as well as end date and time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * must be provided in addition to the requirements by the {@code Note} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Class level members are available to keep count of the total outstanding and completed events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Event extends Note {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date startDate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date endDate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected long durationMinutes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static int eventsOutstanding;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static int eventsCompleted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Event} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Event}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Event}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Event}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Event(int serialNum, String description, Date startDate, Date endDate, Date addDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsOutstanding++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.durationMinutes \u003d (endDate.getTime() - this.startDate.getTime()) / 60000;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Event} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsOutstanding++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Event} object from saved files."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Event}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Event} had concluded."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Event} had concluded."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Event}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Event}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Event} in minutes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Event(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                 boolean isDone, Date startDate, Date endDate, long durationMinutes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addDate \u003d addDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.doneDate \u003d doneDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.durationMinutes \u003d durationMinutes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsCompleted++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct an outstanding {@code Event} object from saved files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Event}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Event} had concluded."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Event}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Event}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Event} in minutes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Event(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                 boolean isDone, Date startDate, Date endDate, long durationMinutes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addDate \u003d addDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.durationMinutes \u003d durationMinutes;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsOutstanding++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Event} object as completed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Event} had concluded."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(doneDate.before(this.startDate)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(doneDate, \"DoneB4Start\", this);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if(super.markAsDone(doneDate)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            eventsOutstanding--;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            eventsCompleted++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.printList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.printList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to reset the static variables of the {@code Event}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * class in the event of a program reset."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void resetStaticVariables() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsOutstanding \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        eventsCompleted \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete an {@code Event} object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingNote() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"    Event #\" + this.serialNum + \" was already done!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"\\t...deleting the event anyway.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            eventsCompleted--;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Noted! I\u0027ve deleted Event #\" + this.serialNum + \".\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            eventsOutstanding--;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to set or edit the start date and time of the {@code Event} object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Event}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setStartDate(Date startDate) throws DateException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(startDate.before(now)){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(startDate, \"StartB4Now\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(this.endDate !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(startDate.after(this.endDate)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    throw new DateException(startDate, \"StartAFEnd\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.durationMinutes \u003d (this.endDate.getTime() - startDate.getTime()) / 60000;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to set or edit the end date and time of the {@code Event} object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Event}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setEndDate(Date endDate) throws DateException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.startDate \u003d\u003d null){"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(endDate, \"NoStartDate\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(endDate.before(this.startDate)){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                throw new DateException(endDate, \"EndB4Start\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if(endDate.before(now)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                throw new DateException(endDate, \"EndB4Now\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.durationMinutes \u003d (endDate.getTime() - this.startDate.getTime()) / 60000;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the start date and time of the {@code Event} object."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Date The start date and time of the {@code Event}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Date getStartDate() { return (this.startDate); }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the end date and time of the {@code Event} object."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Date The end date and time of the {@code Event}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Date getEndDate() { return (this.endDate); }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public long getDurationMinutes() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.durationMinutes);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print detailed information of the {@code Event} object."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails(){"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            Duration : \" +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String.format(\"%,5d\", this.durationMinutes) +  \"mins\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            From     : \" +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.startDate));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            To       : \" +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.endDate));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the number of outstanding {@code Event} objects."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The number of outstanding {@code Event} objects."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static int getEventsOutstanding() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (eventsOutstanding);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the number of completed {@code Event} objects."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The number of completed {@code Event} objects."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static int getEventsCompleted() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (eventsCompleted);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Event} object as a string in a format that is"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Event} object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Event} object as a string in a format"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Event} object."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Event/\" +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.startDate) + \"/\" +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.endDate) + \"/\" +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.durationMinutes;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Event} object as a {@code String}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Event} object."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Event\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ABSTRACT METHODS----------------------------------"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the {@code Budget} object attached to the {@code Event} object, if any."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Event} object, if any."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 300
    }
  },
  {
    "path": "src/main/java/duke/notes/event/Wedding.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Event} object that labels the event as a {@code Wedding} object, and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * includes an attached {@code Budget} object reflecting the budget set."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Wedding} object, a budget amount for the cash gift must be set on top of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * the requirements of the {@code Event} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Wedding extends Event {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Budget itemBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Wedding} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Wedding} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Wedding} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Wedding(int serialNum, String description, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                   double itemBudget, Date addDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, startDate, endDate, addDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d new Budget(itemBudget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Wedding} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Wedding() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Wedding} object from saved files."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Wedding} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Wedding} object had concluded."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Wedding} object had concluded."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Wedding} object in minutes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Wedding} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Wedding(int serialNum, String description, Date addDate, Date doneDate, boolean isDone,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date startDate, Date endDate, long durationMinutes, Budget itemBudget)  {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, doneDate, isDone, startDate,  endDate,  durationMinutes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Wedding} object from saved files."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Wedding} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Wedding} object had concluded."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param startDate The start date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param endDate The end date and time of the {@code Wedding} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param durationMinutes The duration of the {@code Wedding} object in minutes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Wedding} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Wedding(int serialNum, String description, Date addDate, boolean isDone,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date startDate, Date endDate, long durationMinutes, Budget itemBudget) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, isDone, startDate,  endDate,  durationMinutes);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Wedding} object as completed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Wedding} object had concluded."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.itemBudget.setBudgetUsed(this.itemBudget.getBudgetRevised());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return super.markAsDone(doneDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete an {@code Wedding} object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * The attached {@code Budget} object and associated class-level members would be adjusted accordingly."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingNote() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super.deleteExistingNote();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget.deleteExistingBudget();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print detailed information of the {@code Wedding} object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            Duration : \" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String.format(\"%,5d\", this.durationMinutes) +  \"mins\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            From     : \" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.startDate));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            To       : \" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.endDate));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            Budget   : $\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String.format(\"%,14.2f\", this.getBudgetObject().getBUDGET_SET()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.itemBudget.getIsRevised()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Revised  : $\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetRevised()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Actual   : $\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetUsed()) +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" \" + this.getBudgetObject().printWithinBudget());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Wedding} object as a string in a format that is"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Wedding} object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Wedding} object as a string in a format"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Wedding} object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Wedding/\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.startDate) + \"/\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.endDate) + \"/\" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.getDurationMinutes() + \"/\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.itemBudget.getSaveText();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Wedding} object as a {@code String}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Wedding} object."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Wedding\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Budget} object attached to the {@code Wedding} object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Wedding} object."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() { return (this.itemBudget); }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 184
    }
  },
  {
    "path": "src/main/java/duke/notes/task/Bill.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Deadline} object that labels the deadline as a {@code Bill} object, and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * includes an attached {@code Budget} object reflecting the budget set."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Bill} object, a budget amount for the item must be set on top of"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * the requirements of the {@code Deadline} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Bill extends Deadline {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Budget itemBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Bill} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Bill}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Bill}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Bill}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Bill(int serialNum, String description, Date targetDate, double itemBudget,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Date addDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, targetDate, addDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d new Budget(itemBudget);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Bill} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Bill() { super(); }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Bill} object from saved files."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Bill} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Bill} object had concluded."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Bill} object had concluded."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Bill}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneAhead True if the {@code Bill} had concluded ahead of the target date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Bill} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Bill(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone, Date targetDate, boolean doneAhead, Budget itemBudget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, doneDate, isDone, targetDate, doneAhead);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Bill} object from saved files."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Bill} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Bill} object had concluded."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Bill}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneAhead True if the {@code Bill} had concluded ahead of the target date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Bill} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Bill(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone, Date targetDate, boolean doneAhead, Budget itemBudget) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, isDone, targetDate, doneAhead);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Bill} object as completed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Deadline} had concluded."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!this.isDone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            itemBudget.setBudgetUsed(itemBudget.getBudgetRevised());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return super.markAsDone(doneDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete an {@code Bill} object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * The attached {@code Budget} object and associated class-level members would be adjusted accordingly."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingNote() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super.deleteExistingNote();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget.deleteExistingBudget();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print detailed information of the {@code Bill} object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails(){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"            Deadline : \" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.targetDate));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.timesExtended \u003e 0){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"(\" + this.timesExtended +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" extensions)\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            Budget   : $\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String.format(\"%,14.2f\", this.getBudgetObject().getBUDGET_SET()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.itemBudget.getIsRevised()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Revised  : $\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetRevised()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Actual   : $\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetUsed()) +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" \" + this.getBudgetObject().printWithinBudget());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Bill} object as a string in a format that is"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Bill} object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Bill} object as a string in a format"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Bill} object."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Bill/\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.targetDate) + \"/\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.doneAhead + \"/\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.itemBudget.getSaveText();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Bill} object as a {@code String}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Bill} object."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Bill\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Budget} object attached to the {@code Bill} object."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Bill} object."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.itemBudget);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 183
    }
  },
  {
    "path": "src/main/java/duke/notes/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Task} object that includes a target date for which the (@code Deadline}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * object is to be completed. The (@code Deadline} object also includes performance measurements."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Deadline} object, a target date and time is required on top of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * the requirements of the {@code Task} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Date targetDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected boolean doneAhead \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected int timesExtended \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Deadline} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Deadline}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Deadline}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Deadline(int serialNum, String description, Date targetDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Deadline} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Deadline} object from saved files."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Deadline}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Deadline} had concluded."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Deadline} had concluded."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Deadline}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneAhead True if the {@code Deadline} had concluded ahead of the target date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Deadline(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone, Date targetDate, boolean doneAhead) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, doneDate, isDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.doneAhead \u003d doneAhead;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Deadline} object from saved files."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Deadline}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Deadline} had concluded."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Deadline}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneAhead True if the {@code Deadline} had concluded ahead of the target date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Deadline(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone, Date targetDate, boolean doneAhead) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, isDone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.doneAhead \u003d doneAhead;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Deadline} object as completed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Deadline} had concluded."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super.markAsDone(doneDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(doneDate.compareTo(this.targetDate) \u003c 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.doneAhead \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to set or edit the target date assigned to the {@code Deadline} object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param targetDate The target date and time of the {@code Deadline}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setTargetDate(Date targetDate) throws DateException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(targetDate.before(now)){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new DateException(targetDate, \"TargetDate\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.timesExtended++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print details of the {@code Deadline} object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails(){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"            Deadline : \" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.NOTE_TIME.format(this.targetDate));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.timesExtended \u003e 0){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\" (\" + this.timesExtended +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" extensions)\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate) + \" \" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    this.getDoneAhead());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Date} object reflecting"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * the target date of the {@code Deadline} object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Date The {@code Date} object reflecting the target date of the {@code Deadline} object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Date getTargetDate() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.targetDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the performance status of the {@code Deadline} object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the {@code Deadline} had concluded ahead of the target date."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getDoneAhead() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.doneAhead){"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return(\"\\u2611\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return(\"\\u2612\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Deadline} object as a string in a format that is"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Deadline} object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Deadline} object as a string in a format"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Deadline} object."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Deadline/\" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.targetDate) + \"/\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.doneAhead;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Deadline} object as a {@code String}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Deadline} object."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Deadline\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ABSTRACT METHODS----------------------------------"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the {@code Budget} object attached to the {@code Deadline} object, if any."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Deadline} object, if any."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 212
    }
  },
  {
    "path": "src/main/java/duke/notes/task/Shoplist.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.AskPrice;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Task} object that labels the todo task as a {@code Shoplist} object, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * includes an attached {@code Budget} object reflecting the budget set."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Shoplist} object, a budget amount for the item must be set on top of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * the requirements of the {@code Task} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Shoplist extends Task {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected Budget itemBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Shoplist} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Shoplist} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Shoplist} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Shoplist(int serialNum, String description, double itemBudget, Date addDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d new Budget(itemBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Shoplist} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Shoplist() { super(); }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Shoplist} object from saved files."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Shoplist} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Shoplist} object had concluded."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Shoplist} object had concluded."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Shoplist} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Shoplist(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone, Budget itemBudget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, doneDate, isDone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Shoplist} object from saved files."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Shoplist} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Shoplist} object had concluded."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param itemBudget The budget amount for the {@code Shoplist} object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Shoplist(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone, Budget itemBudget) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate, isDone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget \u003d itemBudget;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Shoplist} object as completed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Shoplist} object had concluded."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        double itemPrice;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!this.isDone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(Duke.isGUIMode) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                AskPrice askPrice \u003d new AskPrice(this.description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Stage popup \u003d new Stage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                askPrice.start(popup);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    itemPrice \u003d Double.parseDouble(askPrice.returnPrice());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"    Aborted!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    What is the price you paid for \" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        this.description + \"?\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                Scanner markDone \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                itemPrice \u003d Double.parseDouble(markDone.nextLine().substring(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.itemBudget.setBudgetUsed(itemPrice);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return super.markAsDone(doneDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete an {@code Shoplist} object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * The attached {@code Budget} object and associated class-level members would be adjusted accordingly."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingNote() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super.deleteExistingNote();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.itemBudget.deleteExistingBudget();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print detailed information of the {@code Shoplist} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printDetails(){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"            Budget   : $\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String.format(\"%,14.2f\", this.getBudgetObject().getBUDGET_SET()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.itemBudget.getIsRevised()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Revised  : $\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetRevised()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Actual   : $\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String.format(\"%,14.2f\", this.getBudgetObject().getBudgetUsed()) +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \" \" + this.getBudgetObject().printWithinBudget());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"            Done     : \" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    DukeUI.NOTE_TIME.format(this.doneDate));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Shoplist} object as a string in a format that is"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Shoplist} object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Shoplist} object as a string in a format"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Shoplist} object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Shoplist/\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone + \"/\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.itemBudget.getSaveText();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Shoplist} object as a {@code String}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Shoplist} object."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Shoplist\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the {@code Budget} object attached to the {@code Shoplist} object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Shoplist} object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (this.itemBudget);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 189
    }
  },
  {
    "path": "src/main/java/duke/notes/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.notes.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Note} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * To create a {@code Task} object, the same requirements as the {@code Note} object is required."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * Class level members are available to keep count of the total outstanding and completed events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class Task extends Note {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static int tasksOutstanding;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static int tasksCompleted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code Task} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Task}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Task(int serialNum, String description, Date addDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super(serialNum, description, addDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksOutstanding++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code Task} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksOutstanding++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a concluded {@code Task} object from saved files."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Task}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Task} had concluded."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Task} had concluded."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Task(int serialNum, String description, Date addDate, Date doneDate,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addDate \u003d addDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.doneDate \u003d doneDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksCompleted++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct an outstanding {@code Task} object from saved files."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param serialNum The serial number automatically assigned for identification purposes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param description The description of the {@code Task}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The date and time the note was added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isDone True if the {@code Task} had concluded."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Task(int serialNum, String description, Date addDate,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                boolean isDone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.serialNum \u003d serialNum;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.addDate \u003d addDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksOutstanding++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to mark an outstanding {@code Task} object as completed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param doneDate The date and time the {@code Task} had concluded."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean True if the operation is successful."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception DateException If there are errors in the formats or substance of {@code Date} objects."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public boolean markAsDone(Date doneDate) throws CommandException, DateException, InterruptedException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(super.markAsDone(doneDate)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            tasksOutstanding--;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            tasksCompleted++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.printList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.printList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to reset the static variables of the {@code Task}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * class in the event of a program reset."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void resetStaticVariables() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksOutstanding \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        tasksCompleted \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to delete an {@code Task} object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * Class-level members will be updated to reflect the change in completion status."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteExistingNote() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.print(\"    Note #\" + this.serialNum + \" was already done!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"\\t...deleting the task anyway.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            tasksCompleted--;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Noted! I\u0027ve deleted Note #\" + this.serialNum + \".\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            tasksOutstanding--;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS------------------------------------"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the number of outstanding {@code Task} objects."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The number of outstanding {@code Task} objects."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static int getTasksOutstanding() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (tasksOutstanding);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the number of completed {@code Task} objects."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The number of completed {@code Task} objects."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static int getTasksCompleted() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (tasksCompleted);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method exports the {@code Task} object as a string in a format that is"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Task} object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code Task} object as a string in a format"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * readable and re-constructable as a {@code Task} object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getSaveText() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String text \u003d \"Task/\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.serialNum + \"/\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.description + \"/\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.INPUT_TIME.format(this.addDate) + \"/\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.isDone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d text + \"/\" + DukeUI.INPUT_TIME.format(this.doneDate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the class name of the {@code Task} object as a {@code String}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The class name of the {@code Task} object."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getObjectClass() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"Task\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ABSTRACT METHODS----------------------------------"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the {@code Budget} object attached to the {@code Task} object, if any."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Budget The {@code Budget} object attached to the {@code Task} object, if any."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public Budget getBudgetObject() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 192
    }
  },
  {
    "path": "src/main/java/duke/parser/DateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the {@code Exception} object that addresses exceptions in operations"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * pertaining to {@code Date} objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DateException extends Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    Event event \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code DateException} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object that caused the exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param message The code indicating the reason behind the exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DateException(Date date, String message){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code DateException} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object that caused the exception."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param message The code indicating the reason behind the exception."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param event The {@code Event} object that is relevant to the {@code Date} object causing the exception."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DateException(Date date, String message, Event event){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method initialises a {@code DateException} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DateException(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns the code indicating the reason behind the exception."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The code indicating the reason behind the exception."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method prints an explanation specifying the {@code Date} object in question and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * reason behind the exception."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printExplanation()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    I understand what you meant by...\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.commandWrap(DukeUI.INPUT_TIME.format(date), 66);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        switch (this.message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"TargetDate\" -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the target date you are trying to set has already passed.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t send you back in time, yet.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please enter another date \u0026 time in the future.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"StartB4Now\" -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the Event Start Date-Time you are trying to set has already passed.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t send you back in time, yet.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please enter another date \u0026 time in the future.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"StartAFEnd\" -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the event start you are trying to set is after the event end.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t turn time backwards, yet.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please enter another date \u0026 time earlier than the event end.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"NoStartDate\" -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the event start date \u0026 time hasn\u0027t been set yet.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t predict the start of events, yet.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please set the Event Start Date-Time first, before the Event End Date-Time.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"EndB4Now\" -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the Event End Date-Time you are trying to set has already passed.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t send you back in time, yet.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please enter another date \u0026 time in the future.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"EndB4Start\" -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the event end you are trying to set is before the event start.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    I can\u0027t turn time backwards, yet.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please enter another date \u0026 time later than the event start.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"EventsClash\" -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the event you are trying to set clashes with:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.event.printList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please consider only either event to attend.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"DoneB4Start\" -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the event you are trying to set done hasn\u0027t even started.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.event.printList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please consider deleting the event instead.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"NoStart\" -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the note you are trying to edit does not have a start date.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There might have been an error in the command.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please identify the correct note or correct date to edit.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"NoEnd\" -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the note you are trying to edit does not have an end date.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There might have been an error in the command.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please identify the correct note or correct date to edit.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"NoTarget\" -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the note you are trying to edit does not have a target date.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There might have been an error in the command.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please identify the correct note or correct date to edit.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"NoDate\" -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    But the note you are trying to access does not have dates.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There might have been an error in the command.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    Please identify the correct note to access.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            default -\u003e System.out.println(\"    \" + this.message);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 143
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An interface that read and understand user inputs representing dates and times."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public interface DateParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_DAYM \u003d new SimpleDateFormat(\"dd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_MONTH \u003d new SimpleDateFormat(\"MMM\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_YEAR \u003d new SimpleDateFormat(\"yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_DAYW_FULL \u003d new SimpleDateFormat(\"EEEEE\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_DAYW_PART \u003d new SimpleDateFormat(\"E\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat UNDERSTOOD_TIME \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForDayW(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date ytd \u003d new Date(now.getTime() - 86400000);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date tmr \u003d new Date(now.getTime() + 86400000);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] today \u003d {\"TODAY\", \"TDY\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] yesterday \u003d {\"YESTERDAY\", \"YTD\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] tomorrow \u003d {\"TOMORROW\", \"TMR\", \"TML\", \"TMRW\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(String word: today) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.toUpperCase().equals(word)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(now));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(now));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(now));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(String word: yesterday) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.toUpperCase().equals(word)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(ytd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(ytd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(ytd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(String word: tomorrow) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.toUpperCase().equals(word)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(tmr));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(tmr));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(tmr));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (int i \u003d 1; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date next \u003d new Date(now.getTime() + (i * 86400000));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String nextDay_Full \u003d UNDERSTOOD_DAYW_FULL.format(next).toUpperCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String nextDay_Part \u003d UNDERSTOOD_DAYW_PART.format(next).toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.toUpperCase().equals(nextDay_Full) || input.toUpperCase().equals(nextDay_Part)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(next));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(next));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(next));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific day in the month."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForDayM(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"1ST\", \"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"2ND\", \"2\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"3RD\", \"3\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"1TH\", \"1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"2TH\", \"2\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"3TH\", \"3\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"4TH\", \"4\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"5TH\", \"5\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"6TH\", \"6\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"7TH\", \"7\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"8TH\", \"8\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"9TH\", \"9\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"0TH\", \"0\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (Integer.parseInt(input) \u003c\u003d 31 \u0026\u0026 Integer.parseInt(input) \u003e\u003d 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (Exception ignored) { }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific month in the year."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForMonth(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] months \u003d {\"MMMMM\", \"MMM\", \"MM\"};"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cSimpleDateFormat\u003e formats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (String month : months) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            formats.add(new SimpleDateFormat(month));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (input.toUpperCase().equals(\"THIS MONTH\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(now));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(now));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (SimpleDateFormat format : formats) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(format.parse(input)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific year."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForYear(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"\u0027\", \"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"yy\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (input.toUpperCase().equals(\"THIS YEAR\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(now));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(format.parse(input)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific day in a specific month."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForDayMonth(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"-\", \"~\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\".\", \"~\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"\u0027\", \"~\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] days \u003d {\"dd\"};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] months \u003d {\"MM\", \"MMM\", \"MMMMM\"};"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cSimpleDateFormat\u003e formats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (String month : months) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                formats.add(new SimpleDateFormat(day + \"~\" + month));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if (!month.equals(\"MM\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    formats.add(new SimpleDateFormat(month + \"~\" + day));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    formats.add(new SimpleDateFormat(month + day));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    formats.add(new SimpleDateFormat(day + month));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (SimpleDateFormat format : formats) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(format.parse(input)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(format.parse(input)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific month in a specific year."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForMonthYear(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"-\", \"~\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\".\", \"~\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"\u0027\", \"~\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] months \u003d {\"MMM\", \"MMMMM\"};"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] years \u003d {\"yy\"};"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cSimpleDateFormat\u003e formats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (String month : months) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for (String year : years) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                formats.add(new SimpleDateFormat(month + \"~\" + year));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                formats.add(new SimpleDateFormat(year + \"~\" + month));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (SimpleDateFormat format : formats) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(format.parse(input)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(format.parse(input)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific date in full."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForFullDate(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"-\", \"~\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\".\", \"~\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"\u0027\", \"~\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"/\", \"~\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] days \u003d {\"dd\"};"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] months \u003d {\"MM\", \"MMM\", \"MMMMM\"};"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] years \u003d {\"yy\"};"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cSimpleDateFormat\u003e formats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (String month: months) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(String year: years) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (String day: days) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    formats.add(new SimpleDateFormat(day + \"~\" + month + \"~\" + year));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    formats.add(new SimpleDateFormat(year + \"~\" + month + \"~\" + day));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (!month.equals(\"MM\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(month + day + \"~\" + year));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(year + \"~\" + month + day));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(day + \"~\" + month + year));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(month + year + \"~\" + day));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(day + month + \"~\" + year));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(year + \"~\" + day + month));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        formats.add(new SimpleDateFormat(day + month + year));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (SimpleDateFormat format : formats) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"day\", UNDERSTOOD_DAYM.format(format.parse(input)));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"month\", UNDERSTOOD_MONTH.format(format.parse(input)));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"year\", UNDERSTOOD_YEAR.format(format.parse(input)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand any textual input that could indicate a specific time."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param understoodDate The {@code HashMap} object used to store the results."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return boolean Whether the understanding has been successful."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static boolean checkForTime(String input, HashMap\u003cString, String\u003e understoodDate) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(input \u003d\u003d null) { return false; }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"-\", \"~\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\".\", \"~\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\"\u0027\", \"~\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        input \u003d input.replace(\":\", \"~\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] times \u003d {\"hh~mma\", \"hha\", \"HHmm\u0027HS\u0027\", \"HHmm\u0027H\u0027\", \"HH~mm\"};"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cSimpleDateFormat\u003e formats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(String time: times) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            formats.add(new SimpleDateFormat(time));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (SimpleDateFormat format: formats) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                understoodDate.replace(\"time\", UNDERSTOOD_TIME.format(format.parse(input)));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (ParseException ignored) { }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to understand textual input representing dates and times."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param userInput The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return Date The understood date and time in the format of a {@code Date} object."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static Date understandDateInput(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date now \u003d new Date();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date understoodDateTime;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        HashMap\u003cString, String\u003e dateHash \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dateHash.put(\"day\", null);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dateHash.put(\"month\", null);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dateHash.put(\"year\", null);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        dateHash.put(\"time\", null);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String[] userInputs \u003d userInput.toUpperCase().split(\" \");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cString\u003e inputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(String input: userInputs){ inputs.add(input.trim()); }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (checkForDayW(input, dateHash)) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                inputs.remove(i);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"day\") \u003d\u003d null \u0026\u0026 dateHash.get(\"month\") \u003d\u003d null \u0026\u0026 dateHash.get(\"year\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForFullDate(input, dateHash)) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if (dateHash.get(\"day\") \u003d\u003d null \u0026\u0026 dateHash.get(\"month\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForDayMonth(input, dateHash)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"month\") \u003d\u003d null \u0026\u0026 dateHash.get(\"year\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForMonthYear(input, dateHash)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"day\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForDayM(input, dateHash)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"month\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForMonth(input, dateHash)) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (checkForTime(input, dateHash)) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                inputs.remove(i);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"year\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            for(int i\u003d0; i\u003cinputs.size(); i++) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String input \u003d inputs.get(i);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(checkForYear(input, dateHash)) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.remove(i);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"year\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dateHash.replace(\"year\", UNDERSTOOD_YEAR.format(now));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date cutOffMin \u003d new Date(now.getTime() - ((long)90*86400000));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date cutOffMax \u003d new Date(now.getTime() + ((long)276*86400000));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String dateString \u003d dateHash.get(\"day\") + \"-\" + dateHash.get(\"month\") + \"-\" +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    dateHash.get(\"year\");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date testDate \u003d DukeUI.INPUT_DATE.parse(dateString);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(testDate.before(cutOffMin)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateHash.replace(\"year\", Integer.toString((Integer.parseInt(UNDERSTOOD_YEAR.format(now)) + 1)));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if(testDate.after(cutOffMax)) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateHash.replace(\"year\", Integer.toString((Integer.parseInt(UNDERSTOOD_YEAR.format(now)) - 1)));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(dateHash.get(\"time\") \u003d\u003d null) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dateHash.replace(\"time\", \"00:00\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String dateTimeString \u003d dateHash.get(\"day\") + \"-\" + dateHash.get(\"month\") + \"-\" +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                dateHash.get(\"year\") + \" \" + dateHash.get(\"time\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            understoodDateTime \u003d DukeUI.INPUT_TIME.parse(dateTimeString);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (ParseException e){"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new CommandException(\"I can\u0027t understand the date and time you are trying to specify.\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return understoodDateTime;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 462
    }
  },
  {
    "path": "src/main/java/duke/parser/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.NoteType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An interface that extends the (@code DateParser} interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * (@code DukeParser} makes sense of user inputs and creates the appropriate {@code DukeCommand} objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public interface DukeParser extends DateParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to create the appropriate {@code DukeCommand} object created based on the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return DukeCommand The appropriate {@code DukeCommand} object created based on the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors reading from the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static DukeCommand readCommand(String input) throws CommandException, ParseException, PrefixException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assert !input.isEmpty() \u0026\u0026 !input.isBlank() : \"User Input cannot be empty or blank.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cString\u003e inputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.startsWith(\"#\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String[] inputTokens \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String cmdType \u003d inputTokens[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                switch (CmdType.getKey(cmdType).toString()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"AUTOSAVE\" -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new AutoSaveToggleCommand(cmdType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"COMMANDS\" -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new InfoCommand(cmdType, \"all\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            String infoType \u003d inputTokens[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(infoType.equals(\"gen\") || infoType.equals(\"new\") || infoType.equals(\"info\") ||"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    infoType.equals(\"mgmt\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                return new InfoCommand(cmdType, infoType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"LISTBILLS\", \"LISTBIRTHDAYS\", \"LISTBUDGETS\", \"LISTDEADLINES\", \"LISTEVENTS\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            \"LISTSHOPLISTS\", \"LISTTASKS\", \"LISTWEDDINGS\", \"LISTNOTES\" -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String noteFilter \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String textFilter \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date dateFilter \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date addedFilter \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ListCommand(cmdType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/nf\")){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/nf\", 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                noteFilter \u003d listTokens[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                if(!noteFilter.equals(\"O\") \u0026\u0026 !noteFilter.equals(\"C\")){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    throw new CommandException(\"There seems to be an error with the \" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                            \"Note Filter specified.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/with\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/with\", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                textFilter \u003d (listTokens[0].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/on\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                if(CmdType.getCOMMAND(cmdType).equals(\"#listshoplists\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    throw new CommandException(\"Date filters are incompatible with \" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                            cmdType + \".\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/on\", 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                dateFilter \u003d DateParser.understandDateInput(listTokens[0].trim() + \" 00:00\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/added\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/added\", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                addedFilter \u003d DateParser.understandDateInput(listTokens[0].trim() + \" 00:00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(noteFilter \u003d\u003d null \u0026\u0026 textFilter \u003d\u003d null \u0026\u0026 dateFilter \u003d\u003d null \u0026\u0026 addedFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                        cmdType + \".\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ListCommand(cmdType, noteFilter, textFilter, dateFilter, addedFilter,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    CmdType.getTIMELINE_DAYS(cmdType));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"LISTNXT24\", \"LISTNXT48\", \"LISTNXT72\" -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String noteFilter \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String textFilter \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date dateFilter \u003d new Date();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date addedFilter \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ListCommand(cmdType, dateFilter, CmdType.getTIMELINE_DAYS(cmdType));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/nf\")){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/nf\", 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                noteFilter \u003d listTokens[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                if(!noteFilter.equals(\"O\") \u0026\u0026 !noteFilter.equals(\"C\")){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    throw new CommandException(\"There seems to be an error with the \" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                            \"Note Filter specified.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/with\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/with\", 2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                textFilter \u003d (listTokens[0].trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/on\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"Date filters are redundant with \" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                        cmdType + \".\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(input.contains(\"/added\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/added\", 2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                addedFilter \u003d DateParser.understandDateInput(listTokens[0].trim() + \" 00:00\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(noteFilter \u003d\u003d null \u0026\u0026 textFilter \u003d\u003d null \u0026\u0026 addedFilter \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                        cmdType + \".\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ListCommand(cmdType, noteFilter, textFilter, dateFilter, addedFilter,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    CmdType.getTIMELINE_DAYS(cmdType));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"DELETE\" -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        ArrayList\u003cInteger\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] deleteTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                deleteTokens \u003d deleteTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                deleteTokens \u003d deleteTokens[0].trim().split(\"\u0026\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                for (String deleteToken : deleteTokens) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    toDelete.add(Integer.parseInt(deleteToken.trim()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                return new DeleteCommand(cmdType, toDelete);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note to delete was not specified.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EDITEND\" -\u003e {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int targetNote;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String dateToChange \u003d \"end\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date newDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                targetNote \u003d Integer.parseInt(editTokens[0].trim());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note to edit was not specified.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/to\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/to\", 2);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                newDate \u003d DateParser.understandDateInput(listTokens[0].trim());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The new Event end date-time was not specified.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new EditDateCommand(cmdType, targetNote, dateToChange, newDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EDITSTART\" -\u003e {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int targetNote;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String dateToChange \u003d \"start\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date newDate;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                targetNote \u003d Integer.parseInt(editTokens[0].trim());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note to edit was not specified.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/to\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/to\", 2);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                newDate \u003d DateParser.understandDateInput(listTokens[0].trim());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The new Event start date-time was not specified.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new EditDateCommand(cmdType, targetNote, dateToChange, newDate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EDITTARGET\" -\u003e {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int targetNote;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String dateToChange \u003d \"target\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date newDate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                targetNote \u003d Integer.parseInt(editTokens[0].trim());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note to edit was not specified.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/to\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] listTokens \u003d input.split(\"/to\", 2);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                listTokens \u003d listTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                newDate \u003d DateParser.understandDateInput(listTokens[0].trim());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The new Deadline target date-time was not specified.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new EditDateCommand(cmdType, targetNote, dateToChange, newDate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EDITDESC\" -\u003e {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int targetNote;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        String newDescription;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                targetNote \u003d Integer.parseInt(editTokens[0].trim());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note to edit was not specified.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/to\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/to\", 2);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                newDescription \u003d editTokens[0].trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The new description was not specified.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new EditDescriptionCommand(cmdType, targetNote, newDescription);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EXTDLINE\" -\u003e {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int targetNote;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        long milliSecToExtend \u003d 0;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                targetNote \u003d Integer.parseInt(editTokens[0].trim());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Deadline to extend was not specified.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/d\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/d\", 2);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                milliSecToExtend \u003d milliSecToExtend + (Integer.parseInt(editTokens[0].trim())*86400000);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/h\")) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/h\", 2);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                milliSecToExtend \u003d milliSecToExtend + (Integer.parseInt(editTokens[0].trim())*3600000);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/m\")) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] editTokens \u003d input.split(\"/m\", 2);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                editTokens \u003d editTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                milliSecToExtend \u003d milliSecToExtend + (Integer.parseInt(editTokens[0].trim())*60000);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if(milliSecToExtend \u003d\u003d 0) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The duration to extend the Deadline was not specified.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ExtendDeadlineCommand(cmdType, targetNote, milliSecToExtend);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EXITDUKE\" -\u003e {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new ExitCommand(cmdType);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"MARKDONE\" -\u003e {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        ArrayList\u003cInteger\u003e toMarkDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/n\")) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] doneTokens \u003d input.split(\"/n\", 2);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                doneTokens \u003d doneTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                doneTokens \u003d doneTokens[0].trim().split(\"\u0026\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                for (String doneToken : doneTokens) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    toMarkDone.add(Integer.parseInt(doneToken.trim()));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                return new MarkDoneCommand(cmdType, toMarkDone);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                        cmdType + \".\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"SAVEDUKE\" -\u003e {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new SaveCommand(cmdType);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"TRANSFER\" -\u003e {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int from;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        int to;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        double amount;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be insufficient attributes behind \" +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/from\")) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] transferTokens \u003d input.split(\"/from\", 2);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                transferTokens \u003d transferTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                from \u003d Integer.parseInt(transferTokens[0].trim());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note whose Budget to transfer from was not specified.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/to\")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] transferTokens \u003d input.split(\"/to\", 2);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                transferTokens \u003d transferTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                to \u003d Integer.parseInt(transferTokens[0].trim());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Note whose Budget to transfer to was not specified.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            if (input.contains(\"/for $\")) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                String[] transferTokens \u003d input.split(\"/for \\\\$\", 2);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                transferTokens \u003d transferTokens[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                amount \u003d Double.parseDouble(transferTokens[0].trim());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                if(amount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    throw new CommandException(\"The dollar amount specified must be more than zero.\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                throw new CommandException(\"The Budget amount to transfer was not specified.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new TransferCommand(cmdType, from, to, amount);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"UNDO\" -\u003e {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new UndoCommand(cmdType);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"WIPEDUKE\" -\u003e {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            return new WipeCommand(cmdType);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            throw new CommandException(\"There seems to be invalid characters behind \" +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    cmdType + \".\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    default -\u003e throw new CommandException(\"It seems to be an invalid Generic Command.\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else if (input.startsWith(\"@\")) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String[] delimiters;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String[] inputTokens \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                String noteType \u003d inputTokens[0];"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                inputs.add(noteType);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                switch (NoteType.getKey(noteType).toString()) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"BILL\" -\u003e delimiters \u003d new String[]{\"/by\", \"/for \\\\$\"};"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"BIRTHDAY\", \"WEDDING\" -\u003e delimiters \u003d new String[]{\"/from\", \"/to\", \"/for \\\\$\"};"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"DEADLINE\" -\u003e delimiters \u003d new String[]{\"/by\"};"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"EVENT\" -\u003e delimiters \u003d new String[]{\"/from\", \"/to\"};"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"SHOPLIST\" -\u003e delimiters \u003d new String[]{\"/for \\\\$\"};"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    case \"TASK\" -\u003e delimiters \u003d new String[]{};"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    default -\u003e throw new CommandException(\"It seems to be an invalid New Note Command.\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (String delimiter : delimiters) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    input \u003d inputTokens[1];"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputTokens \u003d input.split(delimiter, 2);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    inputs.add(inputTokens[0].trim());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                inputs.add(inputTokens[1].trim());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return new NewNoteCommand(noteType, inputs);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                throw new PrefixException();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new CommandException(\"There seems to be insufficient attributes.\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 446
    }
  },
  {
    "path": "src/main/java/duke/parser/PrefixException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An extension of the Exception object that addresses exceptions in user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class PrefixException extends Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs a {@code PrefixException} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public PrefixException(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method prints an explanation specifying the user input in question and reason behind the exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The user input that caused the exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void printExplanation(String input) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    I don\u0027t understand what you mean by...\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.commandWrap(input, 66);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    I\u0027d love to hold a conversation, but I can\u0027t, yet.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Please include the required command prefix to activate a command.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.suggestCommands();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeUI.printDivider();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 36
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An object that holds all the {@code Note} objects in {@code Duke} for quick access."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code DukeList} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param notes The ArrayList of {@code Note} objects to be held."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeList(ArrayList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code DukeList} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to access the ArrayList of {@code Note} objects held."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return ArrayList\u003cNote\u003e The ArrayList of {@code Note} objects held."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ArrayList\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return this.notes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to replace the ArrayList of {@code Note} held in the {@code DukeList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param newNotes The new ArrayList of {@code Note} objects to be held."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void replaceNotes(ArrayList\u003cNote\u003e newNotes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.notes \u003d newNotes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 53
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Birthday;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Wedding;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Bill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Shoplist;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An object that manages the storage of the {@code DukeList} object in saved files."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private File lastSave \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private File last2Save \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private File last3Save \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //CONSTRUCTORS--------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to construct a {@code DukeStorage} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param path The path to the saved files in the hard drive."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeStorage(String path)  {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        int lastSlash \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (int i \u003d 0; i \u003c path.length(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (path.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                lastSlash \u003d i;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        File fileDir \u003d new File(path.substring(0, lastSlash));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!fileDir.exists()){ //noinspection ResultOfMethodCallIgnored"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fileDir.mkdirs(); }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.file \u003d new File(path);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!this.file.isFile()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            try { //noinspection ResultOfMethodCallIgnored"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                this.file.createNewFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.println(\"    There has been a storage error. Saving is not available...\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                DukeUI.printDivider();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.lastSave \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.last2Save \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.last3Save \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to initialise a {@code DukeStorage} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public DukeStorage(){}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //GET STATEMENTS----------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to retrieve the path to the saved files in the hard drive."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The path to the saved files in the hard drive."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public String getPath() { return this.path; }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to undo previous save operations by reloading the last version"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * of the {@code DukeList} object in the hard drive."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return int The number of archived {@code DukeList} objects that could be reloaded."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws IOException If the saved file could not be found via the file path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws ParseException If the saved file could not be read and understood."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public int revertToLastSave(DukeList dukeNotes) throws IOException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.lastSave \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if(this.last2Save \u003d\u003d null){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            copyFile(this.lastSave, this.file);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.lastSave \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.replaceNotes(readFromFile());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else if(this.last3Save \u003d\u003d null){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            copyFile(this.lastSave, this.file);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.lastSave \u003d this.last2Save;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.last2Save \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.replaceNotes(readFromFile());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            copyFile(this.lastSave, this.file);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.lastSave \u003d this.last2Save;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.last2Save \u003d this.last3Save;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            this.last3Save \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            dukeNotes.replaceNotes(readFromFile());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //SET STATEMENTS----------------------------------"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to replace the primary file for the saving of the {@code DukeList} object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param file The new file to be used to save the {@code DukeList} object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void setFile(File file) { this.file \u003d file; }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"ResultOfMethodCallIgnored\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void deleteFiles() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.file !\u003d null) { this.file.delete(); }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.lastSave !\u003d null) { this.lastSave.delete(); }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.last2Save !\u003d null) { this.last2Save.delete(); }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(this.last3Save !\u003d null) { this.last3Save.delete(); }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //ENCODE \u0026 DECODE METHODS---------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to encode a {@code String} of text using Base64."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param text The text to be encoded using Base64."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code String} representing the Base64 encoded text."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String encodeText(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Base64.Encoder encoder \u003d Base64.getEncoder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        byte[] byteArray \u003d text.getBytes(StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return encoder.encodeToString(byteArray);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to decode a {@code String} of Base64 encoded text."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param text The Base64 encoded text to be decoded."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The {@code String} of text decoded from the Base64 encoded text."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String decodeText(String text) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Base64.Decoder decoder \u003d Base64.getDecoder();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        byte[] byteArray \u003d decoder.decode(text);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return new String(byteArray, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //WRITE METHODS-------------------------------------"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to write to file, the ArrayList of {@code Note} objects held by the {@code DukeList} object."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param dukeNotes The {@code DukeList} object to be written to file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws IOException If the saved file could not be found via the file path."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void writeToFile(DukeList dukeNotes) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.path, false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(Note note : dukeNotes.getNotes()){"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String text \u003d note.getSaveText();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            text \u003d encodeText(text) + \"\\n\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fw.write(text);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to archive the current version the {@code DukeList} object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * before it is overwritten by a new save."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws IOException If the saved file could not be found via the file path."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public void archiveToFile() throws IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.last3Save \u003d this.last2Save;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.last2Save \u003d this.lastSave;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date archiveDate \u003d new Date();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        int lastSlash \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for (int i \u003d 0; i \u003c path.length(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (path.charAt(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                lastSlash \u003d i;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String archivePath \u003d this.path.substring(0, lastSlash) +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \"/archive_\" + archiveDate.getTime() + \".txt\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.lastSave \u003d new File(archivePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        copyFile(this.file, this.lastSave);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to copy data from the file holding a previous version the {@code DukeList} object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * to the primary file holding the {@code DukeList} object in memory."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param fromFile The file holding a previous version the {@code DukeList} object."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param toFile The primary file holding the {@code DukeList} object in memory."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws IOException If the saved file could not be found via the file path."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private void copyFile(File fromFile, File toFile) throws IOException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scanner read \u003d new Scanner(fromFile);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(toFile, false);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while(read.hasNext()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fw.write(read.nextLine() + \"\\n\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //LOAD METHODS--------------------------------------"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to read data from saved files and reconstruct the {@code Note} objects,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * thereafter holding them in an ArrayList."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return ArrayList\u003cNote\u003e The ArrayList of reconstructed {@code Note} objects from the saved file."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws FileNotFoundException If the saved file could not be found via the file path."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @throws ParseException If there are errors reading from saved files."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public ArrayList\u003cNote\u003e readFromFile() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ArrayList\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Note note \u003d null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scanner read \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(!read.hasNext()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Duke.resetStaticVariables();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while (read.hasNext()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String nextLine \u003d read.nextLine();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            nextLine \u003d decodeText(nextLine);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String[] readIndexes \u003d nextLine.split(\"/\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            switch (readIndexes[0]) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Bill\" -\u003e {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date targetDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean doneAhead \u003d Boolean.parseBoolean(readIndexes[6]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetSet \u003d Double.parseDouble(readIndexes[7]);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetRevised \u003d Double.parseDouble(readIndexes[8]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetUsed \u003d Double.parseDouble(readIndexes[9]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetBalance \u003d Double.parseDouble(readIndexes[10]);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isRevised \u003d Boolean.parseBoolean(readIndexes[11]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isOverBudget \u003d Boolean.parseBoolean(readIndexes[12]);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Budget itemBudget \u003d new Budget(budgetSet, budgetRevised, budgetUsed,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            budgetBalance, isRevised, isOverBudget);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[13]);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Bill(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, targetDate, doneAhead, itemBudget);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Bill(serialNum, description, addDate,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, targetDate, doneAhead, itemBudget);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Birthday\" -\u003e {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date startDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date endDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[6]);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    long durationMinutes \u003d Long.parseLong(readIndexes[7]);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[8]);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Birthday(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Birthday(serialNum, description, addDate,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Deadline\" -\u003e {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date targetDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean doneAhead \u003d Boolean.parseBoolean(readIndexes[6]);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[7]);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Deadline(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, targetDate, doneAhead);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Deadline(serialNum, description, addDate,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, targetDate, doneAhead);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Event\" -\u003e {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date startDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date endDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[6]);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    long durationMinutes \u003d Long.parseLong(readIndexes[7]);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[8]);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Event(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Event(serialNum, description, addDate,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, startDate, endDate, durationMinutes);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Shoplist\" -\u003e {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetSet \u003d Double.parseDouble(readIndexes[5]);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetRevised \u003d Double.parseDouble(readIndexes[6]);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetUsed \u003d Double.parseDouble(readIndexes[7]);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetBalance \u003d Double.parseDouble(readIndexes[8]);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isRevised \u003d Boolean.parseBoolean(readIndexes[9]);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isOverBudget \u003d Boolean.parseBoolean(readIndexes[10]);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Budget itemBudget \u003d new Budget(budgetSet, budgetRevised, budgetUsed,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            budgetBalance, isRevised, isOverBudget);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[11]);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Shoplist(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, itemBudget);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Shoplist(serialNum, description, addDate,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, itemBudget);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Task\" -\u003e {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Task(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Task(serialNum, description, addDate,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                case \"Wedding\" -\u003e {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    int serialNum \u003d Integer.parseInt(readIndexes[1]);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    String description \u003d readIndexes[2];"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date addDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[3]);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isDone \u003d Boolean.parseBoolean(readIndexes[4]);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date startDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[5]);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Date endDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[6]);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    long durationMinutes \u003d Long.parseLong(readIndexes[7]);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetSet \u003d Double.parseDouble(readIndexes[8]);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetRevised \u003d Double.parseDouble(readIndexes[9]);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetUsed \u003d Double.parseDouble(readIndexes[10]);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    double budgetBalance \u003d Double.parseDouble(readIndexes[11]);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isRevised \u003d Boolean.parseBoolean(readIndexes[12]);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    boolean isOverBudget \u003d Boolean.parseBoolean(readIndexes[13]);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    Budget itemBudget \u003d new Budget(budgetSet, budgetRevised, budgetUsed,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            budgetBalance, isRevised, isOverBudget);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if(isDone) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        Date doneDate \u003d DukeUI.INPUT_TIME.parse(readIndexes[14]);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Wedding(serialNum, description, addDate, doneDate,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                true, startDate, endDate, durationMinutes, itemBudget);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        note \u003d new Wedding(serialNum, description, addDate,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                false, startDate, endDate, durationMinutes, itemBudget);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            notes.add(note);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 410
    }
  },
  {
    "path": "src/main/java/duke/ui/DukeListBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.DeleteConfirmWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeListBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private DukeListBox(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DeleteConfirmWindow.class.getResource(\"/view/ListBox.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.text.setText(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static DukeListBox getDukeList(String text) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return new DukeListBox(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/DukeUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CmdType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.NoteType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * An interface that sets out all the formats pertaining to textual user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public interface DukeUI {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //VARIABLES-----------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //Characters to encase Duke\u0027s dialogue"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_DIVIDER \u003d \"    ----------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //Date formats to be used by Duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat NOTE_TIME \u003d new SimpleDateFormat(\"dd-MMM-yyyy (E), hh:mm a\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat NOTE_DATE \u003d new SimpleDateFormat(\"dd-MMM-yyyy (E)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat DATE_TODAY \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat DAY_TODAY \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat YEAR_TODAY \u003d new SimpleDateFormat(\"yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat INPUT_TIME \u003d new SimpleDateFormat(\"dd-MMM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SimpleDateFormat INPUT_DATE \u003d new SimpleDateFormat(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //Project Duke\u0027s opening logo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDDDDDDDD     UUU      UUU  KKK      KKK  EEEEEEEEEEEE            A0177803Y \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDDDDDDDDD    UUU      UUU  KKK     KKK   EEEEEEEEEEE                       \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD     DDD   UUU      UUU  KKK    KKK    EEE                               \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD      DDD  UUU      UUU  KKK   KKK     EEEEEEEEEE                        \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD      DDD  UUU      UUU  KKK  KKK      EEEEEEEEEE                        \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD      DDD  UUU      UUU  KKKKKKK       EEE                               \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD      DDD  UUU      UUU  KKKKKK        EEE           NOTE KEEPER,        \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDD     DDD   UUU      UUU  KKK KKKK      EEE           TASK MANAGER,       \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDDDDDDDDD     UUUUUUUUUU   KKK   KKKK    EEEEEEEEEEE   BUDGET ASSISTANT,   \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d  DDDDDDDDD       UUUUUUUU    KKK     KKKK  EEEEEEEEEEEE  AND MORE...!        \u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //List of commands for Duke"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_COMMANDS \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        \\u27A4 Perform Generic Operations    \\u279C Enter #commands gen\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        \\u27A4 Create New Notes              \\u279C Enter #commands new\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        \\u27A4 Extract Information           \\u279C Enter #commands info\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        \\u27A4 Manage Existing Notes         \\u279C Enter #commands mgmt\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_GENERIC \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        *** Perform Generic Operations ***\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #autosave      / #ats \u003e\u003e\u003e Toggle auto-save on or off.\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #commands      / #cmd \u003e\u003e\u003e List all available Duke\u0027s commands.\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #exitduke      / #xit \u003e\u003e\u003e Exit Project Duke.\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #saveduke      / #sav \u003e\u003e\u003e Save Notes to file and archive the last.\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #undo          / #und \u003e\u003e\u003e Undo the last save operation.\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #wipeduke      / #wpe \u003e\u003e\u003e Wipe all of Duke\u0027s memories and files.\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_NEW \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        *** Create New Notes ***\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              --------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              Attributes Available:\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Budget            --\u003e    /for $   \u003c$X.xx\u003e\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Description       --\u003e             \u003cDescription\u003e\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               End Date-Time     --\u003e    /to      \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Start Date-Time   --\u003e    /from    \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Target Date-Time  --\u003e    /by      \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              --------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @bill          / @bl  \u003e\u003e\u003e Add a new bill payment.\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Target Date-Time  \\u23E9  Budget\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @birthday      / @bd  \u003e\u003e\u003e Add a new birthday event.\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Start Date-Time  \\u23E9  End Date-Time  \\u23E9  Budget\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @deadline      / @dl  \u003e\u003e\u003e Add a new todo task with a deadline.\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Target Date-Time\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @event         / @ev  \u003e\u003e\u003e Add a new event.\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Start Date-Time  \\u23E9  End Date-Time\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @shoplist      / @sl  \u003e\u003e\u003e Add a new shopping list item.\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Budget\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @task          / @tk  \u003e\u003e\u003e Add a new task without a deadline.\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        @wedding       / @wd  \u003e\u003e\u003e Add a new wedding event.\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes in Order of:\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Description  \\u23E9  Start Date-Time  \\u23E9  End Date-Time  \\u23E9  Budget\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_INFO \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        *** Extract Information ***\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              --------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              Filters Available:\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Completion Status --\u003e    /nf      \u003cO\u003e or \u003cC\u003e\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"                                                      O for Outstanding\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"                                                      C for Completed\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Added Date        --\u003e    /added   \u003cdd-MMM-yyyy\u003e\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Start/Target Date --\u003e    /on      \u003cdd-MMM-yyyy\u003e\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"               Description Text  --\u003e    /with    \u003cSearch Text\u003e\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              --------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"                   \\u2714 Required     \\u271C Optional     \\u2718 Not Available\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              --------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listbills     / #lbp \u003e\u003e\u003e List bill payments.\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listbirthdays / #lbd \u003e\u003e\u003e List birthdays.\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listbudgets   / #lbg \u003e\u003e\u003e List budgets set.\\n\" +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listdeadlines / #ldl \u003e\u003e\u003e List deadlines.\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listevents    / #lev \u003e\u003e\u003e List events.\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listnotes     / #lnt \u003e\u003e\u003e List notes.\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listnxt24     / #n24 \u003e\u003e\u003e List deadlines \u0026 events in 24 hours.\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2718] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listnxt48     / #n48 \u003e\u003e\u003e List deadlines \u0026 events in 48 hours.\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2718] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listnxt72     / #n72 \u003e\u003e\u003e List deadlines \u0026 events in 72 hours.\\n\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2718] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listshoplists / #lsl \u003e\u003e\u003e List shopping list items.\\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2718] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listtasks     / #ltk \u003e\u003e\u003e List tasks.\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #listweddings  / #lwd \u003e\u003e\u003e List weddings.\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Completion Status  [\\u271C] Added Date\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Start/Target Date  [\\u271C] Description Text\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    String DUKE_MGMT \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        *** Manage Existing Notes ***\\n\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #delete        / #del \u003e\u003e\u003e Delete notes, then renumber the rest.\\n\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Optional Attributes\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Numbers of Notes        --\u003e  /n      \u003cNote#\u003e \u0026 \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #editdesc      / #edd \u003e\u003e\u003e Edit the description of a note.\\n\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            New Description               --\u003e  /to     \u003cNew Description\u003e\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #editend       / #ede \u003e\u003e\u003e Edit the end date-time of an Event.\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            New Event End Date-Time       --\u003e  /to     \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #editstart     / #eds \u003e\u003e\u003e Edit the start date-time of an Event.\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            New Event Start Date-Time     --\u003e  /to     \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #edittarget    / #edt \u003e\u003e\u003e Edit the target date-time of a Deadline.\\n\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            New Deadline Target Date-Time --\u003e  /to     \u003cdd-MMM-yyyy HH:mm\u003e\\n\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #extend        / #xtd \u003e\u003e\u003e Extend a deadline.\\n\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note         --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Extend by at least one of the following:\\n\" +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              by Days                     --\u003e  /d      \u003cNumber of Days\u003e\\n\" +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              by Hours                    --\u003e  /h      \u003cNumber of Hours\u003e\\n\" +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              by Minutes                  --\u003e  /m      \u003cNumber of Minutes\u003e\\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #markdone      / #mkd \u003e\u003e\u003e Mark notes as done.\\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Single Serial Number          --\u003e  /n      \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u271C] Optional Attributes\\n\" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Multiple Serial Numbers       --\u003e  /n      \u003cNote#\u003e \u0026 \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"        #transfer      / #txf \u003e\u003e\u003e Transfer budgets from one note to another.\\n\" +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"          [\\u2714] Required Attributes\\n\" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Serial Number of Note\\n\" +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              to Transfer Budget Out      --\u003e  /from   \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"              to Transfer Budget In       --\u003e  /to     \u003cNote#\u003e\\n\" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"            Budget Amount to Transfer     --\u003e  /for $  \u003cX.xx\u003e\\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    \"\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    //METHODS-------------------------------------------"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a confirmation statement when a new {@code Note} object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * has been successfully created."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param typeAdded The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors in the command input."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void addConfirm(String typeAdded) throws CommandException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Noted! I\u0027ve added a new \""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                + NoteType.getLOWERCASE_NAME(typeAdded) + \" to the list.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a statement seeking confirmation for a major operation."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void askForConfirmation() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Reply \\\"Y\\\" to confirm or any other character(s) to abort.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a icon indicating the success status of an auto-save operation."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isSuccessful True if the auto-save operation has been successful."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void autoSaveConfirmation(boolean isSuccessful) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.printf(\"%78s\", \"Auto-Save \");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isSuccessful){"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"\\u2615\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"\\u26D4\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a {@code String} object wrapped within the specified character width."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The (@code String} object to be printed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param limit The character width for which the input is to be wrapped in."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void commandWrap(String input, int limit) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"        \\\"\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.length() \u003c limit) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(input);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(\"\\\"\\n\\n\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                int lastSpace \u003d 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (input.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        lastSpace \u003d i;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(input.substring(0, lastSpace) + \"\\n         \");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                input \u003d input.substring(lastSpace+1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print, as part of a listing of {@code Note} objects,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * a {@code String} object wrapped within the specified character width."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The (@code String} object to be printed."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param limit The character width for which the input is to be wrapped in."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param addDate The (@code Date} object to be printed, reflecting the date and time"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *                the {@code Note} object was added,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void listWrap(String input, int limit, Date addDate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        boolean firstLine \u003d true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.length() \u003c limit) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(firstLine) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.printf(\"%1$-28s%2$28s%n\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            input, \"Added: \" + NOTE_TIME.format(addDate));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"                    \" + input);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                int lastSpace \u003d 0;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (input.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        lastSpace \u003d i;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                if(firstLine) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.printf(\"%1$-28s%2$28s%n\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                            input.substring(0, lastSpace), \"Added: \" +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                                    NOTE_TIME.format(addDate));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    input \u003d input.substring(lastSpace + 1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    firstLine \u003d false;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    System.out.println(\"                    \" + input.substring(0, lastSpace));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    input \u003d input.substring(lastSpace + 1);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a {@code String} object wrapped within the standard width for {@code Duke}."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param input The (@code String} object to be printed."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void standardWrap(String input) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        int limit \u003d 76;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if (input.length() \u003c limit) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(input);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                int lastSpace \u003d 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                for (int i \u003d 0; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    if (input.charAt(i) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                        lastSpace \u003d i;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                System.out.print(input.substring(0, lastSpace) + \"\\n    \");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                input \u003d input.substring(lastSpace+1);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a report on the number of completed {@code Note} objects."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void printCompleted() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    You have completed \" + Task.getTasksCompleted() +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \" task(s) and \" + Event.getEventsCompleted() + \" event(s)!\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a divider to encase and organize textual user interfaces."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void printDivider() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(DUKE_DIVIDER);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a report on the number of outstanding {@code Note} objects."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void printOutstanding() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    You have...\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"        \");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.printf(\"%3d\", Task.getTasksOutstanding());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\" outstanding task(s),\\n\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"        \");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.printf(\"%3d\", Event.getEventsOutstanding());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\" outstanding events(s), and\\n\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Budget.printBudgetReport();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"                                                    ...on your list.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print the welcome message upon the startup of {@code Duke}."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param now The {@code Date} object reflecting the date and time {@code Duke} was started up."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param isLoadedFromFile True if {@code Note} objects were successfully read and reconstructed from saved files."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors reading from the set {@code DukeCommand} enums."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors reading from the set {@code Duke} enums."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void printOnStartup(Date now, boolean isLoadedFromFile) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.print(\"\\nWelcome to PROJECT \u003e\u003e\u003e\\n\" + DUKE_LOGO);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.printf(\"%1$-42s%2$42s%n\", DATE_TODAY.format(now), DAY_TODAY.format(now));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.printf(\"%1$-42s%2$42s%n\", ZodiacYear.getZODIAC_YEAR(now), SunSign.getSUN_SIGN(now));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(String.format(\"%1$-42s%2$42s\", LunarMonth.getLUNAR_MONTH(now),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                MercuryMovement.getMERCURY_MOVEMENT(now)) + \"\\n\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Thread.sleep(3 * 1000);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Thread.currentThread().interrupt();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Duke, your all-rounded personal assistant!\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        showCommandList(\"all\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(isLoadedFromFile){"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    Saved notes were found and loaded.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            printCompleted();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            printOutstanding();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            suggestListNotes();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            System.out.println(\"    No saved notes were found.\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to read and pass as a {@code String} object,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * the textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The textual input provided by the user in verbatim."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static String receiveCommand() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print the full list of available (@code DukeCommand} object types,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * as well as the required formats to call these commands."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void showCommandList(String infoType) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    What do you need done today?\\n\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        switch (infoType) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"gen\" -\u003e System.out.println(DUKE_GENERIC);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"new\" -\u003e System.out.println(DUKE_NEW);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"info\" -\u003e System.out.println(DUKE_INFO);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"mgmt\" -\u003e System.out.println(DUKE_MGMT);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            case \"all\" -\u003e System.out.println(DUKE_COMMANDS);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a statement suggesting the user to consult the command list"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for a full list of available (@code DukeCommand} object types."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors reading from the set {@code DukeCommand} enums."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void suggestCommands() throws CommandException {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Use command \" + CmdType.getCOMMAND(\"COMMANDS\") +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \" to see a list of things I can do for you.\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a statement suggesting the user to consult the command list"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for a full list of the required formats to call on commands."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors reading from the set {@code DukeCommand} enums."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void suggestFormat() throws CommandException {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Use command \" + CmdType.getCOMMAND(\"COMMANDS\") +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \" to see the correct format for command attributes.\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method is used to print a statement suggesting the user to consult the notes list"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for a full list of the existing {@code Note} objects in memory."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception CommandException If there are errors reading from the set {@code DukeCommand} enums."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    static void suggestListNotes() throws CommandException {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(\"    Enter command \" + CmdType.getCOMMAND(\"LISTNOTES\") +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \" to see them all.\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 464
    }
  },
  {
    "path": "src/main/java/duke/ui/LunarMonth.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists the corresponding Lunar Months for the Gregorian date periods of the Year 2020."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum LunarMonth {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PIG12(\"26-DEC-2019 00:00\", \"24-JAN-2020 23:59:59\", \"12th Lunar Month\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT01(\"25-JAN-2020 00:00\", \"22-FEB-2020 23:59:59\", \"1st Lunar Month\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT02(\"23-FEB-2020 00:00\", \"23-MAR-2020 23:59:59\", \"2nd Lunar Month\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT03(\"24-MAR-2020 00:00\", \"22-APR-2020 23:59:59\", \"3rd Lunar Month\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT04(\"23-APR-2020 00:00\", \"22-MAY-2020 23:59:59\", \"4th Lunar Month\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT04L(\"23-MAY-2020 00:00\", \"20-JUN-2020 23:59:59\", \"4th Lunar Month (Leap Month)\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT05(\"21-JUN-2020 00:00\", \"20-JUL-2020 23:59:59\", \"5th Lunar Month\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT06(\"21-JUL-2020 00:00\", \"18-AUG-2020 23:59:59\", \"6th Lunar Month\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT07(\"19-AUG-2020 00:00\", \"16-SEP-2020 23:59:59\", \"7th Lunar Month\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT08(\"17-SEP-2020 00:00\", \"16-OCT-2020 23:59:59\", \"8th Lunar Month\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT09(\"17-OCT-2020 00:00\", \"14-NOV-2020 23:59:59\", \"9th Lunar Month\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT10(\"15-NOV-2020 00:00\", \"14-DEC-2020 23:59:59\", \"10th Lunar Month\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT11(\"15-DEC-2020 00:00\", \"12-JAN-2021 23:59:59\", \"11th Lunar Month\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RAT12(\"13-JAN-2021 00:00\", \"11-FEB-2021 23:59:59\", \"12th Lunar Month\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String FROM;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String TO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String LUNAR_MONTH;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code LunarMonth} enum items."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param from The starting date of the Gregorian date period."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param to The ending date of the Gregorian date period."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param lunarMonth The corresponding Lunar Month for the Gregorian date period."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LunarMonth(String from, String to, String lunarMonth) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.FROM \u003d from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TO \u003d to;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.LUNAR_MONTH \u003d lunarMonth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns corresponding Lunar Month"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the Gregorian date provided."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object reflecting the Gregorian date provided."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding Lunar Month for the Gregorian date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors converting the String input into a {@code Date} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getLUNAR_MONTH(Date date) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(LunarMonth month: LunarMonth.values()){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d DukeUI.INPUT_TIME.parse(month.FROM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d DukeUI.INPUT_TIME.parse(month.TO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(date.compareTo(start)\u003e\u003d0 \u0026\u0026 date.compareTo(end)\u003c\u003d0){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return month.LUNAR_MONTH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"ERROR\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 67
    }
  },
  {
    "path": "src/main/java/duke/ui/MercuryMovement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists the movements of Mercury for the Gregorian date periods of the Year 2020."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum MercuryMovement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PROG1(\"01-JAN-2020 00:00:00\", \"01-FEB-2020 23:59:59\", \"Mercury in Prograde\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PRER1(\"02-FEB-2020 00:00:00\", \"15-FEB-2020 23:59:59\", \"Mercury in Pre-Retrograde\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RTRG1(\"16-FEB-2020 00:00:00\", \"09-MAR-2020 23:59:59\", \"Mercury in Retrograde\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    POSR1(\"10-MAR-2020 00:00:00\", \"29-MAR-2020 23:59:59\", \"Mercury in Post-Retrograde\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PROG2(\"30-MAR-2020 00:00:00\", \"01-JUN-2020 23:59:59\", \"Mercury in Prograde\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PRER2(\"02-JUN-2020 00:00:00\", \"17-JUN-2020 23:59:59\", \"Mercury in Pre-Retrograde\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RTRG2(\"18-JUN-2020 00:00:00\", \"12-JUL-2020 23:59:59\", \"Mercury in Retrograde\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    POSR2(\"13-JUL-2020 00:00:00\", \"26-JUL-2020 23:59:59\", \"Mercury in Post-Retrograde\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PROG3(\"27-JUL-2020 00:00:00\", \"22-SEP-2020 23:59:59\", \"Mercury in Prograde\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PRER3(\"23-SEP-2020 00:00:00\", \"12-OCT-2020 23:59:59\", \"Mercury in Pre-Retrograde\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    RTRG3(\"13-OCT-2020 00:00:00\", \"03-NOV-2020 23:59:59\", \"Mercury in Retrograde\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    POSR3(\"04-NOV-2020 00:00:00\", \"19-NOV-2020 23:59:59\", \"Mercury in Post-Retrograde\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PROG4(\"20-NOV-2020 00:00:00\", \"31-DEC-2020 23:59:59\", \"Mercury in Prograde\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String FROM;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String TO;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String MERCURY_MOVEMENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code MercuryMovement} enum items."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param from The starting date of the Gregorian date period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param to The ending date of the Gregorian date period."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param mercuryMovement The corresponding movement of Mercury for the Gregorian date period."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    MercuryMovement(String from, String to, String mercuryMovement) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.FROM \u003d from;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TO \u003d to;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.MERCURY_MOVEMENT \u003d mercuryMovement;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns corresponding movement of Mercury"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the Gregorian date provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object reflecting the Gregorian date provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding movement of Mercury for the Gregorian date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors converting the String input into a {@code Date} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getMERCURY_MOVEMENT(Date date) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(MercuryMovement mercury: MercuryMovement.values()){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d DukeUI.INPUT_TIME.parse(mercury.FROM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d DukeUI.INPUT_TIME.parse(mercury.TO);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(date.compareTo(start)\u003e\u003d0 \u0026\u0026 date.compareTo(end)\u003c\u003d0){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return mercury.MERCURY_MOVEMENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"ERROR\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/SunSign.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists the Sun Signs for the Gregorian date periods of each year."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum SunSign {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    ARIES(\"21-MAR\", \"19-APR\", \"Sun in Aries\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    TAURUS(\"20-APR\", \"20-MAY\", \"Sun in Taurus\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    GEMINI(\"21-MAY\", \"20-JUN\", \"Sun in Gemini\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    CANCER(\"21-JUN\", \"22-JUL\", \"Sun in Cancer\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LEO(\"23-JUL\", \"22-AUG\", \"Sun in Leo\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    VIRGO(\"23-AUG\", \"22-SEP\", \"Sun in Virgo\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    LIBRA(\"23-SEP\", \"22-OCT\", \"Sun in Libra\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SCORPIO(\"23-OCT\", \"21-NOV\", \"Sun in Scorpio\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SAGITTARIUS(\"22-NOV\", \"21-DEC\", \"Sun in Sagittarius\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    CAPRICORN(\"22-DEC\", \"19-JAN\", \"Sun in Capricorn\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    AQUARIUS(\"20-JAN\", \"18-FEB\", \"Sun in Aquarius\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    PISCES(\"19-FEB\", \"20-MAR\", \"Sun in Pisces\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String FROM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String TO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String SUN_SIGN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code SunSign} enum items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param from The starting date of the Gregorian date period."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param to The ending date of the Gregorian date period."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param sunSign The corresponding Sun Sign for the Gregorian date period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    SunSign(String from, String to, String sunSign) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.FROM \u003d from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TO \u003d to;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.SUN_SIGN \u003d sunSign;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns corresponding Sun Sign"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the Gregorian date provided."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object reflecting the Gregorian date provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding Sun Sign for the Gregorian date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors converting the String input into a {@code Date} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getSUN_SIGN(Date date) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(SunSign sign: SunSign.values()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String from \u003d sign.FROM + \"-\" + DukeUI.YEAR_TODAY.format(date) + \" 00:00:00\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            String to \u003d sign.TO + \"-\" + DukeUI.YEAR_TODAY.format(date)  + \" 23:59:59\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d DukeUI.INPUT_TIME.parse(from);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d DukeUI.INPUT_TIME.parse(to);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(date.compareTo(start)\u003e\u003d0 \u0026\u0026 date.compareTo(end)\u003c\u003d0){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return sign.SUN_SIGN;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"ERROR\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 66
    }
  },
  {
    "path": "src/main/java/duke/ui/ZodiacYear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * This enum lists the Zodiac Year for the Gregorian date periods from Year 2020 to Year 2032."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @author tanqiuyu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " * @since 2020-09-16"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "@SuppressWarnings(\"unused\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public enum ZodiacYear {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_20_21(\"25-JAN-2020 00:00:00\", \"11-FEB-2021 23:59:59\", \"Year of the Rat\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_21_22(\"12-FEB-2021 00:00:00\", \"31-JAN-2022 23:59:59\", \"Year of the Ox\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_22_23(\"01-FEB-2022 00:00:00\", \"21-JAN-2023 23:59:59\", \"Year of the Tiger\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_23_24(\"22-JAN-2023 00:00:00\", \"09-FEB-2024 23:59:59\", \"Year of the Rabbit\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_24_25(\"10-FEB-2024 00:00:00\", \"28-JAN-2025 23:59:59\", \"Year of the Dragon\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_25_26(\"29-JAN-2025 00:00:00\", \"16-FEB-2026 23:59:59\", \"Year of the Snake\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_26_27(\"17-FEB-2026 00:00:00\", \"05-FEB-2027 23:59:59\", \"Year of the Horse\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_27_28(\"06-FEB-2027 00:00:00\", \"25-JAN-2028 23:59:59\", \"Year of the Goat\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_28_29(\"26-JAN-2028 00:00:00\", \"12-FEB-2029 23:59:59\", \"Year of the Monkey\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_29_30(\"13-FEB-2029 00:00:00\", \"02-FEB-2030 23:59:59\", \"Year of the Rooster\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_30_31(\"03-FEB-2030 00:00:00\", \"22-JAN-2031 23:59:59\", \"Year of the Dog\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    YEAR_31_32(\"23-JAN-2031 00:00:00\", \"10-FEB-2032 23:59:59\", \"Year of the Pig\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String FROM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String TO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private final String ZODIAC_YEAR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method constructs the various {@code ZodiacYear} enum items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param from The starting date of the Gregorian date period."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param to The ending date of the Gregorian date period."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param zodiacYear The corresponding Zodiac Year for the Gregorian date period."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    ZodiacYear(String from, String to, String zodiacYear) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.FROM \u003d from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.TO \u003d to;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        this.ZODIAC_YEAR \u003d zodiacYear;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * This method returns corresponding Zodiac Year"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * for the Gregorian date provided."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @param date The {@code Date} object reflecting the Gregorian date provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @return String The corresponding Zodiac Year for the Gregorian date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     * @exception ParseException If there are errors converting the String input into a {@code Date} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static String getZODIAC_YEAR(Date date) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        for(ZodiacYear year: ZodiacYear.values()){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date start \u003d DukeUI.INPUT_TIME.parse(year.FROM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            Date end \u003d DukeUI.INPUT_TIME.parse(year.TO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            if(date.compareTo(start)\u003e\u003d0 \u0026\u0026 date.compareTo(end)\u003c\u003d0){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                return year.ZODIAC_YEAR;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return \"ERROR\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 64
    }
  },
  {
    "path": "src/main/resources/view/DeleteConfirmWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"838.0\" style\u003d\"-fx-background-color: #e9ecf5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.commands.DeleteConfirmWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"438.0\" prefWidth\u003d\"818.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"52.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cVBox fx:id\u003d\"noteContainer\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"438.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"803.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"confirmButton\" alignment\u003d\"CENTER\" layoutX\u003d\"9.0\" layoutY\u003d\"458.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitConfirm\" prefHeight\u003d\"32.0\" prefWidth\u003d\"404.0\" text\u003d\"CONFIRM\" textAlignment\u003d\"CENTER\" textFill\u003d\"#c14953\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"424.0\" AnchorPane.topAnchor\u003d\"458.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"abortButton\" alignment\u003d\"CENTER\" layoutX\u003d\"411.0\" layoutY\u003d\"458.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitAbort\" prefHeight\u003d\"32.0\" prefWidth\u003d\"404.0\" text\u003d\"ABORT\" textAlignment\u003d\"CENTER\" textFill\u003d\"#00a676\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"424.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"458.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 26
    }
  },
  {
    "path": "src/main/resources/view/DialogueBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"WHITE\" height\u003d\"100.0\" opacity\u003d\"0.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" style\u003d\"-fx-fill: #FFFFFF;\" width\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"text\" alignment\u003d\"TOP_LEFT\" wrapText\u003d\"true\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"100.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"763.0\" style\u003d\"-fx-border-radius: 6px; -fx-background-color: #e9ecf5; -fx-border-width: 2px; -fx-background-radius: 6px;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/opaqueInsets\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 34
    }
  },
  {
    "path": "src/main/resources/view/ExitConfirmWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"160.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #e9ecf5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.commands.ExitConfirmWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"confirmButton\" alignment\u003d\"CENTER\" layoutX\u003d\"9.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitConfirm\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"CONFIRM\" textAlignment\u003d\"CENTER\" textFill\u003d\"#c14953\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"155.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"abortButton\" alignment\u003d\"CENTER\" layoutX\u003d\"155.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitAbort\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"ABORT\" textAlignment\u003d\"CENTER\" textFill\u003d\"#00a676\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"155.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"12.0\" layoutY\u003d\"21.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Are you sure you want to exit Duke?\" wrappingWidth\u003d\"280.0\" AnchorPane.bottomAnchor\u003d\"122.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas Bold\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"10.0\" layoutY\u003d\"68.912109375\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"All unsaved data would be lost.\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"53.0\" AnchorPane.leftAnchor\u003d\"90.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"75.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 26
    }
  },
  {
    "path": "src/main/resources/view/ListBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"120.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"783.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"text\" alignment\u003d\"TOP_LEFT\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"100.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"763.0\" style\u003d\"-fx-border-color: #e4b363; -fx-border-radius: 6px; -fx-background-color: #e9ecf5; -fx-border-width: 2px; -fx-background-radius: 6px;\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/opaqueInsets\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1000.0\" maxWidth\u003d\"1043.0\" minHeight\u003d\"1000.0\" minWidth\u003d\"1043.0\" prefHeight\u003d\"1000.0\" prefWidth\u003d\"1043.0\" style\u003d\"-fx-background-color: #F2CC8F;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"950.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"900.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"48.0\" prefWidth\u003d\"900.0\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"141.0\" AnchorPane.topAnchor\u003d\"951.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"700.0\" layoutY\u003d\"950.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"48.0\" prefWidth\u003d\"139.0\" text\u003d\"SEND\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"903.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"951.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"948.0\" prefWidth\u003d\"798.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"51.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogueContainer\" fillWidth\u003d\"false\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"948.0\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"1028.0\" style\u003d\"-fx-background-color: #FFFFFF;\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 32
    }
  },
  {
    "path": "src/main/resources/view/PriceWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"160.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #e9ecf5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.notes.budget.PriceWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"itemName\" alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"60.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"280.0\" style\u003d\"-fx-border-radius: 5; -fx-border-color: #f2cc8f; -fx-padding: 2; -fx-background-color: #FFFFFF; -fx-background-radius: 5;\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "               textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"29.0\" layoutY\u003d\"119.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" onAction\u003d\"#getPriceInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"155.0\" promptText\u003d\"Price\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"30.0\" AnchorPane.rightAnchor\u003d\"115.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \u003cFont name\u003d\"Consolas\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"confirmButton\" alignment\u003d\"CENTER\" layoutX\u003d\"190.0\" layoutY\u003d\"119.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#getPriceInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"100.0\" text\u003d\"CONFIRM\" textAlignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"190.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                \u003cFont name\u003d\"Consolas\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cRectangle arcHeight\u003d\"10.0\" arcWidth\u003d\"5.0\" fill\u003d\"#e9ecf5\" height\u003d\"40.0\" layoutX\u003d\"3.0\" layoutY\u003d\"117.0\" stroke\u003d\"#e9ecf5\" strokeType\u003d\"INSIDE\" width\u003d\"22.0\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.leftAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"276.0\" AnchorPane.topAnchor\u003d\"118.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"2.0\" layoutY\u003d\"145.53125\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"\\$\" wrappingWidth\u003d\"18.0\" AnchorPane.bottomAnchor\u003d\"7.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"272.0\" AnchorPane.topAnchor\u003d\"111.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"How much did you pay for...\" wrappingWidth\u003d\"280.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 42
    }
  },
  {
    "path": "src/main/resources/view/UndoConfirmWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"160.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #e9ecf5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.commands.UndoConfirmWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"confirmButton\" alignment\u003d\"CENTER\" layoutX\u003d\"9.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#undoConfirm\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"CONFIRM\" textAlignment\u003d\"CENTER\" textFill\u003d\"#c14953\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"155.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"abortButton\" alignment\u003d\"CENTER\" layoutX\u003d\"155.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#undoAbort\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"ABORT\" textAlignment\u003d\"CENTER\" textFill\u003d\"#00a676\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"155.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"12.0\" layoutY\u003d\"21.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Are you sure you want to undo the last save?\" wrappingWidth\u003d\"280.0\" AnchorPane.bottomAnchor\u003d\"122.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas Bold\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"10.0\" layoutY\u003d\"68.912109375\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"All unsaved data would be lost.\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"53.0\" AnchorPane.leftAnchor\u003d\"90.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"75.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 26
    }
  },
  {
    "path": "src/main/resources/view/WipeConfirmWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"160.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #e9ecf5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.commands.ExitConfirmWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"confirmButton\" alignment\u003d\"CENTER\" layoutX\u003d\"9.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitConfirm\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"CONFIRM\" textAlignment\u003d\"CENTER\" textFill\u003d\"#c14953\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"155.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003cButton fx:id\u003d\"abortButton\" alignment\u003d\"CENTER\" layoutX\u003d\"155.0\" layoutY\u003d\"118.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#exitAbort\" prefHeight\u003d\"32.0\" prefWidth\u003d\"135.0\" text\u003d\"ABORT\" textAlignment\u003d\"CENTER\" textFill\u003d\"#00a676\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"155.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"118.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"12.0\" layoutY\u003d\"21.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Are you sure you want to wipe Duke\u0027s memory?\" wrappingWidth\u003d\"280.0\" AnchorPane.bottomAnchor\u003d\"122.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas Bold\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003cText layoutX\u003d\"15.0\" layoutY\u003d\"68.912109375\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"All data, including saved files, would be lost.\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"275.0\" AnchorPane.bottomAnchor\u003d\"53.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"75.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 26
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Birthday;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Wedding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Bill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Shoplist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static final DukeStorage testStorage \u003d new DukeStorage(\"data/testnotes.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static final DukeList testNotes \u003d new DukeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static final Date testStart \u003d new Date();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static Date fromTestStart(double days) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        long m \u003d (long) (86400000 * days);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (new Date(testStart.getTime() + m));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    public static void initNotes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #0\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(0.8), 780.27, testStart));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #4\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.56), fromTestStart(4.62), 358.65, testStart));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #2\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(2.1), testStart));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #2\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                89900.28, testStart));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.8), testStart));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                3900.12, testStart));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #1\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.75), fromTestStart(1.93), 668.88, testStart));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #2\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #4\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.2), testStart));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #4\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.18), fromTestStart(4.23), testStart));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #5\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #5\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(5.12), testStart));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #5\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(5.15), fromTestStart(5.26), 298.15, testStart));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #6\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #5\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(5.61), 702.23, testStart));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #5\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(5.72), fromTestStart(5.81), testStart));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #5\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(5.60), fromTestStart(5.70), testStart));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #6\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                1852243.81, testStart));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #0\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                4800.72, testStart));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #6\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(6.25), fromTestStart(6.37), testStart));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #2\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(2.14), 230.17, testStart));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #2\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(2.48), fromTestStart(2.68), testStart));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #3\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                150000.73, testStart));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #3\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(3.16), 850.16, testStart));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #4\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                888000.47, testStart));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #4\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.01), 7522.37, testStart));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #4\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.82), fromTestStart(4.98), testStart));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #0\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #3\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(3.42), fromTestStart(3.65), 988.88, testStart));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #4\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #6\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(6.15), 702.23, testStart));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #6\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(6.76), fromTestStart(6.85), testStart));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #3\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(3.8), testStart));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #6\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(6.45), fromTestStart(6.59), 298.15, testStart));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #1\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.74), 610.83, testStart));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #1\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.2), fromTestStart(1.38), testStart));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #0\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(0.3), fromTestStart(0.5), testStart));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #0\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(0.7), fromTestStart(0.8), testStart));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #0\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(0.55), fromTestStart(0.6), 500.27, testStart));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #1\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #1\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.40), fromTestStart(1.58), testStart));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #0\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(0.25), testStart));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #2\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(2.02), fromTestStart(2.15), testStart));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #2\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(2.75), fromTestStart(2.90), 728.37, testStart));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Task(testNotes.getNotes().size()+1, \"Task test #3\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                testStart));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #3\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(3.08), fromTestStart(3.28), testStart));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #3\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(3.86), fromTestStart(3.99), testStart));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Deadline(testNotes.getNotes().size()+1, \"Deadline test #6\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(6.92), testStart));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #5\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                1440000.34, testStart));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void countOutstandingTest() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(28, Task.getTasksOutstanding());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(21, Event.getEventsOutstanding());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void printNotesTest() throws CommandException, ParseException, DateException, IOException, InterruptedException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeCommand testPrint \u003d new ListCommand(\"LISTNOTES\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testPrint.execute(testNotes, testStorage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 196
    }
  },
  {
    "path": "src/test/java/duke/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Birthday;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.event.Wedding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Bill;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.task.Shoplist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.parser.DateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.storage.DukeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static DukeList testNotes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static final Date testStart \u003d new Date();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    protected static Date fromTestStart(double days) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        long m \u003d (long) (86400000 * days);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        return (new Date(testStart.getTime() + m));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void selectionSortBudgetsTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes \u003d new DukeList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ListCommand test \u003d new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Bill(testNotes.getNotes().size()+1, \"Bill test #4\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.01), 7522.37, testStart));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.75), fromTestStart(1.93), 668.88, testStart));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortBudgets(testNotes.getNotes());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #0\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                4800.72, testStart));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortBudgets(testNotes.getNotes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(2).getSerialNum());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Shoplist(testNotes.getNotes().size()+1, \"Shoplist test #5\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                1440000.34, testStart));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortBudgets(testNotes.getNotes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(2).getSerialNum());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(4, testNotes.getNotes().get(3).getSerialNum());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void selectionSortDatesTest() throws DateException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes \u003d new DukeList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        ListCommand test \u003d new ListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #4\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.56), fromTestStart(4.62), 358.65, testStart));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Wedding(testNotes.getNotes().size()+1, \"Wedding test #1\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(1.75), fromTestStart(1.93), 668.88, testStart));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortDates(testNotes.getNotes());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Birthday(testNotes.getNotes().size()+1, \"Birthday test #4\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.18), fromTestStart(4.23), testStart));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortDates(testNotes.getNotes());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(2).getSerialNum());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        testNotes.getNotes().add(new Event(testNotes.getNotes().size()+1, \"Event test #4\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "                fromTestStart(4.82), fromTestStart(4.98), testStart));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        test.selectionSortDates(testNotes.getNotes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2, testNotes.getNotes().get(0).getSerialNum());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3, testNotes.getNotes().get(1).getSerialNum());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1, testNotes.getNotes().get(2).getSerialNum());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(4, testNotes.getNotes().get(3).getSerialNum());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 88
    }
  },
  {
    "path": "src/test/java/duke/notes/budget/BudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.notes.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Budget budgetX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Budget budgetY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    private Budget budgetZ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX \u003d new Budget(1500.50);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetY \u003d new Budget(7500.25);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetZ \u003d new Budget(3725.75);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void clear() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgetX !\u003dnull){ budgetX.deleteExistingBudget();}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgetY !\u003dnull){ budgetY.deleteExistingBudget();}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        if(budgetZ !\u003dnull){ budgetZ.deleteExistingBudget();}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @DisplayName(\"Total Budget Test\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void totalBudgetTest(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.setBudgetUsed(2538.50);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetY.setBudgetUsed(3258.55);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetX.getIsOverBudget());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetY.getIsOverBudget());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetZ.getIsOverBudget());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBUDGET_SET());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(7500.25, budgetY.getBUDGET_SET());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3725.75, budgetZ.getBUDGET_SET());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(12726.50, Budget.getTotalBudgetSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(5797.05, Budget.getTotalBudgetUsed());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3203.70, Budget.getTotalBudgetBalance());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(Budget.getIsTotalOverBudget());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @DisplayName(\"Delete Budget Test\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void deleteBudgetTest(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.setBudgetUsed(2538.50);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetY.setBudgetUsed(3258.55);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetY.deleteExistingBudget();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetX.getIsOverBudget());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetZ.getIsOverBudget());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBUDGET_SET());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(3725.75, budgetZ.getBUDGET_SET());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(5226.25, Budget.getTotalBudgetSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(2538.50, Budget.getTotalBudgetUsed());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(-1038, Budget.getTotalBudgetBalance());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(Budget.getIsTotalOverBudget());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @DisplayName(\"Unused Budget Transfer Test\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void unusedBudgetTransferTest(){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.transferBudgetOut(500.25, budgetY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetX.getIsOverBudget());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetY.getIsOverBudget());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBUDGET_SET());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1000.25, budgetX.getBudgetRevised());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(7500.25, budgetY.getBUDGET_SET());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(8000.50, budgetY.getBudgetRevised());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetX.getIsRevised());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetY.getIsRevised());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @DisplayName(\"Over Budget Transfer Test\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void overBudgetTransferTest(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.setBudgetUsed(1600.50);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetX.getIsOverBudget());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetY.getIsOverBudget());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.transferBudgetOut(500.25, budgetY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBUDGET_SET());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBudgetRevised());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(7500.25, budgetY.getBUDGET_SET());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(7500.25, budgetY.getBudgetRevised());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetX.getIsRevised());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetY.getIsRevised());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @DisplayName(\"Under Budget Transfer Test\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void underBudgetTransferTest(){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.setBudgetUsed(225.30);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetX.getIsOverBudget());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertFalse(budgetY.getIsOverBudget());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        budgetX.transferBudgetOut(500.25, budgetY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1500.50, budgetX.getBUDGET_SET());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(1000.25, budgetX.getBudgetRevised());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(7500.25, budgetY.getBUDGET_SET());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(8000.50, budgetY.getBudgetRevised());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetX.getIsRevised());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertTrue(budgetY.getIsRevised());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 115
    }
  },
  {
    "path": "src/test/java/duke/parser/DateParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.commands.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import duke.ui.DukeUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DateParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void dateTest() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String input \u003d \"tml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        Date results \u003d DateParser.understandDateInput(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        System.out.println(DukeUI.INPUT_TIME.format(results));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 21
    }
  },
  {
    "path": "src/test/java/duke/storage/DukeStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "public class DukeStorageTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    final String testText \u003d \"Wedding/16/James \u0026 Jamie/08-Sep-2020 03:12/true/29-Sep-2020 18:30/\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "            \"29-Sep-2020 23:30/300/567.23/567.23/567.23/0.0/false/false/08-Sep-2020 03:45\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    void encodeAndDecodeTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        DukeStorage testStorage \u003d new DukeStorage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String encodedText \u003d testStorage.encodeText(testText);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        String decodedText \u003d testStorage.decodeText(encodedText);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "        assertEquals(testText, decodedText);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "write story"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#listtask"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#markdone 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#listtask"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#markdone 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#listtask"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "#quitduke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "Y"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "if exist ACTUAL.TXT del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanqiuyu"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "tanqiuyu": 1,
      "-": 20
    }
  }
]
